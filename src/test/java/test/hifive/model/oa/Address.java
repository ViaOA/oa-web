// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "add",
    displayName = "Address",
    displayProperty = "cityStateZip"
)
@OATable(
    indexes = {
        @OAIndex(name = "AddressEmployee", columns = { @OAIndexColumn(name = "EmployeeId") })
    }
)
public class Address extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Address1 = "Address1";
    public static final String P_Address1 = "Address1";
    public static final String PROPERTY_Address2 = "Address2";
    public static final String P_Address2 = "Address2";
    public static final String PROPERTY_Address3 = "Address3";
    public static final String P_Address3 = "Address3";
    public static final String PROPERTY_Address4 = "Address4";
    public static final String P_Address4 = "Address4";
    public static final String PROPERTY_City = "City";
    public static final String P_City = "City";
    public static final String PROPERTY_State = "State";
    public static final String P_State = "State";
    public static final String PROPERTY_Zip = "Zip";
    public static final String P_Zip = "Zip";
    public static final String PROPERTY_Country = "Country";
    public static final String P_Country = "Country";
     
    public static final String PROPERTY_CityStateZip = "CityStateZip";
    public static final String P_CityStateZip = "CityStateZip";
     
    public static final String PROPERTY_AddressType = "AddressType";
    public static final String P_AddressType = "AddressType";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_ShipTos = "ShipTos";
    public static final String P_ShipTos = "ShipTos";
     
    protected int id;
    protected OADate created;
    protected String address1;
    protected String address2;
    protected String address3;
    protected String address4;
    protected String city;
    protected String state;
    protected String zip;
    protected String country;
     
    // Links to other objects.
    protected transient AddressType addressType;
    protected transient Employee employee;
     
    public Address() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Address(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Address", maxLength = 75, isUnicode = true, displayLength = 20, columnLength = 18)
    @OAColumn(maxLength = 75)
    public String getAddress1() {
        return address1;
    }
    
    public void setAddress1(String newValue) {
        fireBeforePropertyChange(P_Address1, this.address1, newValue);
        String old = address1;
        this.address1 = newValue;
        firePropertyChange(P_Address1, old, this.address1);
    }
    @OAProperty(maxLength = 75, isUnicode = true, displayLength = 20, columnLength = 14)
    @OAColumn(maxLength = 75)
    public String getAddress2() {
        return address2;
    }
    
    public void setAddress2(String newValue) {
        fireBeforePropertyChange(P_Address2, this.address2, newValue);
        String old = address2;
        this.address2 = newValue;
        firePropertyChange(P_Address2, old, this.address2);
    }
    @OAProperty(maxLength = 75, isUnicode = true, displayLength = 40, columnLength = 14)
    @OAColumn(maxLength = 75)
    public String getAddress3() {
        return address3;
    }
    
    public void setAddress3(String newValue) {
        fireBeforePropertyChange(P_Address3, this.address3, newValue);
        String old = address3;
        this.address3 = newValue;
        firePropertyChange(P_Address3, old, this.address3);
    }
    @OAProperty(maxLength = 75, isUnicode = true, displayLength = 40, columnLength = 14)
    @OAColumn(maxLength = 75)
    public String getAddress4() {
        return address4;
    }
    
    public void setAddress4(String newValue) {
        fireBeforePropertyChange(P_Address4, this.address4, newValue);
        String old = address4;
        this.address4 = newValue;
        firePropertyChange(P_Address4, old, this.address4);
    }
    @OAProperty(maxLength = 55, isUnicode = true, displayLength = 20, columnLength = 14)
    @OAColumn(maxLength = 55)
    public String getCity() {
        return city;
    }
    
    public void setCity(String newValue) {
        fireBeforePropertyChange(P_City, this.city, newValue);
        String old = city;
        this.city = newValue;
        firePropertyChange(P_City, old, this.city);
    }
    @OAProperty(maxLength = 45, displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 45)
    public String getState() {
        return state;
    }
    
    public void setState(String newValue) {
        fireBeforePropertyChange(P_State, this.state, newValue);
        String old = state;
        this.state = newValue;
        firePropertyChange(P_State, old, this.state);
    }
    @OAProperty(maxLength = 12, displayLength = 10, columnLength = 5)
    @OAColumn(maxLength = 12)
    public String getZip() {
        return zip;
    }
    
    public void setZip(String newValue) {
        fireBeforePropertyChange(P_Zip, this.zip, newValue);
        String old = zip;
        this.zip = newValue;
        firePropertyChange(P_Zip, old, this.zip);
    }
    @OAProperty(maxLength = 45, displayLength = 20)
    @OAColumn(maxLength = 45)
    public String getCountry() {
        return country;
    }
    
    public void setCountry(String newValue) {
        fireBeforePropertyChange(P_Country, this.country, newValue);
        String old = country;
        this.country = newValue;
        firePropertyChange(P_Country, old, this.country);
    }
    @OACalculatedProperty(displayName = "City/State/Zip", displayLength = 35, columnLength = 25, properties = {P_City, P_State, P_Zip})
    public String getCityStateZip() {
        String csz = "";
        // city
        city = this.getCity();
        if (city != null) csz = city;
        // state
        state = this.getState();
        if (!OAString.isEmpty(state)) {
            if (csz.length() > 0) csz += ", ";
            csz += state;
        }
        // zip
        zip = this.getZip();
        if (!OAString.isEmpty(zip)) {
            if (csz.length() > 0) csz += " ";
            csz += zip;
        }
        return csz;
    }
     
    @OAOne(
        displayName = "Address Type", 
        reverseName = AddressType.P_Addresses, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"AddressTypeId"})
    public AddressType getAddressType() {
        if (addressType == null) {
            addressType = (AddressType) getObject(P_AddressType);
        }
        return addressType;
    }
    
    public void setAddressType(AddressType newValue) {
        fireBeforePropertyChange(P_AddressType, this.addressType, newValue);
        AddressType old = this.addressType;
        this.addressType = newValue;
        firePropertyChange(P_AddressType, old, this.addressType);
    }
    
    @OAOne(
        reverseName = Employee.P_Addresses, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAOne(
        reverseName = Location.P_Address, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Location getLocation() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Ship Tos", 
        toClass = ShipTo.class, 
        reverseName = ShipTo.P_Address, 
        createMethod = false
    )
    private Hub<ShipTo> getShipTos() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.address1 = rs.getString(3);
        this.address2 = rs.getString(4);
        this.address3 = rs.getString(5);
        this.address4 = rs.getString(6);
        this.city = rs.getString(7);
        this.state = rs.getString(8);
        this.zip = rs.getString(9);
        this.country = rs.getString(10);
        int addressTypeFkey = rs.getInt(11);
        if (!rs.wasNull() && addressTypeFkey > 0) {
            setProperty(P_AddressType, new OAObjectKey(addressTypeFkey));
        }
        int employeeFkey = rs.getInt(12);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 12) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "ans",
    displayName = "Answer",
    displayProperty = "answerText",
    sortProperty = "question"
)
@OATable(
    indexes = {
        @OAIndex(name = "AnswerQuestion", columns = { @OAIndexColumn(name = "QuestionId") })
    }
)
public class Answer extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_AnswerText = "AnswerText";
    public static final String P_AnswerText = "AnswerText";
    public static final String PROPERTY_Value = "Value";
    public static final String P_Value = "Value";
     
     
    public static final String PROPERTY_Question = "Question";
    public static final String P_Question = "Question";
    public static final String PROPERTY_SavedAnswerResults = "SavedAnswerResults";
    public static final String P_SavedAnswerResults = "SavedAnswerResults";
     
    protected int id;
    protected String answerText;
    protected int value;
     
    // Links to other objects.
    protected transient Question question;
    protected transient Hub<AnswerResult> hubSavedAnswerResults;
     
    public Answer() {
        if (!isLoading()) {
            setValue(0);
        }
    }
     
    public Answer(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Answer Text", maxLength = 120, displayLength = 40)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getAnswerText() {
        return answerText;
    }
    
    public void setAnswerText(String newValue) {
        fireBeforePropertyChange(P_AnswerText, this.answerText, newValue);
        String old = answerText;
        this.answerText = newValue;
        firePropertyChange(P_AnswerText, old, this.answerText);
    }
    @OAProperty(defaultValue = "0", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getValue() {
        return value;
    }
    
    public void setValue(int newValue) {
        fireBeforePropertyChange(P_Value, this.value, newValue);
        int old = value;
        this.value = newValue;
        firePropertyChange(P_Value, old, this.value);
    }
    @OAOne(
        reverseName = Question.P_Answers
    )
    @OAFkey(columns = {"QuestionId"})
    public Question getQuestion() {
        if (question == null) {
            question = (Question) getObject(P_Question);
        }
        return question;
    }
    
    public void setQuestion(Question newValue) {
        fireBeforePropertyChange(P_Question, this.question, newValue);
        Question old = this.question;
        this.question = newValue;
        firePropertyChange(P_Question, old, this.question);
    }
    
    @OAMany(
        displayName = "Saved Answer Results", 
        toClass = AnswerResult.class, 
        reverseName = AnswerResult.P_CurrentAnswer
    )
    public Hub<AnswerResult> getSavedAnswerResults() {
        if (hubSavedAnswerResults == null) {
            hubSavedAnswerResults = (Hub<AnswerResult>) getHub(P_SavedAnswerResults);
        }
        return hubSavedAnswerResults;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.answerText = rs.getString(2);
        this.value = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Answer.P_Value, true);
        }
        int questionFkey = rs.getInt(4);
        if (!rs.wasNull() && questionFkey > 0) {
            setProperty(P_Question, new OAObjectKey(questionFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

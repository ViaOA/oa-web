// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "aco",
    displayName = "Award Card Order",
    displayProperty = "card"
)
@OATable(
    indexes = {
        @OAIndex(name = "AwardCardOrderEmployeeAward", columns = { @OAIndexColumn(name = "EmployeeAwardId") }), 
        @OAIndex(name = "AwardCardOrderInspireOrder", columns = { @OAIndexColumn(name = "InspireOrderId") })
    }
)
public class AwardCardOrder extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Value = "Value";
    public static final String P_Value = "Value";
    public static final String PROPERTY_SentDate = "SentDate";
    public static final String P_SentDate = "SentDate";
    public static final String PROPERTY_ShippingInfo = "ShippingInfo";
    public static final String P_ShippingInfo = "ShippingInfo";
    public static final String PROPERTY_CardType = "CardType";
    public static final String P_CardType = "CardType";
    public static final String PROPERTY_CardTypeAsString = "CardTypeAsString";
    public static final String P_CardTypeAsString = "CardTypeAsString";
    public static final String PROPERTY_LastStatusDate = "LastStatusDate";
    public static final String P_LastStatusDate = "LastStatusDate";
    public static final String PROPERTY_LastStatus = "LastStatus";
    public static final String P_LastStatus = "LastStatus";
    public static final String PROPERTY_CompletedDate = "CompletedDate";
    public static final String P_CompletedDate = "CompletedDate";
    public static final String PROPERTY_PointsUsed = "PointsUsed";
    public static final String P_PointsUsed = "PointsUsed";
    public static final String PROPERTY_InvoiceNumber = "InvoiceNumber";
    public static final String P_InvoiceNumber = "InvoiceNumber";
    public static final String PROPERTY_InvoiceDate = "InvoiceDate";
    public static final String P_InvoiceDate = "InvoiceDate";
    public static final String PROPERTY_VendorInvoiced = "VendorInvoiced";
    public static final String P_VendorInvoiced = "VendorInvoiced";
     
    public static final String PROPERTY_InspireOrderPointsUsed = "InspireOrderPointsUsed";
    public static final String P_InspireOrderPointsUsed = "InspireOrderPointsUsed";
    public static final String PROPERTY_InspireOrderPointsAvailable = "InspireOrderPointsAvailable";
    public static final String P_InspireOrderPointsAvailable = "InspireOrderPointsAvailable";
     
    public static final String PROPERTY_Card = "Card";
    public static final String P_Card = "Card";
    public static final String PROPERTY_CashstarOrder = "CashstarOrder";
    public static final String P_CashstarOrder = "CashstarOrder";
    public static final String PROPERTY_EmployeeAward = "EmployeeAward";
    public static final String P_EmployeeAward = "EmployeeAward";
    public static final String PROPERTY_InspireOrder = "InspireOrder";
    public static final String P_InspireOrder = "InspireOrder";
    public static final String PROPERTY_InspireValues = "InspireValues";
    public static final String P_InspireValues = "InspireValues";
     
    protected int id;
    protected OADate created;
    protected double value;
    protected OADate sentDate;
    protected String shippingInfo;
    protected int cardType;
    public static final int CARDTYPE_Digital = 0;
    public static final int CARDTYPE_Traditional = 1;
    public static final int CARDTYPE_Imagine = 2;
    public static final Hub<String> hubCardType;
    static {
        hubCardType = new Hub<String>(String.class);
        hubCardType.addElement("Digital");
        hubCardType.addElement("Traditional");
        hubCardType.addElement("Imagine");
    }
    protected OADate lastStatusDate;
    protected String lastStatus;
    protected OADate completedDate;
    protected double pointsUsed;
    protected String invoiceNumber;
    protected OADate invoiceDate;
    protected boolean vendorInvoiced;
     
    // Links to other objects.
    protected transient Card card;
    protected transient CashstarOrder cashstarOrder;
    protected transient EmployeeAward employeeAward;
    protected transient InspireOrder inspireOrder;
    protected transient Hub<Value> hubInspireValues;
     
    public AwardCardOrder() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public AwardCardOrder(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getValue() {
        return value;
    }
    public void setValue(double newValue) {
        if (!isLoading()) {
            EmployeeAward ua = getEmployeeAward();
            if (ua != null) {
                if (!ua.getCanSelectCard()) {
                   // throw new RuntimeException("Can not use cards for this Employee Award Type");
                }
                if (getSentDate() != null) {
                    throw new RuntimeException("Award Card has already has been sent, can not change this UserAward");
                }
                double balance = ua.getBalance(this);
                System.out.println("Balance: "+balance);
                balance += this.value;
                System.out.println("Balance2: "+balance);
                if (newValue > balance) {
                    //throw new RuntimeException("Value cant be greater then "+balance);
                }
            }
        }
        
        double pointsUsed = -1;
        InspireOrder io = getInspireOrder();
        if (io != null) {
            Employee emp = io.getEmployee();
            if (emp != null) {
                //pointsUsed = EmployeeDelegate.getPointValueForCard(emp, newValue);
                double d = emp.getPointsGrandTotal();
                if (pointsUsed > d) {
                    //throw new RuntimeException("Value can not be greater then "+ OAConv.toString(EmployeeDelegate.getCurrencyValueForCard(emp, d), true));
                }
            }
        }
        
        double old = value;
        fireBeforePropertyChange(PROPERTY_Value, old, newValue);
        this.value = newValue;
        firePropertyChange(PROPERTY_Value, old, this.value);
        
        // custom
        if (isLoading()) return;
        if (!isServer()) return;
    
        if (pointsUsed >= 0) {
            setPointsUsed(pointsUsed);
        }
    }
    @OAProperty(displayName = "Sent Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getSentDate() {
        return sentDate;
    }
    
    public void setSentDate(OADate newValue) {
        fireBeforePropertyChange(P_SentDate, this.sentDate, newValue);
        OADate old = sentDate;
        this.sentDate = newValue;
        firePropertyChange(P_SentDate, old, this.sentDate);
    }
    @OAProperty(displayName = "Shipping Info", maxLength = 150, displayLength = 40)
    @OAColumn(maxLength = 150)
    public String getShippingInfo() {
        return shippingInfo;
    }
    
    public void setShippingInfo(String newValue) {
        fireBeforePropertyChange(P_ShippingInfo, this.shippingInfo, newValue);
        String old = shippingInfo;
        this.shippingInfo = newValue;
        firePropertyChange(P_ShippingInfo, old, this.shippingInfo);
    }
    @OAProperty(displayName = "Card Type", displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getCardType() {
        return cardType;
    }
    
    public void setCardType(int newValue) {
        fireBeforePropertyChange(P_CardType, this.cardType, newValue);
        int old = cardType;
        this.cardType = newValue;
        firePropertyChange(P_CardType, old, this.cardType);
    }
    public String getCardTypeAsString() {
        if (isNull(P_CardType)) return "";
        String s = hubCardType.getAt(getCardType());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Last Status Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getLastStatusDate() {
        return lastStatusDate;
    }
    
    public void setLastStatusDate(OADate newValue) {
        fireBeforePropertyChange(P_LastStatusDate, this.lastStatusDate, newValue);
        OADate old = lastStatusDate;
        this.lastStatusDate = newValue;
        firePropertyChange(P_LastStatusDate, old, this.lastStatusDate);
    }
    @OAProperty(displayName = "Last Status", maxLength = 75, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getLastStatus() {
        return lastStatus;
    }
    
    public void setLastStatus(String newValue) {
        fireBeforePropertyChange(P_LastStatus, this.lastStatus, newValue);
        String old = lastStatus;
        this.lastStatus = newValue;
        firePropertyChange(P_LastStatus, old, this.lastStatus);
    }
    @OAProperty(displayName = "Completed Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCompletedDate() {
        return completedDate;
    }
    
    public void setCompletedDate(OADate newValue) {
        fireBeforePropertyChange(P_CompletedDate, this.completedDate, newValue);
        OADate old = completedDate;
        this.completedDate = newValue;
        firePropertyChange(P_CompletedDate, old, this.completedDate);
    }
    @OAProperty(displayName = "Points Used", decimalPlaces = 2, displayLength = 7, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPointsUsed() {
        return pointsUsed;
    }
    protected void setPointsUsed(double newValue) {
        double old = pointsUsed;
        fireBeforePropertyChange(PROPERTY_PointsUsed, old, newValue);
        this.pointsUsed = newValue;
        firePropertyChange(PROPERTY_PointsUsed, old, this.pointsUsed);
    }
    @OAProperty(displayName = "Invoice #", maxLength = 5, displayLength = 5)
    @OAColumn(maxLength = 5)
    public String getInvoiceNumber() {
        return invoiceNumber;
    }
    
    public void setInvoiceNumber(String newValue) {
        fireBeforePropertyChange(P_InvoiceNumber, this.invoiceNumber, newValue);
        String old = invoiceNumber;
        this.invoiceNumber = newValue;
        firePropertyChange(P_InvoiceNumber, old, this.invoiceNumber);
    }
    @OAProperty(displayName = "Invoice Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInvoiceDate() {
        return invoiceDate;
    }
    
    public void setInvoiceDate(OADate newValue) {
        fireBeforePropertyChange(P_InvoiceDate, this.invoiceDate, newValue);
        OADate old = invoiceDate;
        this.invoiceDate = newValue;
        firePropertyChange(P_InvoiceDate, old, this.invoiceDate);
    }
    @OAProperty(displayName = "Vendor Invoiced", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getVendorInvoiced() {
        return vendorInvoiced;
    }
    
    public void setVendorInvoiced(boolean newValue) {
        fireBeforePropertyChange(P_VendorInvoiced, this.vendorInvoiced, newValue);
        boolean old = vendorInvoiced;
        this.vendorInvoiced = newValue;
        firePropertyChange(P_VendorInvoiced, old, this.vendorInvoiced);
    }
    @OACalculatedProperty(displayName = "Inspire Order Points Used", decimalPlaces = 2, displayLength = 7, properties = {P_InspireOrder+"."+InspireOrder.P_PointsUsed, P_PointsUsed})
    /**
     * All points used on this cardOrder and on the InpspireOrder
     */
    public double getInspireOrderPointsUsed() {
        InspireOrder io = getInspireOrder();
        if (io == null) return 0;
        Employee emp = io.getEmployee();
        if (emp == null) return 0;
    
        double d = io.getPointsUsed();
        if (!io.getAwardCardOrders().contains(this)) {
            d -= getPointsUsed();
        }
        return d;
    }
     
    @OACalculatedProperty(displayName = "Inspire Order Points Available", decimalPlaces = 2, displayLength = 7, properties = {P_PointsUsed})
    public double getInspireOrderPointsAvailable() {
        InspireOrder io = getInspireOrder();
        if (io == null) return 0;
        Employee emp = io.getEmployee();
        if (emp == null) return 0;
    
        double d = emp.getInspirePointsBalance();
        
        if (!emp.getInspireOrders().contains(io)) {
            d -= io.getPointsUsed();
        }
        if (io.getAwardCardOrders().contains(this)) {
            d += getPointsUsed();
        }
        return d;
    }
     
    @OAOne(
        reverseName = Card.P_AwardCardOrders, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CardId"})
    public Card getCard() {
        if (card == null) {
            card = (Card) getObject(P_Card);
        }
        return card;
    }
    
    public void setCard(Card newValue) {
        fireBeforePropertyChange(P_Card, this.card, newValue);
        Card old = this.card;
        this.card = newValue;
        firePropertyChange(P_Card, old, this.card);
    }
    
    @OAOne(
        displayName = "Cashstar Order", 
        reverseName = CashstarOrder.P_AwardCardOrder
    )
    public CashstarOrder getCashstarOrder() {
        if (cashstarOrder == null) {
            cashstarOrder = (CashstarOrder) getObject(P_CashstarOrder);
        }
        return cashstarOrder;
    }
    
    public void setCashstarOrder(CashstarOrder newValue) {
        fireBeforePropertyChange(P_CashstarOrder, this.cashstarOrder, newValue);
        CashstarOrder old = this.cashstarOrder;
        this.cashstarOrder = newValue;
        firePropertyChange(P_CashstarOrder, old, this.cashstarOrder);
    }
    
    @OAOne(
        displayName = "Employee Award", 
        reverseName = EmployeeAward.P_AwardCardOrders, 
        required = true
    )
    @OAFkey(columns = {"EmployeeAwardId"})
    public EmployeeAward getEmployeeAward() {
        if (employeeAward == null) {
            employeeAward = (EmployeeAward) getObject(P_EmployeeAward);
        }
        return employeeAward;
    }
    
    public void setEmployeeAward(EmployeeAward newValue) {
        fireBeforePropertyChange(P_EmployeeAward, this.employeeAward, newValue);
        EmployeeAward old = this.employeeAward;
        this.employeeAward = newValue;
        firePropertyChange(P_EmployeeAward, old, this.employeeAward);
    }
    
    @OAOne(
        displayName = "Inspire Order", 
        reverseName = InspireOrder.P_AwardCardOrders, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspireOrderId"})
    public InspireOrder getInspireOrder() {
        if (inspireOrder == null) {
            inspireOrder = (InspireOrder) getObject(PROPERTY_InspireOrder);
        }
        return inspireOrder;
    }
    public void setInspireOrder(InspireOrder newValue) {
        setInspireOrder(newValue, true);
    }
    public void setInspireOrderTemp(InspireOrder newValue) {
        setInspireOrder(newValue, false);
    }
    public void setInspireOrder(InspireOrder newValue, boolean bFirePropChange) {
        InspireOrder old = this.inspireOrder;
        if (bFirePropChange) fireBeforePropertyChange(PROPERTY_InspireOrder, old, newValue);
        this.inspireOrder = newValue;
        if (bFirePropChange) firePropertyChange(PROPERTY_InspireOrder, old, this.inspireOrder);
        else OAObjectPropertyDelegate.setProperty(this, PROPERTY_InspireOrder, this.inspireOrder);
    }
    @OAMany(
        displayName = "Inspire Values", 
        toClass = Value.class, 
        isCalculated = true, 
        reverseName = Value.P_InspireAwardCardOrder
    )
    public Hub<Value> getInspireValues() {
        if (hubInspireValues != null) return hubInspireValues;
        hubInspireValues = (Hub<Value>) getHub(PROPERTY_InspireValues);
        hubInspireValues.sort(Value.PROPERTY_Value);
        if (!isServer()) return hubInspireValues;
            
        Hub<AwardCardOrder> h = new Hub<AwardCardOrder>(AwardCardOrder.class);
        h.add(this);
        h.setPos(0);
        
        DetailHub dh = new DetailHub(h, OAString.cpp(PROPERTY_Card, Card.PROPERTY_Values));
        HubFilter hf = new HubFilter(dh , hubInspireValues, true) {
            public boolean isUsed(Object object) {
                Value v = (Value) object;
                InspireOrder io = getInspireOrder();
                if (io == null) return false;
                Employee emp = io.getEmployee();
                if (emp == null) return false;
                double d = 0;//EmployeeDelegate.getPointValueForCard(emp, v.getValue());
                double d2 = getInspireOrderPointsAvailable();
                return OAConv.compare(d, d2, 2) <= 0;
            }
        };
        hf.addDependentProperty(h, OAString.cpp(PROPERTY_InspireOrder, InspireOrder.PROPERTY_PointsUsed));
        return hubInspireValues;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.value = (double) rs.getDouble(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardCardOrder.P_Value, true);
        }
        date = rs.getDate(4);
        if (date != null) this.sentDate = new OADate(date);
        this.shippingInfo = rs.getString(5);
        this.cardType = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardCardOrder.P_CardType, true);
        }
        date = rs.getDate(7);
        if (date != null) this.lastStatusDate = new OADate(date);
        this.lastStatus = rs.getString(8);
        date = rs.getDate(9);
        if (date != null) this.completedDate = new OADate(date);
        this.pointsUsed = (double) rs.getDouble(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardCardOrder.P_PointsUsed, true);
        }
        this.invoiceNumber = rs.getString(11);
        date = rs.getDate(12);
        if (date != null) this.invoiceDate = new OADate(date);
        this.vendorInvoiced = rs.getBoolean(13);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardCardOrder.P_VendorInvoiced, true);
        }
        int cardFkey = rs.getInt(14);
        if (!rs.wasNull() && cardFkey > 0) {
            setProperty(P_Card, new OAObjectKey(cardFkey));
        }
        int employeeAwardFkey = rs.getInt(15);
        if (!rs.wasNull() && employeeAwardFkey > 0) {
            setProperty(P_EmployeeAward, new OAObjectKey(employeeAwardFkey));
        }
        int inspireOrderFkey = rs.getInt(16);
        if (!rs.wasNull() && inspireOrderFkey > 0) {
            setProperty(P_InspireOrder, new OAObjectKey(inspireOrderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 16) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

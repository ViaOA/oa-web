// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "at",
    displayName = "Award Type",
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[Company]."+Company.P_Programs+"."+Program.P_AwardTypes, 
        "[Company]."+Company.P_Programs+"."+Program.P_Locations+"."+Location.P_AwardTypes
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "AwardTypeLocation", columns = { @OAIndexColumn(name = "LocationId") }), 
        @OAIndex(name = "AwardTypeProgram", columns = { @OAIndexColumn(name = "ProgramId") })
    }
)
public class AwardType extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Descripton = "Descripton";
    public static final String P_Descripton = "Descripton";
    public static final String PROPERTY_UsesGiftCards = "UsesGiftCards";
    public static final String P_UsesGiftCards = "UsesGiftCards";
    public static final String PROPERTY_Value = "Value";
    public static final String P_Value = "Value";
    public static final String PROPERTY_UsesItems = "UsesItems";
    public static final String P_UsesItems = "UsesItems";
    public static final String PROPERTY_UseHifiveApprovedItems = "UseHifiveApprovedItems";
    public static final String P_UseHifiveApprovedItems = "UseHifiveApprovedItems";
    public static final String PROPERTY_MinimumItemPrice = "MinimumItemPrice";
    public static final String P_MinimumItemPrice = "MinimumItemPrice";
    public static final String PROPERTY_MaximumItemPrice = "MaximumItemPrice";
    public static final String P_MaximumItemPrice = "MaximumItemPrice";
    public static final String PROPERTY_ServiceAward = "ServiceAward";
    public static final String P_ServiceAward = "ServiceAward";
    public static final String PROPERTY_YearsService = "YearsService";
    public static final String P_YearsService = "YearsService";
    public static final String PROPERTY_BillCardPrice = "BillCardPrice";
    public static final String P_BillCardPrice = "BillCardPrice";
    public static final String PROPERTY_BillOnItemPrice = "BillOnItemPrice";
    public static final String P_BillOnItemPrice = "BillOnItemPrice";
    public static final String PROPERTY_BillItemPrice = "BillItemPrice";
    public static final String P_BillItemPrice = "BillItemPrice";
    public static final String PROPERTY_UsesHelpingHands = "UsesHelpingHands";
    public static final String P_UsesHelpingHands = "UsesHelpingHands";
    public static final String PROPERTY_UsesCash = "UsesCash";
    public static final String P_UsesCash = "UsesCash";
    public static final String PROPERTY_UsesInternationalVisa = "UsesInternationalVisa";
    public static final String P_UsesInternationalVisa = "UsesInternationalVisa";
    public static final String PROPERTY_UsesCharity = "UsesCharity";
    public static final String P_UsesCharity = "UsesCharity";
    public static final String PROPERTY_UsesImagineCard = "UsesImagineCard";
    public static final String P_UsesImagineCard = "UsesImagineCard";
    public static final String PROPERTY_PackageName = "PackageName";
    public static final String P_PackageName = "PackageName";
    public static final String PROPERTY_PackageInstruction = "PackageInstruction";
    public static final String P_PackageInstruction = "PackageInstruction";
    public static final String PROPERTY_PackageBillPrice = "PackageBillPrice";
    public static final String P_PackageBillPrice = "PackageBillPrice";
    public static final String PROPERTY_AwardBillCost = "AwardBillCost";
    public static final String P_AwardBillCost = "AwardBillCost";
    public static final String PROPERTY_CashBillPrice = "CashBillPrice";
    public static final String P_CashBillPrice = "CashBillPrice";
    public static final String PROPERTY_ImagineBillPrice = "ImagineBillPrice";
    public static final String P_ImagineBillPrice = "ImagineBillPrice";
    public static final String PROPERTY_InternationalVisaBillPrice = "InternationalVisaBillPrice";
    public static final String P_InternationalVisaBillPrice = "InternationalVisaBillPrice";
     
    public static final String PROPERTY_HierarchyChanged = "HierarchyChanged";
    public static final String P_HierarchyChanged = "HierarchyChanged";
     
    public static final String PROPERTY_AddOnItems = "AddOnItems";
    public static final String P_AddOnItems = "AddOnItems";
    public static final String PROPERTY_AnnouncementDocument = "AnnouncementDocument";
    public static final String P_AnnouncementDocument = "AnnouncementDocument";
    public static final String PROPERTY_AvailableCards = "AvailableCards";
    public static final String P_AvailableCards = "AvailableCards";
    public static final String PROPERTY_AvailableCharities = "AvailableCharities";
    public static final String P_AvailableCharities = "AvailableCharities";
    public static final String PROPERTY_AvailableHelpingHandItems = "AvailableHelpingHandItems";
    public static final String P_AvailableHelpingHandItems = "AvailableHelpingHandItems";
    public static final String PROPERTY_AvailableItems = "AvailableItems";
    public static final String P_AvailableItems = "AvailableItems";
    public static final String PROPERTY_CalcAnnouncementDocument = "CalcAnnouncementDocument";
    public static final String P_CalcAnnouncementDocument = "CalcAnnouncementDocument";
    public static final String PROPERTY_CalcCeoImageStore = "CalcCeoImageStore";
    public static final String P_CalcCeoImageStore = "CalcCeoImageStore";
    public static final String PROPERTY_CalcCeoSignatureImageStore = "CalcCeoSignatureImageStore";
    public static final String P_CalcCeoSignatureImageStore = "CalcCeoSignatureImageStore";
    public static final String PROPERTY_CalcImagineCard = "CalcImagineCard";
    public static final String P_CalcImagineCard = "CalcImagineCard";
    public static final String PROPERTY_CeoImageStore = "CeoImageStore";
    public static final String P_CeoImageStore = "CeoImageStore";
    public static final String PROPERTY_CeoSignatureImageStore = "CeoSignatureImageStore";
    public static final String P_CeoSignatureImageStore = "CeoSignatureImageStore";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_EmployeeAwards = "EmployeeAwards";
    public static final String P_EmployeeAwards = "EmployeeAwards";
    public static final String PROPERTY_ExcludeItems = "ExcludeItems";
    public static final String P_ExcludeItems = "ExcludeItems";
    public static final String PROPERTY_ImagineCard = "ImagineCard";
    public static final String P_ImagineCard = "ImagineCard";
    public static final String PROPERTY_IncludeItems = "IncludeItems";
    public static final String P_IncludeItems = "IncludeItems";
    public static final String PROPERTY_InspireEmployees = "InspireEmployees";
    public static final String P_InspireEmployees = "InspireEmployees";
    public static final String PROPERTY_InspireLocation = "InspireLocation";
    public static final String P_InspireLocation = "InspireLocation";
    public static final String PROPERTY_InspireProgram = "InspireProgram";
    public static final String P_InspireProgram = "InspireProgram";
    public static final String PROPERTY_ItemTypes = "ItemTypes";
    public static final String P_ItemTypes = "ItemTypes";
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_PackageProducts = "PackageProducts";
    public static final String P_PackageProducts = "PackageProducts";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
    public static final String PROPERTY_Section = "Section";
    public static final String P_Section = "Section";
     
    protected int id;
    protected String name;
    protected String descripton;
    protected boolean usesGiftCards;
    protected double value;
    protected boolean usesItems;
    protected boolean useHifiveApprovedItems;
    protected double minimumItemPrice;
    protected double maximumItemPrice;
    protected boolean serviceAward;
    protected int yearsService;
    protected double billCardPrice;
    protected boolean billOnItemPrice;
    protected double billItemPrice;
    protected boolean usesHelpingHands;
    protected boolean usesCash;
    protected boolean usesInternationalVisa;
    protected boolean usesCharity;
    protected boolean usesImagineCard;
    protected String packageName;
    protected String packageInstruction;
    protected double packageBillPrice;
    protected double awardBillCost;
    protected double cashBillPrice;
    protected double imagineBillPrice;
    protected double internationalVisaBillPrice;
     
    // Links to other objects.
    protected transient Hub<AddOnItem> hubAddOnItems;
    protected transient ProgramDocument announcementDocument;
    protected transient Hub<Card> hubAvailableCards;
    protected transient Hub<Charity> hubAvailableCharities;
    protected transient Hub<Item> hubAvailableHelpingHandItems;
    protected transient Hub<Item> hubAvailableItems;
    protected transient ProgramDocument calcAnnouncementDocument;
    protected transient ImageStore calcCeoImageStore;
    protected transient ImageStore calcCeoSignatureImageStore;
    protected transient Card calcImagineCard;
    protected transient ImageStore ceoImageStore;
    protected transient ImageStore ceoSignatureImageStore;
    protected transient Hub<Item> hubExcludeItems;
    protected transient Card imagineCard;
    protected transient Hub<Item> hubIncludeItems;
    protected transient Location inspireLocation;
    protected transient Program inspireProgram;
    protected transient Hub<ItemType> hubItemTypes;
    protected transient Location location;
    protected transient Hub<Product> hubPackageProducts;
    protected transient Program program;
    protected transient Section section;
     
    public AwardType() {
    }
     
    public AwardType(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 75, displayLength = 25)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 254, displayLength = 25)
    @OAColumn(maxLength = 254)
    public String getDescripton() {
        return descripton;
    }
    
    public void setDescripton(String newValue) {
        fireBeforePropertyChange(P_Descripton, this.descripton, newValue);
        String old = descripton;
        this.descripton = newValue;
        firePropertyChange(P_Descripton, old, this.descripton);
    }
    @OAProperty(displayName = "Uses Gift Cards", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesGiftCards() {
        return usesGiftCards;
    }
    
    public void setUsesGiftCards(boolean newValue) {
        fireBeforePropertyChange(P_UsesGiftCards, this.usesGiftCards, newValue);
        boolean old = usesGiftCards;
        this.usesGiftCards = newValue;
        firePropertyChange(P_UsesGiftCards, old, this.usesGiftCards);
    }
    @OAProperty(description = "value of card", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    /**
      value of card
    */
    public double getValue() {
        return value;
    }
    
    public void setValue(double newValue) {
        fireBeforePropertyChange(P_Value, this.value, newValue);
        double old = value;
        this.value = newValue;
        firePropertyChange(P_Value, old, this.value);
    }
    @OAProperty(displayName = "Uses Items", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesItems() {
        return usesItems;
    }
    
    public void setUsesItems(boolean newValue) {
        fireBeforePropertyChange(P_UsesItems, this.usesItems, newValue);
        boolean old = usesItems;
        this.usesItems = newValue;
        firePropertyChange(P_UsesItems, old, this.usesItems);
    }
    @OAProperty(displayName = "Use Hifive Approved Items", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUseHifiveApprovedItems() {
        return useHifiveApprovedItems;
    }
    
    public void setUseHifiveApprovedItems(boolean newValue) {
        fireBeforePropertyChange(P_UseHifiveApprovedItems, this.useHifiveApprovedItems, newValue);
        boolean old = useHifiveApprovedItems;
        this.useHifiveApprovedItems = newValue;
        firePropertyChange(P_UseHifiveApprovedItems, old, this.useHifiveApprovedItems);
    }
    @OAProperty(displayName = "Minimum Item Price", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getMinimumItemPrice() {
        return minimumItemPrice;
    }
    
    public void setMinimumItemPrice(double newValue) {
        fireBeforePropertyChange(P_MinimumItemPrice, this.minimumItemPrice, newValue);
        double old = minimumItemPrice;
        this.minimumItemPrice = newValue;
        firePropertyChange(P_MinimumItemPrice, old, this.minimumItemPrice);
    }
    @OAProperty(displayName = "Maximum Item Price", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getMaximumItemPrice() {
        return maximumItemPrice;
    }
    
    public void setMaximumItemPrice(double newValue) {
        fireBeforePropertyChange(P_MaximumItemPrice, this.maximumItemPrice, newValue);
        double old = maximumItemPrice;
        this.maximumItemPrice = newValue;
        firePropertyChange(P_MaximumItemPrice, old, this.maximumItemPrice);
    }
    @OAProperty(displayName = "Service Award", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getServiceAward() {
        return serviceAward;
    }
    
    public void setServiceAward(boolean newValue) {
        fireBeforePropertyChange(P_ServiceAward, this.serviceAward, newValue);
        boolean old = serviceAward;
        this.serviceAward = newValue;
        firePropertyChange(P_ServiceAward, old, this.serviceAward);
    }
    @OAProperty(displayName = "Years Service", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getYearsService() {
        return yearsService;
    }
    
    public void setYearsService(int newValue) {
        fireBeforePropertyChange(P_YearsService, this.yearsService, newValue);
        int old = yearsService;
        this.yearsService = newValue;
        firePropertyChange(P_YearsService, old, this.yearsService);
    }
    @OAProperty(displayName = "Bill Card Price", description = "price to bill for cards", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    /**
      price to bill for cards
    */
    public double getBillCardPrice() {
        return billCardPrice;
    }
    
    public void setBillCardPrice(double newValue) {
        fireBeforePropertyChange(P_BillCardPrice, this.billCardPrice, newValue);
        double old = billCardPrice;
        this.billCardPrice = newValue;
        firePropertyChange(P_BillCardPrice, old, this.billCardPrice);
    }
    @OAProperty(displayName = "Bill On Item Price", description = "award item will be billed based on price of item", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      award item will be billed based on price of item
    */
    public boolean getBillOnItemPrice() {
        return billOnItemPrice;
    }
    
    public void setBillOnItemPrice(boolean newValue) {
        fireBeforePropertyChange(P_BillOnItemPrice, this.billOnItemPrice, newValue);
        boolean old = billOnItemPrice;
        this.billOnItemPrice = newValue;
        firePropertyChange(P_BillOnItemPrice, old, this.billOnItemPrice);
    }
    @OAProperty(displayName = "Bill Item Price", description = "price to bill for any item selected", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    /**
      price to bill for any item selected
    */
    public double getBillItemPrice() {
        return billItemPrice;
    }
    
    public void setBillItemPrice(double newValue) {
        fireBeforePropertyChange(P_BillItemPrice, this.billItemPrice, newValue);
        double old = billItemPrice;
        this.billItemPrice = newValue;
        firePropertyChange(P_BillItemPrice, old, this.billItemPrice);
    }
    @OAProperty(displayName = "Uses Helping Hands", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesHelpingHands() {
        return usesHelpingHands;
    }
    
    public void setUsesHelpingHands(boolean newValue) {
        fireBeforePropertyChange(P_UsesHelpingHands, this.usesHelpingHands, newValue);
        boolean old = usesHelpingHands;
        this.usesHelpingHands = newValue;
        firePropertyChange(P_UsesHelpingHands, old, this.usesHelpingHands);
    }
    @OAProperty(displayName = "Uses Cash", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesCash() {
        return usesCash;
    }
    
    public void setUsesCash(boolean newValue) {
        fireBeforePropertyChange(P_UsesCash, this.usesCash, newValue);
        boolean old = usesCash;
        this.usesCash = newValue;
        firePropertyChange(P_UsesCash, old, this.usesCash);
    }
    @OAProperty(displayName = "Uses International Visa", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesInternationalVisa() {
        return usesInternationalVisa;
    }
    
    public void setUsesInternationalVisa(boolean newValue) {
        fireBeforePropertyChange(P_UsesInternationalVisa, this.usesInternationalVisa, newValue);
        boolean old = usesInternationalVisa;
        this.usesInternationalVisa = newValue;
        firePropertyChange(P_UsesInternationalVisa, old, this.usesInternationalVisa);
    }
    @OAProperty(displayName = "Uses Charity", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesCharity() {
        return usesCharity;
    }
    
    public void setUsesCharity(boolean newValue) {
        fireBeforePropertyChange(P_UsesCharity, this.usesCharity, newValue);
        boolean old = usesCharity;
        this.usesCharity = newValue;
        firePropertyChange(P_UsesCharity, old, this.usesCharity);
    }
    @OAProperty(displayName = "Uses Imagine Card", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesImagineCard() {
        return usesImagineCard;
    }
    
    public void setUsesImagineCard(boolean newValue) {
        fireBeforePropertyChange(P_UsesImagineCard, this.usesImagineCard, newValue);
        boolean old = usesImagineCard;
        this.usesImagineCard = newValue;
        firePropertyChange(P_UsesImagineCard, old, this.usesImagineCard);
    }
    @OAProperty(displayName = "Package Name", maxLength = 35, displayLength = 22, columnLength = 14)
    @OAColumn(maxLength = 35)
    public String getPackageName() {
        return packageName;
    }
    
    public void setPackageName(String newValue) {
        fireBeforePropertyChange(P_PackageName, this.packageName, newValue);
        String old = packageName;
        this.packageName = newValue;
        firePropertyChange(P_PackageName, old, this.packageName);
    }
    @OAProperty(displayName = "Package Instruction", maxLength = 18, displayLength = 18)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getPackageInstruction() {
        return packageInstruction;
    }
    
    public void setPackageInstruction(String newValue) {
        fireBeforePropertyChange(P_PackageInstruction, this.packageInstruction, newValue);
        String old = packageInstruction;
        this.packageInstruction = newValue;
        firePropertyChange(P_PackageInstruction, old, this.packageInstruction);
    }
    @OAProperty(displayName = "Package Bill Price", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPackageBillPrice() {
        return packageBillPrice;
    }
    
    public void setPackageBillPrice(double newValue) {
        fireBeforePropertyChange(P_PackageBillPrice, this.packageBillPrice, newValue);
        double old = packageBillPrice;
        this.packageBillPrice = newValue;
        firePropertyChange(P_PackageBillPrice, old, this.packageBillPrice);
    }
    @OAProperty(displayName = "Award Bill Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getAwardBillCost() {
        return awardBillCost;
    }
    
    public void setAwardBillCost(double newValue) {
        fireBeforePropertyChange(P_AwardBillCost, this.awardBillCost, newValue);
        double old = awardBillCost;
        this.awardBillCost = newValue;
        firePropertyChange(P_AwardBillCost, old, this.awardBillCost);
    }
    @OAProperty(displayName = "Cash Bill Price", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCashBillPrice() {
        return cashBillPrice;
    }
    
    public void setCashBillPrice(double newValue) {
        fireBeforePropertyChange(P_CashBillPrice, this.cashBillPrice, newValue);
        double old = cashBillPrice;
        this.cashBillPrice = newValue;
        firePropertyChange(P_CashBillPrice, old, this.cashBillPrice);
    }
    @OAProperty(displayName = "Imagine Bill Price", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getImagineBillPrice() {
        return imagineBillPrice;
    }
    
    public void setImagineBillPrice(double newValue) {
        fireBeforePropertyChange(P_ImagineBillPrice, this.imagineBillPrice, newValue);
        double old = imagineBillPrice;
        this.imagineBillPrice = newValue;
        firePropertyChange(P_ImagineBillPrice, old, this.imagineBillPrice);
    }
    @OAProperty(displayName = "International Visa Bill Price", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getInternationalVisaBillPrice() {
        return internationalVisaBillPrice;
    }
    
    public void setInternationalVisaBillPrice(double newValue) {
        fireBeforePropertyChange(P_InternationalVisaBillPrice, this.internationalVisaBillPrice, newValue);
        double old = internationalVisaBillPrice;
        this.internationalVisaBillPrice = newValue;
        firePropertyChange(P_InternationalVisaBillPrice, old, this.internationalVisaBillPrice);
    }
    @OACalculatedProperty(displayName = "Hierarchy Changed", displayLength = 5, properties = {P_Location+"."+Location.P_AnnouncementDocument, P_AnnouncementDocument, P_Program+"."+Program.P_AnnouncementDocument, P_UsesGiftCards, P_UsesItems, P_UsesHelpingHands, P_UsesCharity, P_CeoImageStore, P_CeoSignatureImageStore, P_Location+"."+Location.P_CeoImageStore, P_Location+"."+Location.P_CeoSignatureImageStore, P_Program+"."+Program.P_CeoImageStore, P_Program+"."+Program.P_CeoSignatureImageStore, P_Program+"."+Program.P_Cards, P_Program+"."+Program.P_Charities, P_Location+"."+Location.P_Cards, P_Location+"."+Location.P_Charities})
    public boolean getHierarchyChanged() {
        // no-op
        return true;
    }
    
     
    @OAMany(
        displayName = "Add On Items", 
        toClass = AddOnItem.class, 
        reverseName = AddOnItem.P_AwardType
    )
    @OALinkTable(name = "AddOnItemAwardType", indexName = "AddOnItemAwardType", columns = {"AwardTypeId"})
    public Hub<AddOnItem> getAddOnItems() {
        if (hubAddOnItems == null) {
            hubAddOnItems = (Hub<AddOnItem>) getHub(P_AddOnItems);
        }
        return hubAddOnItems;
    }
    
    @OAOne(
        displayName = "CEO Letter", 
        reverseName = ProgramDocument.P_AwardTypes, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"AnnouncementDocumentId"})
    public ProgramDocument getAnnouncementDocument() {
        if (announcementDocument == null) {
            announcementDocument = (ProgramDocument) getObject(P_AnnouncementDocument);
        }
        return announcementDocument;
    }
    
    public void setAnnouncementDocument(ProgramDocument newValue) {
        fireBeforePropertyChange(P_AnnouncementDocument, this.announcementDocument, newValue);
        ProgramDocument old = this.announcementDocument;
        this.announcementDocument = newValue;
        firePropertyChange(P_AnnouncementDocument, old, this.announcementDocument);
    }
    
    @OAMany(
        displayName = "Available Cards", 
        toClass = Card.class, 
        isCalculated = true, 
        reverseName = Card.P_AwardType
    )
    public Hub<Card> getAvailableCards() {
        if (hubAvailableCards == null) {
            hubAvailableCards = (Hub<Card>) getHub(PROPERTY_AvailableCards);
            setupHierarchyListener();
        }
        return hubAvailableCards;
    }
    @OAMany(
        displayName = "Available Charities", 
        toClass = Charity.class, 
        isCalculated = true, 
        reverseName = Charity.P_AwardType
    )
    public Hub<Charity> getAvailableCharities() {
        if (hubAvailableCharities == null) {
            hubAvailableCharities = (Hub<Charity>) getHub(PROPERTY_AvailableCharities);
            setupHierarchyListener();
        }
        return hubAvailableCharities;
    }
    @OAMany(
        displayName = "Available Helping Hand Items", 
        toClass = Item.class, 
        isCalculated = true, 
        reverseName = Item.P_HelpingHandAwardType
    )
    public Hub<Item> getAvailableHelpingHandItems() {
        if (hubAvailableHelpingHandItems == null) {
            hubAvailableHelpingHandItems = (Hub<Item>) getHub(PROPERTY_AvailableHelpingHandItems);
            HubFilter hf = new HubFilter(getAvailableItems(), hubAvailableHelpingHandItems, Item.PROPERTY_ItemTypes) {
                @Override
                public boolean isUsed(Object object) {
                    Item item = (Item) object;
                    for (ItemType it : item.getItemTypes()) {
                        if (it.getType() == ItemType.TYPE_HELPINGHANDS) return true;
                    }
                    return false;
                }
            };
            // hf.addDependentProperty(Item.PROPERTY_ItemTypes);
        }
        return hubAvailableHelpingHandItems;
    }
    @OAMany(
        displayName = "Available Items", 
        toClass = Item.class, 
        isCalculated = true, 
        reverseName = Item.P_AvailableAwardTypes
    )
    public Hub<Item> getAvailableItems() {
        if (hubAvailableItems == null) {
            hubAvailableItems = (Hub<Item>) getHub(PROPERTY_AvailableItems);
            if (filterAwardTypeAvailableItem == null) {
                boolean b = false;
                synchronized (this) {
                    if (filterAwardTypeAvailableItem == null) {
                        b = true;
                        filterAwardTypeAvailableItem = new AwardTypeAvailableItemFilter(); // this will keep list updated realtime
                    }
                }
                if (b) {
                    filterAwardTypeAvailableItem.setAwardType(this);
                }
            }
        }
        return hubAvailableItems;
    }
    @OAOne(
        displayName = "Calc CEO Letter", 
        isCalculated = true, 
        reverseName = ProgramDocument.P_AwardType, 
        allowAddExisting = false
    )
    public ProgramDocument getCalcAnnouncementDocument() {
        if (calcAnnouncementDocument == null) {
            calcAnnouncementDocument = (ProgramDocument) getObject(PROPERTY_CalcAnnouncementDocument);
            setupHierarchyListener();
        }
        return calcAnnouncementDocument;
    }
    public void setCalcAnnouncementDocument(ProgramDocument newValue) {
        ProgramDocument old = this.calcAnnouncementDocument;
        fireBeforePropertyChange(PROPERTY_CalcAnnouncementDocument, old, newValue);
        this.calcAnnouncementDocument = newValue;
        firePropertyChange(PROPERTY_CalcAnnouncementDocument, old, this.calcAnnouncementDocument);
    }
    @OAOne(
        displayName = "Calc CEO Image", 
        isCalculated = true, 
        owner = true, 
        reverseName = ImageStore.P_CalcCeoAwardType, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    public ImageStore getCalcCeoImageStore() {
        if (calcCeoImageStore == null) {
            calcCeoImageStore = (ImageStore) getObject(PROPERTY_CalcCeoImageStore);
            setupHierarchyListener();
        }
        return calcCeoImageStore;
    }
    public void setCalcCeoImageStore(ImageStore newValue) {
        ImageStore old = this.calcCeoImageStore;
        fireBeforePropertyChange(PROPERTY_CalcCeoImageStore, old, newValue);
        this.calcCeoImageStore = newValue;
        firePropertyChange(PROPERTY_CalcCeoImageStore, old, this.calcCeoImageStore);
    }
    @OAOne(
        displayName = "Calc CEO Signature", 
        isCalculated = true, 
        owner = true, 
        reverseName = ImageStore.P_CalcCeoSignatureAwardType, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    public ImageStore getCalcCeoSignatureImageStore() {
        if (calcCeoSignatureImageStore == null) {
            calcCeoSignatureImageStore = (ImageStore) getObject(PROPERTY_CalcCeoSignatureImageStore);
            setupHierarchyListener();
        }
        return calcCeoSignatureImageStore;
    }
    
    public void setCalcCeoSignatureImageStore(ImageStore newValue) {
        ImageStore old = this.calcCeoSignatureImageStore;
        fireBeforePropertyChange(PROPERTY_CalcCeoSignatureImageStore, old, newValue);
        this.calcCeoSignatureImageStore = newValue;
        firePropertyChange(PROPERTY_CalcCeoSignatureImageStore, old, this.calcCeoSignatureImageStore);
    }
    
    @OAOne(
        displayName = "Calc Imagine Card", 
        isCalculated = true, 
        reverseName = Card.P_CalcAwardTypes
    )
    public Card getCalcImagineCard() {
        return null;//AwardTypeDelegate.getCalcImagineCard(this);
    }
    @OAOne(
        displayName = "CEO Image", 
        owner = true, 
        reverseName = ImageStore.P_AwardType, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"CeoImageStoreId"})
    public ImageStore getCeoImageStore() {
        if (ceoImageStore == null) {
            ceoImageStore = (ImageStore) getObject(P_CeoImageStore);
        }
        return ceoImageStore;
    }
    
    public void setCeoImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_CeoImageStore, this.ceoImageStore, newValue);
        ImageStore old = this.ceoImageStore;
        this.ceoImageStore = newValue;
        firePropertyChange(P_CeoImageStore, old, this.ceoImageStore);
    }
    
    @OAOne(
        displayName = "CEO Signature", 
        reverseName = ImageStore.P_AwardTypes, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"CeoSignatureImageStoreId"})
    public ImageStore getCeoSignatureImageStore() {
        if (ceoSignatureImageStore == null) {
            ceoSignatureImageStore = (ImageStore) getObject(P_CeoSignatureImageStore);
        }
        return ceoSignatureImageStore;
    }
    
    public void setCeoSignatureImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_CeoSignatureImageStore, this.ceoSignatureImageStore, newValue);
        ImageStore old = this.ceoSignatureImageStore;
        this.ceoSignatureImageStore = newValue;
        firePropertyChange(P_CeoSignatureImageStore, old, this.ceoSignatureImageStore);
    }
    
    @OAOne(
        isCalculated = true, 
        reverseName = Employee.P_CalcAwardTypes, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Employee getEmployee() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Employee Awards", 
        toClass = EmployeeAward.class, 
        reverseName = EmployeeAward.P_AwardType, 
        createMethod = false
    )
    private Hub<EmployeeAward> getEmployeeAwards() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Exclude Items", 
        toClass = Item.class, 
        reverseName = Item.P_ExcludeAwardTypes
    )
    @OALinkTable(name = "AwardTypeExcludeItem", indexName = "ItemExcludeAwardType", columns = {"AwardTypeId"})
    public Hub<Item> getExcludeItems() {
        if (hubExcludeItems == null) {
            hubExcludeItems = (Hub<Item>) getHub(P_ExcludeItems);
        }
        return hubExcludeItems;
    }
    
    @OAOne(
        displayName = "Imagine Card", 
        reverseName = Card.P_ImagineAwardTypes, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ImagineCardId"})
    public Card getImagineCard() {
        if (imagineCard == null) {
            imagineCard = (Card) getObject(P_ImagineCard);
        }
        return imagineCard;
    }
    
    public void setImagineCard(Card newValue) {
        fireBeforePropertyChange(P_ImagineCard, this.imagineCard, newValue);
        Card old = this.imagineCard;
        this.imagineCard = newValue;
        firePropertyChange(P_ImagineCard, old, this.imagineCard);
    }
    
    @OAMany(
        displayName = "Include Items", 
        toClass = Item.class, 
        reverseName = Item.P_IncludeAwardTypes
    )
    @OALinkTable(name = "AwardTypeIncludeItem", indexName = "ItemIncludeAwardType", columns = {"AwardTypeId"})
    public Hub<Item> getIncludeItems() {
        if (hubIncludeItems == null) {
            hubIncludeItems = (Hub<Item>) getHub(P_IncludeItems);
        }
        return hubIncludeItems;
    }
    
    @OAMany(
        displayName = "Inspire Employees", 
        toClass = Employee.class, 
        recursive = false, 
        isCalculated = true, 
        reverseName = Employee.P_InspireAwardType, 
        createMethod = false
    )
    private Hub<Employee> getInspireEmployees() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Inspire Location", 
        reverseName = Location.P_InspireAwardType, 
        required = true, 
        allowCreateNew = false
    )
    public Location getInspireLocation() {
        if (inspireLocation == null) {
            inspireLocation = (Location) getObject(P_InspireLocation);
        }
        return inspireLocation;
    }
    
    public void setInspireLocation(Location newValue) {
        fireBeforePropertyChange(P_InspireLocation, this.inspireLocation, newValue);
        Location old = this.inspireLocation;
        this.inspireLocation = newValue;
        firePropertyChange(P_InspireLocation, old, this.inspireLocation);
    }
    
    @OAOne(
        displayName = "Inspire Program", 
        reverseName = Program.P_InspireAwardType, 
        required = true, 
        allowCreateNew = false
    )
    public Program getInspireProgram() {
        if (inspireProgram == null) {
            inspireProgram = (Program) getObject(P_InspireProgram);
        }
        return inspireProgram;
    }
    
    public void setInspireProgram(Program newValue) {
        fireBeforePropertyChange(P_InspireProgram, this.inspireProgram, newValue);
        Program old = this.inspireProgram;
        this.inspireProgram = newValue;
        firePropertyChange(P_InspireProgram, old, this.inspireProgram);
    }
    
    @OAMany(
        displayName = "Item Types", 
        toClass = ItemType.class, 
        reverseName = ItemType.P_AwardTypes
    )
    @OALinkTable(name = "AwardTypeItemType", indexName = "ItemTypeAwardType", columns = {"AwardTypeId"})
    public Hub<ItemType> getItemTypes() {
        if (hubItemTypes == null) {
            hubItemTypes = (Hub<ItemType>) getHub(P_ItemTypes);
        }
        return hubItemTypes;
    }
    
    @OAOne(
        reverseName = Location.P_AwardTypes, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"LocationId"})
    public Location getLocation() {
        if (location == null) {
            location = (Location) getObject(P_Location);
        }
        return location;
    }
    
    public void setLocation(Location newValue) {
        fireBeforePropertyChange(P_Location, this.location, newValue);
        Location old = this.location;
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
    
    @OAMany(
        displayName = "Package Products", 
        toClass = Product.class, 
        reverseName = Product.P_AwardTypes
    )
    @OALinkTable(name = "AwardTypeProduct", indexName = "ProductAwardType", columns = {"AwardTypeId"})
    public Hub<Product> getPackageProducts() {
        if (hubPackageProducts == null) {
            hubPackageProducts = (Hub<Product>) getHub(P_PackageProducts);
        }
        return hubPackageProducts;
    }
    
    @OAOne(
        reverseName = Program.P_AwardTypes, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ProgramId"})
    public Program getProgram() {
        if (program == null) {
            program = (Program) getObject(P_Program);
        }
        return program;
    }
    
    public void setProgram(Program newValue) {
        fireBeforePropertyChange(P_Program, this.program, newValue);
        Program old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    
    @OAOne(
        reverseName = Section.P_AwardTypes, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SectionId"})
    public Section getSection() {
        if (section == null) {
            section = (Section) getObject(P_Section);
        }
        return section;
    }
    
    public void setSection(Section newValue) {
        fireBeforePropertyChange(P_Section, this.section, newValue);
        Section old = this.section;
        this.section = newValue;
        firePropertyChange(P_Section, old, this.section);
    }
    
    // updateHierarchy
    private volatile transient AwardTypeAvailableItemFilter filterAwardTypeAvailableItem;
    private transient Hub<AwardType> hubAwardTypeCalc;
    protected void setupHierarchyListener() {
        if (hubAwardTypeCalc == null) {
            hubAwardTypeCalc = new Hub<AwardType>(AwardType.class);
            hubAwardTypeCalc.add(this);
            hubAwardTypeCalc.setPos(0);
            hubAwardTypeCalc.addHubListener(new HubListenerAdapter() {
                @Override
                public void afterPropertyChange(HubEvent e) {
                    if (PROPERTY_HierarchyChanged.equals(e.getPropertyName())) {
                        updateHierarchy();
                    }
                }
            }, PROPERTY_HierarchyChanged);
        }
        try {
            if (bUpdatingHierarchy) return;
            bUpdatingHierarchy = true;
            updateHierarchy();
        }
        finally {
            bUpdatingHierarchy = false;
        }
    }
    private boolean bUpdatingHierarchy;
    protected void updateHierarchy() {
        if (hubAwardTypeCalc == null) return;
        updateHierarchy2();    
        // set shared (available/calc) hubs
        Location location = this.getLocation();
        if (location == null) location = this.getInspireLocation();
    
        if (location == null) {
            Program p = getProgram();
            if (p == null) p = getInspireProgram();
            if (p != null) {
                if (hubAvailableCards != null) hubAvailableCards.setSharedHub(p.getCards());
                if (hubAvailableCharities != null) hubAvailableCharities.setSharedHub(p.getCharities());
            }
            else {
                if (hubAvailableCards != null) hubAvailableCards.setSharedHub(null);
                if (hubAvailableCharities != null) hubAvailableCharities.setSharedHub(null);
            }
            return;
        }
    
        boolean bUpdateCards = (hubAvailableCards != null);
        boolean bUpdateCharities = (hubAvailableCharities != null);
        // note: items are done separately
        
        for ( ; bUpdateCards || bUpdateCharities; ) {
            if (bUpdateCards) {
                if (location.getCards().getSize() > 0) {
                    Hub h = location.getCards();
                    if (hubAvailableCards.getSharedHub() != h) hubAvailableCards.setSharedHub(h);
                    bUpdateCards = false;
                }
            }
            if (bUpdateCharities) {
                if (location.getCharities().getSize() > 0) {
                    Hub h = location.getCharities();
                    if (hubAvailableCharities.getSharedHub() != h) hubAvailableCharities.setSharedHub(h);
                    bUpdateCharities = false;
                }
            }
            Location ploc = location.getParentLocation();
            if (ploc == null) {
                Program prog = location.getProgram();
                if (prog == null) {
                    prog = getProgram();
                    if (prog == null) prog = getInspireProgram();
                }
                if (prog != null) {
                    if (bUpdateCards) {
                        Hub h = prog.getCards();
                        if (hubAvailableCards.getSharedHub() != h) hubAvailableCards.setSharedHub(h);
                    }
                    if (bUpdateCharities) {
                        Hub h = prog.getCharities();
                        if (hubAvailableCharities.getSharedHub() != h) hubAvailableCharities.setSharedHub(h);
                    }
                }
                else {
                    if (bUpdateCards) hubAvailableCards.setSharedHub(null);
                    if (bUpdateCharities) hubAvailableCharities.setSharedHub(null);
                }
                break;
            }
            location = ploc;
        }
    }    
    protected void updateHierarchy2() {
        ProgramDocument doc = getAnnouncementDocument();
        if (doc != null) {
            setCalcAnnouncementDocument(doc);
            setCalcCeoImageStore(getCeoImageStore());
            setCalcCeoSignatureImageStore(getCeoSignatureImageStore());
            return;
        }
    
        if (updateHierarchy(getLocation())) return;
        
        Program p = this.getProgram();
        if (p == null) {
            Location location = this.getLocation();
            if (location != null) p = location.getProgram();
        }    
        if (p == null) {
            setCalcAnnouncementDocument(null);
            setCalcCeoImageStore(null);
            setCalcCeoSignatureImageStore(null);
            return;
        }
        setCalcAnnouncementDocument(p.getAnnouncementDocument());
        setCalcCeoImageStore(p.getCeoImageStore());
        setCalcCeoSignatureImageStore(p.getCeoSignatureImageStore());
    }
    protected boolean updateHierarchy(Location loc) {
        if (loc == null) return false;
    
        ProgramDocument doc = loc.getAnnouncementDocument();
        if (doc != null) {
            setCalcAnnouncementDocument(doc);
            setCalcCeoImageStore(loc.getCeoImageStore());
            setCalcCeoSignatureImageStore(loc.getCeoSignatureImageStore());
            return true;
        }
        Location ploc = loc.getParentLocation();
        return updateHierarchy(ploc);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.descripton = rs.getString(3);
        this.usesGiftCards = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesGiftCards, true);
        }
        this.value = (double) rs.getDouble(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_Value, true);
        }
        this.usesItems = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesItems, true);
        }
        this.useHifiveApprovedItems = rs.getBoolean(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UseHifiveApprovedItems, true);
        }
        this.minimumItemPrice = (double) rs.getDouble(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_MinimumItemPrice, true);
        }
        this.maximumItemPrice = (double) rs.getDouble(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_MaximumItemPrice, true);
        }
        this.serviceAward = rs.getBoolean(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_ServiceAward, true);
        }
        this.yearsService = (int) rs.getInt(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_YearsService, true);
        }
        this.billCardPrice = (double) rs.getDouble(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_BillCardPrice, true);
        }
        this.billOnItemPrice = rs.getBoolean(13);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_BillOnItemPrice, true);
        }
        this.billItemPrice = (double) rs.getDouble(14);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_BillItemPrice, true);
        }
        this.usesHelpingHands = rs.getBoolean(15);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesHelpingHands, true);
        }
        this.usesCash = rs.getBoolean(16);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesCash, true);
        }
        this.usesInternationalVisa = rs.getBoolean(17);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesInternationalVisa, true);
        }
        this.usesCharity = rs.getBoolean(18);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesCharity, true);
        }
        this.usesImagineCard = rs.getBoolean(19);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_UsesImagineCard, true);
        }
        this.packageName = rs.getString(20);
        this.packageInstruction = rs.getString(21);
        this.packageBillPrice = (double) rs.getDouble(22);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_PackageBillPrice, true);
        }
        this.awardBillCost = (double) rs.getDouble(23);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_AwardBillCost, true);
        }
        this.cashBillPrice = (double) rs.getDouble(24);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_CashBillPrice, true);
        }
        this.imagineBillPrice = (double) rs.getDouble(25);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_ImagineBillPrice, true);
        }
        this.internationalVisaBillPrice = (double) rs.getDouble(26);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AwardType.P_InternationalVisaBillPrice, true);
        }
        int announcementDocumentFkey = rs.getInt(27);
        if (!rs.wasNull() && announcementDocumentFkey > 0) {
            setProperty(P_AnnouncementDocument, new OAObjectKey(announcementDocumentFkey));
        }
        int ceoImageStoreFkey = rs.getInt(28);
        if (!rs.wasNull() && ceoImageStoreFkey > 0) {
            setProperty(P_CeoImageStore, new OAObjectKey(ceoImageStoreFkey));
        }
        int ceoSignatureImageStoreFkey = rs.getInt(29);
        if (!rs.wasNull() && ceoSignatureImageStoreFkey > 0) {
            setProperty(P_CeoSignatureImageStore, new OAObjectKey(ceoSignatureImageStoreFkey));
        }
        int imagineCardFkey = rs.getInt(30);
        if (!rs.wasNull() && imagineCardFkey > 0) {
            setProperty(P_ImagineCard, new OAObjectKey(imagineCardFkey));
        }
        int locationFkey = rs.getInt(31);
        if (!rs.wasNull() && locationFkey > 0) {
            setProperty(P_Location, new OAObjectKey(locationFkey));
        }
        int programFkey = rs.getInt(32);
        if (!rs.wasNull() && programFkey > 0) {
            setProperty(P_Program, new OAObjectKey(programFkey));
        }
        int sectionFkey = rs.getInt(33);
        if (!rs.wasNull() && sectionFkey > 0) {
            setProperty(P_Section, new OAObjectKey(sectionFkey));
        }
        if (rs.getMetaData().getColumnCount() != 33) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

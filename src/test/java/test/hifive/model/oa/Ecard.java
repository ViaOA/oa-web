// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "eca",
    displayName = "Ecard",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[Company]."+Company.P_Programs+"."+Program.P_Ecards, 
        "[EcardCategory]."+EcardCategory.P_Ecards
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "EcardEcardCategory", columns = { @OAIndexColumn(name = "EcardCategoryId") }), 
        @OAIndex(name = "EcardLocation", columns = { @OAIndexColumn(name = "LocationId") })
    }
)
public class Ecard extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Text = "Text";
    public static final String P_Text = "Text";
     
     
    public static final String PROPERTY_EcardCategory = "EcardCategory";
    public static final String P_EcardCategory = "EcardCategory";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_EmployeeEcards = "EmployeeEcards";
    public static final String P_EmployeeEcards = "EmployeeEcards";
    public static final String PROPERTY_ImageStore = "ImageStore";
    public static final String P_ImageStore = "ImageStore";
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_Programs = "Programs";
    public static final String P_Programs = "Programs";
     
    protected int id;
    protected OADate created;
    protected String name;
    protected String text;
     
    // Links to other objects.
    protected transient EcardCategory ecardCategory;
    protected transient ImageStore imageStore;
     
    public Ecard() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Ecard(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 75, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 4, displayLength = 55, columnLength = 40)
    @OAColumn(name = "TextValue", sqlType = java.sql.Types.CLOB)
    public String getText() {
        return text;
    }
    
    public void setText(String newValue) {
        fireBeforePropertyChange(P_Text, this.text, newValue);
        String old = text;
        this.text = newValue;
        firePropertyChange(P_Text, old, this.text);
    }
    @OAOne(
        displayName = "Ecard Category", 
        reverseName = EcardCategory.P_Ecards
    )
    @OAFkey(columns = {"EcardCategoryId"})
    public EcardCategory getEcardCategory() {
        if (ecardCategory == null) {
            ecardCategory = (EcardCategory) getObject(P_EcardCategory);
        }
        return ecardCategory;
    }
    
    public void setEcardCategory(EcardCategory newValue) {
        fireBeforePropertyChange(P_EcardCategory, this.ecardCategory, newValue);
        EcardCategory old = this.ecardCategory;
        this.ecardCategory = newValue;
        firePropertyChange(P_EcardCategory, old, this.ecardCategory);
    }
    
    @OAOne(
        isCalculated = true, 
        reverseName = Employee.P_CalcAvailableEcards, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Employee getEmployee() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Employee Ecards", 
        toClass = EmployeeEcard.class, 
        reverseName = EmployeeEcard.P_Ecard, 
        createMethod = false
    )
    private Hub<EmployeeEcard> getEmployeeEcards() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Image", 
        owner = true, 
        reverseName = ImageStore.P_Ecard, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ImageStoreId"})
    public ImageStore getImageStore() {
        if (imageStore == null) {
            imageStore = (ImageStore) getObject(P_ImageStore);
        }
        return imageStore;
    }
    
    public void setImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_ImageStore, this.imageStore, newValue);
        ImageStore old = this.imageStore;
        this.imageStore = newValue;
        firePropertyChange(P_ImageStore, old, this.imageStore);
    }
    
    @OAOne(
        reverseName = Location.P_Ecards, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OALinkTable(name = "LocationEcard", indexName = "LocationEcard", columns = {"EcardId"})
    private Location getLocation() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        toClass = Program.class, 
        reverseName = Program.P_Ecards, 
        createMethod = false
    )
    @OALinkTable(name = "ProgramEcard", indexName = "ProgramEcard", columns = {"EcardId"})
    private Hub<Program> getPrograms() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.name = rs.getString(3);
        this.text = rs.getString(4);
        int ecardCategoryFkey = rs.getInt(5);
        if (!rs.wasNull() && ecardCategoryFkey > 0) {
            setProperty(P_EcardCategory, new OAObjectKey(ecardCategoryFkey));
        }
        int imageStoreFkey = rs.getInt(6);
        if (!rs.wasNull() && imageStoreFkey > 0) {
            setProperty(P_ImageStore, new OAObjectKey(imageStoreFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

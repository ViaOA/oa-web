// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.object.OAObjectEditQuery.Type;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "emp",
    displayName = "Employee",
    displayProperty = "firstLastName",
    sortProperty = "lastName",
    filterClasses = {EmployeeNextAnniverseriesFilter.class, EmployeeNextBirthdaysFilter.class},
    rootTreePropertyPaths = {
        "[Company]."+Company.P_Programs+"."+Program.P_Locations+"."+Location.P_Employees
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "EmployeeLastName", columns = {@OAIndexColumn(name = "LastName")}),
        @OAIndex(name = "EmployeeEmployeeCode", columns = {@OAIndexColumn(name = "EmployeeCode")}),
        @OAIndex(name = "EmployeeLoginId", columns = {@OAIndexColumn(name = "LoginId")}),
        @OAIndex(name = "EmployeeHRBPartner", columns = { @OAIndexColumn(name = "HRBPartnerId") }), 
        @OAIndex(name = "EmployeeLocation", columns = { @OAIndexColumn(name = "LocationId") }), 
        @OAIndex(name = "EmployeeParentEmployee", columns = { @OAIndexColumn(name = "ParentEmployeeId") }), 
        @OAIndex(name = "EmployeePointsNextApproval", columns = { @OAIndexColumn(name = "PointsNextApprovalId") })
    }
)
@OAEditQuery(enabledProperty = "xxxx", enabledValue = false)
public class Employee extends OAObject {
    
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_EmployeeCode = "EmployeeCode";
    public static final String P_EmployeeCode = "EmployeeCode";
    public static final String PROPERTY_Title = "Title";
    public static final String P_Title = "Title";
    public static final String PROPERTY_PrefixName = "PrefixName";
    public static final String P_PrefixName = "PrefixName";
    public static final String PROPERTY_FirstName = "FirstName";
    public static final String P_FirstName = "FirstName";
    public static final String PROPERTY_MiddleName = "MiddleName";
    public static final String P_MiddleName = "MiddleName";
    public static final String PROPERTY_LastName = "LastName";
    public static final String P_LastName = "LastName";
    public static final String PROPERTY_SuffixName = "SuffixName";
    public static final String P_SuffixName = "SuffixName";
    public static final String PROPERTY_BirthDate = "BirthDate";
    public static final String P_BirthDate = "BirthDate";
    public static final String PROPERTY_HireDate = "HireDate";
    public static final String P_HireDate = "HireDate";
    public static final String PROPERTY_LoginId = "LoginId";
    public static final String P_LoginId = "LoginId";
    public static final String PROPERTY_Password = "Password";
    public static final String P_Password = "Password";
    public static final String PROPERTY_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate = "InactiveDate";
    public static final String PROPERTY_InactiveReason = "InactiveReason";
    public static final String P_InactiveReason = "InactiveReason";
    public static final String PROPERTY_Admin = "Admin";
    public static final String P_Admin = "Admin";
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_Email2 = "Email2";
    public static final String P_Email2 = "Email2";
    public static final String PROPERTY_WorkLocation = "WorkLocation";
    public static final String P_WorkLocation = "WorkLocation";
    public static final String PROPERTY_CostCenter = "CostCenter";
    public static final String P_CostCenter = "CostCenter";
    public static final String PROPERTY_CostCenterDescription = "CostCenterDescription";
    public static final String P_CostCenterDescription = "CostCenterDescription";
    public static final String PROPERTY_PasswordAssignedDate = "PasswordAssignedDate";
    public static final String P_PasswordAssignedDate = "PasswordAssignedDate";
    public static final String PROPERTY_TopLevelManager = "TopLevelManager";
    public static final String P_TopLevelManager = "TopLevelManager";
    public static final String PROPERTY_SuperApprover = "SuperApprover";
    public static final String P_SuperApprover = "SuperApprover";
    public static final String PROPERTY_Division = "Division";
    public static final String P_Division = "Division";
    public static final String PROPERTY_IsNominator = "IsNominator";
    public static final String P_IsNominator = "IsNominator";
    public static final String PROPERTY_CompanyCode = "CompanyCode";
    public static final String P_CompanyCode = "CompanyCode";
    public static final String PROPERTY_CompanyCodeName = "CompanyCodeName";
    public static final String P_CompanyCodeName = "CompanyCodeName";
    public static final String PROPERTY_MaxNomLvl = "MaxNomLvl";
    public static final String P_MaxNomLvl = "MaxNomLvl";
     
    public static final String PROPERTY_FullName = "FullName";
    public static final String P_FullName = "FullName";
    public static final String PROPERTY_FirstMiddleLastName = "FirstMiddleLastName";
    public static final String P_FirstMiddleLastName = "FirstMiddleLastName";
    public static final String PROPERTY_FirstLastName = "FirstLastName";
    public static final String P_FirstLastName = "FirstLastName";
    public static final String PROPERTY_PointsIssuanceBalance = "PointsIssuanceBalance";
    public static final String P_PointsIssuanceBalance = "PointsIssuanceBalance";
    public static final String PROPERTY_IsManagerOrGreater = "IsManagerOrGreater";
    public static final String P_IsManagerOrGreater = "IsManagerOrGreater";
    public static final String PROPERTY_IsProgramManagerOrGreater = "IsProgramManagerOrGreater";
    public static final String P_IsProgramManagerOrGreater = "IsProgramManagerOrGreater";
    public static final String PROPERTY_HasOpenAward = "HasOpenAward";
    public static final String P_HasOpenAward = "HasOpenAward";
    public static final String PROPERTY_HasNewHifive = "HasNewHifive";
    public static final String P_HasNewHifive = "HasNewHifive";
    public static final String PROPERTY_GetOpenAward = "GetOpenAward";
    public static final String P_GetOpenAward = "GetOpenAward";
    public static final String PROPERTY_HierarchyChanged = "HierarchyChanged";
    public static final String P_HierarchyChanged = "HierarchyChanged";
    public static final String PROPERTY_NextAnniversaryDate = "NextAnniversaryDate";
    public static final String P_NextAnniversaryDate = "NextAnniversaryDate";
    public static final String PROPERTY_CalcCharityTotal = "CalcCharityTotal";
    public static final String P_CalcCharityTotal = "CalcCharityTotal";
    public static final String PROPERTY_InspirePointsBalance = "InspirePointsBalance";
    public static final String P_InspirePointsBalance = "InspirePointsBalance";
    public static final String PROPERTY_ClearPassword = "ClearPassword";
    public static final String P_ClearPassword = "ClearPassword";
    public static final String PROPERTY_FirstLastNamePlusTopLocation = "FirstLastNamePlusTopLocation";
    public static final String P_FirstLastNamePlusTopLocation = "FirstLastNamePlusTopLocation";
    public static final String PROPERTY_AnniversaryDate = "AnniversaryDate";
    public static final String P_AnniversaryDate = "AnniversaryDate";
    public static final String PROPERTY_PointsTotal = "PointsTotal";
    public static final String P_PointsTotal = "PointsTotal";
    public static final String PROPERTY_PointsGrandTotal = "PointsGrandTotal";
    public static final String P_PointsGrandTotal = "PointsGrandTotal";
    public static final String PROPERTY_DiscretionaryPoints = "DiscretionaryPoints";
    public static final String P_DiscretionaryPoints = "DiscretionaryPoints";
     
    public static final String PROPERTY_Addresses = "Addresses";
    public static final String P_Addresses = "Addresses";
    public static final String PROPERTY_AllEmployees = "AllEmployees";
    public static final String P_AllEmployees = "AllEmployees";
    public static final String PROPERTY_AnniversaryProgram = "AnniversaryProgram";
    public static final String P_AnniversaryProgram = "AnniversaryProgram";
    public static final String PROPERTY_ApprovedInspires = "ApprovedInspires";
    public static final String P_ApprovedInspires = "ApprovedInspires";
    public static final String PROPERTY_ApprovedPointsRequests = "ApprovedPointsRequests";
    public static final String P_ApprovedPointsRequests = "ApprovedPointsRequests";
    public static final String PROPERTY_BPEmployees = "BPEmployees";
    public static final String P_BPEmployees = "BPEmployees";
    public static final String PROPERTY_CalcAvailableEcards = "CalcAvailableEcards";
    public static final String P_CalcAvailableEcards = "CalcAvailableEcards";
    public static final String PROPERTY_CalcAvailableEmployeeAwards = "CalcAvailableEmployeeAwards";
    public static final String P_CalcAvailableEmployeeAwards = "CalcAvailableEmployeeAwards";
    public static final String PROPERTY_CalcAwardTypes = "CalcAwardTypes";
    public static final String P_CalcAwardTypes = "CalcAwardTypes";
    public static final String PROPERTY_CalcParentEmployee = "CalcParentEmployee";
    public static final String P_CalcParentEmployee = "CalcParentEmployee";
    public static final String PROPERTY_CountryCode = "CountryCode";
    public static final String P_CountryCode = "CountryCode";
    public static final String PROPERTY_EmployeeAwards = "EmployeeAwards";
    public static final String P_EmployeeAwards = "EmployeeAwards";
    public static final String PROPERTY_EmployeeCustomDatas = "EmployeeCustomDatas";
    public static final String P_EmployeeCustomDatas = "EmployeeCustomDatas";
    public static final String PROPERTY_EmployeeEcardRecipients = "EmployeeEcardRecipients";
    public static final String P_EmployeeEcardRecipients = "EmployeeEcardRecipients";
    public static final String PROPERTY_EmployeeEcards = "EmployeeEcards";
    public static final String P_EmployeeEcards = "EmployeeEcards";
    public static final String PROPERTY_Employees = "Employees";
    public static final String P_Employees = "Employees";
    public static final String PROPERTY_EmployeeSurveys = "EmployeeSurveys";
    public static final String P_EmployeeSurveys = "EmployeeSurveys";
    public static final String PROPERTY_EmployeeType = "EmployeeType";
    public static final String P_EmployeeType = "EmployeeType";
    public static final String PROPERTY_FromPointsIssuances = "FromPointsIssuances";
    public static final String P_FromPointsIssuances = "FromPointsIssuances";
    public static final String PROPERTY_HifiveNominations = "HifiveNominations";
    public static final String P_HifiveNominations = "HifiveNominations";
    public static final String PROPERTY_HifiveOrders = "HifiveOrders";
    public static final String P_HifiveOrders = "HifiveOrders";
    public static final String PROPERTY_Hifives = "Hifives";
    public static final String P_Hifives = "Hifives";
    public static final String PROPERTY_HRBPartner = "HRBPartner";
    public static final String P_HRBPartner = "HRBPartner";
    public static final String PROPERTY_InspireApprovals = "InspireApprovals";
    public static final String P_InspireApprovals = "InspireApprovals";
    public static final String PROPERTY_InspireAwardLevelLocationValues = "InspireAwardLevelLocationValues";
    public static final String P_InspireAwardLevelLocationValues = "InspireAwardLevelLocationValues";
    public static final String PROPERTY_InspireAwardLevels = "InspireAwardLevels";
    public static final String P_InspireAwardLevels = "InspireAwardLevels";
    public static final String PROPERTY_InspireAwardType = "InspireAwardType";
    public static final String P_InspireAwardType = "InspireAwardType";
    public static final String PROPERTY_InspireCoreValues = "InspireCoreValues";
    public static final String P_InspireCoreValues = "InspireCoreValues";
    public static final String PROPERTY_InspireImagineCard = "InspireImagineCard";
    public static final String P_InspireImagineCard = "InspireImagineCard";
    public static final String PROPERTY_InspireOrders = "InspireOrders";
    public static final String P_InspireOrders = "InspireOrders";
    public static final String PROPERTY_InspireRecipients = "InspireRecipients";
    public static final String P_InspireRecipients = "InspireRecipients";
    public static final String PROPERTY_Inspires = "Inspires";
    public static final String P_Inspires = "Inspires";
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_ManagerHifives = "ManagerHifives";
    public static final String P_ManagerHifives = "ManagerHifives";
    public static final String PROPERTY_ParentEmployee = "ParentEmployee";
    public static final String P_ParentEmployee = "ParentEmployee";
    public static final String PROPERTY_Phones = "Phones";
    public static final String P_Phones = "Phones";
    public static final String PROPERTY_PointsApprovals = "PointsApprovals";
    public static final String P_PointsApprovals = "PointsApprovals";
    public static final String PROPERTY_PointsFromRecord = "PointsFromRecord";
    public static final String P_PointsFromRecord = "PointsFromRecord";
    public static final String PROPERTY_PointsIssuances = "PointsIssuances";
    public static final String P_PointsIssuances = "PointsIssuances";
    public static final String PROPERTY_PointsNextApproval = "PointsNextApproval";
    public static final String P_PointsNextApproval = "PointsNextApproval";
    public static final String PROPERTY_PointsPrevApproval = "PointsPrevApproval";
    public static final String P_PointsPrevApproval = "PointsPrevApproval";
    public static final String PROPERTY_PointsRequest = "PointsRequest";
    public static final String P_PointsRequest = "PointsRequest";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
    public static final String PROPERTY_QuizResults = "QuizResults";
    public static final String P_QuizResults = "QuizResults";
    public static final String PROPERTY_RequiresMyApproval = "RequiresMyApproval";
    public static final String P_RequiresMyApproval = "RequiresMyApproval";
     
    protected int id;
    protected OADate created;
    protected String employeeCode;
    protected String title;
    protected String prefixName;
    protected String firstName;
    protected String middleName;
    protected String lastName;
    protected String suffixName;
    protected OADate birthDate;
    protected OADate hireDate;
    protected String loginId;
    protected String password;
    protected OADate inactiveDate;
    protected String inactiveReason;
    protected boolean admin;
    protected String email;
    protected String email2;
    protected String workLocation;
    protected String costCenter;
    protected String costCenterDescription;
    protected OADate passwordAssignedDate;
    protected boolean topLevelManager;
    protected boolean superApprover;
    protected String division;
    protected boolean isNominator;
    protected String companyCode;
    protected String companyCodeName;
    protected int maxNomLvl;
     
    // Links to other objects.
    protected transient Hub<Address> hubAddresses;
    protected transient Hub<Employee> hubAllEmployees;
    protected transient Hub<InspireRecipient> hubApprovedInspires;
    protected transient Hub<PointsRequest> hubApprovedPointsRequests;
    protected transient Hub<Employee> hubBPEmployees;
    protected transient Hub<Ecard> hubCalcAvailableEcards;
    protected transient Hub<EmployeeAward> hubCalcAvailableEmployeeAwards;
    protected transient Hub<AwardType> hubCalcAwardTypes;
    protected transient CountryCode countryCode;
    protected transient Hub<EmployeeAward> hubEmployeeAwards;
    protected transient Hub<EmployeeCustomData> hubEmployeeCustomDatas;
    protected transient Hub<EmployeeEcardTo> hubEmployeeEcardRecipients;
    protected transient Hub<EmployeeEcard> hubEmployeeEcards;
    protected transient Hub<Employee> hubEmployees;
    protected transient Hub<EmployeeSurvey> hubEmployeeSurveys;
    protected transient EmployeeType employeeType;
    protected transient Hub<PointsIssuance> hubFromPointsIssuances;
    protected transient Hub<Hifive> hubHifiveNominations;
    protected transient Hub<HifiveOrder> hubHifiveOrders;
    protected transient Hub<Hifive> hubHifives;
    protected transient Employee HRBPartner;
    protected transient Hub<InspireApproval> hubInspireApprovals;
    protected transient Hub<InspireAwardLevelLocationValue> hubInspireAwardLevelLocationValues;
    protected transient Hub<InspireAwardLevel> hubInspireAwardLevels;
    protected transient AwardType inspireAwardType;
    protected transient Hub<InspireCoreValue> hubInspireCoreValues;
    protected transient Card inspireImagineCard;
    protected transient Hub<InspireOrder> hubInspireOrders;
    protected transient Hub<InspireRecipient> hubInspireRecipients;
    protected transient Hub<Inspire> hubInspires;
    protected transient Location location;
    protected transient Hub<Hifive> hubManagerHifives;
    protected transient Employee parentEmployee;
    protected transient Hub<Phone> hubPhones;
    protected transient Hub<PointsApproval> hubPointsApprovals;
    protected transient Hub<PointsRecord> hubPointsFromRecord;
    protected transient Hub<PointsIssuance> hubPointsIssuances;
    protected transient Employee pointsNextApproval;
    protected transient Hub<Employee> hubPointsPrevApproval;
    protected transient Hub<PointsRequest> hubPointsRequest;
    protected transient Program program;
    protected transient Hub<QuizResult> hubQuizResults;
    protected transient Hub<PointsAwardLevel> hubRequiresMyApproval;

    
    public transient int validateTestType = 0;
    public transient int validateTestResult = 0;
    
    public Employee() {
        if (!isLoading()) {
            setCreated(new OADate());
            setSuperApprover(false);
            setIsNominator(false);
            setMaxNomLvl(10);
        }
    }
     
    public Employee(int id) {
        this();
        setId(id);
    }

    public transient OAObjectEditQuery TestEditQuery_Class;
    
    @OAEditQuery(enabledProperty = "inactiveDate", enabledValue = false)
    public void onEditQuery(OAObjectEditQuery eq) {
        if (TestEditQuery_Class == null) return;
        
        switch (eq.getType()) {
        case AllowEnabled:
            eq.setAllowed(TestEditQuery_Class.getAllowed());
            break;
        case AllowVisible:
            eq.setAllowed(TestEditQuery_Class.getAllowed());
            break;
        }
    }
    
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Employee Code", maxLength = 25, displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 25)
    public String getEmployeeCode() {
        return employeeCode;
    }
    
    public void setEmployeeCode(String newValue) {
        fireBeforePropertyChange(P_EmployeeCode, this.employeeCode, newValue);
        String old = employeeCode;
        this.employeeCode = newValue;
        firePropertyChange(P_EmployeeCode, old, this.employeeCode);
    }
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 6)
    @OAColumn(maxLength = 75)
    public String getTitle() {
        return title;
    }
    
    public void setTitle(String newValue) {
        fireBeforePropertyChange(P_Title, this.title, newValue);
        String old = title;
        this.title = newValue;
        firePropertyChange(P_Title, old, this.title);
    }
    @OAProperty(displayName = "Prefix Name", maxLength = 75, displayLength = 20, columnLength = 8)
    @OAColumn(maxLength = 75)
    public String getPrefixName() {
        return prefixName;
    }
    
    public void setPrefixName(String newValue) {
        fireBeforePropertyChange(P_PrefixName, this.prefixName, newValue);
        String old = prefixName;
        this.prefixName = newValue;
        firePropertyChange(P_PrefixName, old, this.prefixName);
    }
    @OAProperty(displayName = "First Name", maxLength = 75, isUnicode = true, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 75)
    public String getFirstName() {
        return firstName;
    }
    
    public void setFirstName(String newValue) {
if (newValue != null && newValue.startsWith("FIRSTNAME")) {
    int xx = 4;
    xx++;
}
        fireBeforePropertyChange(P_FirstName, this.firstName, newValue);
        String old = firstName;
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
    @OAProperty(displayName = "Middle Name", maxLength = 75, isUnicode = true, displayLength = 20, columnLength = 4)
    @OAColumn(maxLength = 75)
    public String getMiddleName() {
        return middleName;
    }
    
    public void setMiddleName(String newValue) {
        fireBeforePropertyChange(P_MiddleName, this.middleName, newValue);
        String old = middleName;
        this.middleName = newValue;
        firePropertyChange(P_MiddleName, old, this.middleName);
    }
    @OAProperty(displayName = "Last Name", maxLength = 75, isUnicode = true, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 75)
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String newValue) {
        fireBeforePropertyChange(P_LastName, this.lastName, newValue);
        String old = lastName;
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
    public boolean isValidLastName(String newValue, OAObjectEditQuery msg) {
        // check valud of validateTestType   see:HubEventDelegateTest
        validateTestResult++;
        if (validateTestType == 2 && !"test".equals(newValue)) return false;
        if (validateTestType == 3) {
            msg.setResponse("cant set last name for this employee");
            return false;
        }
        return true;
    }
    @OAEditQuery()
    public void onEditQueryLastName(OAObjectEditQuery eq) {
        if (eq == null) return;
        if (eq.getType() == Type.VerifyPropertyChange) {
            boolean b = isValidLastName((String) eq.getValue(), eq);
            if (!b) eq.setAllowed(b);
        }
    }
    
    
    
    @OAProperty(displayName = "Suffix", maxLength = 75, displayLength = 20, columnLength = 8)
    @OAColumn(maxLength = 75)
    public String getSuffixName() {
        return suffixName;
    }
    
    public void setSuffixName(String newValue) {
        fireBeforePropertyChange(P_SuffixName, this.suffixName, newValue);
        String old = suffixName;
        this.suffixName = newValue;
        firePropertyChange(P_SuffixName, old, this.suffixName);
    }
    @OAProperty(displayName = "Birth Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getBirthDate() {
        return birthDate;
    }
    
    public void setBirthDate(OADate newValue) {
        fireBeforePropertyChange(P_BirthDate, this.birthDate, newValue);
        OADate old = birthDate;
        this.birthDate = newValue;
        firePropertyChange(P_BirthDate, old, this.birthDate);
    }
    @OAProperty(displayName = "Hire Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getHireDate() {
        return hireDate;
    }
    
    public void setHireDate(OADate newValue) {
        fireBeforePropertyChange(P_HireDate, this.hireDate, newValue);
        OADate old = hireDate;
        this.hireDate = newValue;
        firePropertyChange(P_HireDate, old, this.hireDate);
    }
    @OAProperty(displayName = "Login", maxLength = 75, isUnicode = true, displayLength = 15, columnLength = 10)
    @OAColumn(maxLength = 75)
    public String getLoginId() {
        return loginId;
    }
    
    public void setLoginId(String newValue) {
        fireBeforePropertyChange(P_LoginId, this.loginId, newValue);
        String old = loginId;
        this.loginId = newValue;
        firePropertyChange(P_LoginId, old, this.loginId);
    }
    @OAProperty(maxLength = 50, displayLength = 15, columnLength = 10, isPassword = true)
    @OAColumn(name = "Passwordx", maxLength = 50)
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String newValue) {
        fireBeforePropertyChange(P_Password, this.password, newValue);
        String old = password;
        this.password = newValue;
        firePropertyChange(P_Password, old, this.password);
    }
    @OAProperty(displayName = "Inactive Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInactiveDate() {
        return inactiveDate;
    }
    
    public void setInactiveDate(OADate newValue) {
        fireBeforePropertyChange(P_InactiveDate, this.inactiveDate, newValue);
        OADate old = inactiveDate;
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
    @OAProperty(displayName = "Inactive Reason", maxLength = 150, displayLength = 25)
    @OAColumn(maxLength = 150)
    public String getInactiveReason() {
        return inactiveReason;
    }
    @OAEditQuery()
    public void onEditQueryInactiveDate(OAObjectEditQuery eq) {
        if (eq == null) return;
        if (eq.getType() == Type.VerifyPropertyChange) {
            eq.setAllowed(true);
        }
    }
    
    
    
    public void setInactiveReason(String newValue) {
        fireBeforePropertyChange(P_InactiveReason, this.inactiveReason, newValue);
        String old = inactiveReason;
        this.inactiveReason = newValue;
        firePropertyChange(P_InactiveReason, old, this.inactiveReason);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getAdmin() {
        return admin;
    }
    
    public void setAdmin(boolean newValue) {
        fireBeforePropertyChange(P_Admin, this.admin, newValue);
        boolean old = admin;
        this.admin = newValue;
        firePropertyChange(P_Admin, old, this.admin);
    }
    @OAProperty(maxLength = 125, isUnicode = true, displayLength = 20, columnLength = 15, isEmail = true)
    @OAColumn(maxLength = 125)
    public String getEmail() {
        return email;
    }
    
    public void setEmail(String newValue) {
        fireBeforePropertyChange(P_Email, this.email, newValue);
        String old = email;
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
    @OAProperty(maxLength = 125, isUnicode = true, displayLength = 20, columnLength = 15, isEmail = true)
    @OAColumn(maxLength = 125)
    public String getEmail2() {
        if (OAString.isEmpty(email2)) {
            email2 = email;
        }
        return email2;
    }
    public void setEmail2(String newValue) {
        String old = email2;
        fireBeforePropertyChange(PROPERTY_Email2, old, newValue);
        this.email2 = newValue;
        firePropertyChange(PROPERTY_Email2, old, this.email2);
    }
    @OAProperty(displayName = "Work Location", description = "building, mailstop, etc.", maxLength = 50, isUnicode = true, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 50)
    /**
      building, mailstop, etc.
    */
    public String getWorkLocation() {
        return workLocation;
    }
    
    public void setWorkLocation(String newValue) {
        fireBeforePropertyChange(P_WorkLocation, this.workLocation, newValue);
        String old = workLocation;
        this.workLocation = newValue;
        firePropertyChange(P_WorkLocation, old, this.workLocation);
    }
    @OAProperty(displayName = "Cost Center", maxLength = 45, isUnicode = true, displayLength = 12, columnLength = 7)
    @OAColumn(maxLength = 45)
    public String getCostCenter() {
        return costCenter;
    }
    
    public void setCostCenter(String newValue) {
        fireBeforePropertyChange(P_CostCenter, this.costCenter, newValue);
        String old = costCenter;
        this.costCenter = newValue;
        firePropertyChange(P_CostCenter, old, this.costCenter);
    }
    @OAProperty(displayName = "Cost Center Description", maxLength = 45, isUnicode = true, displayLength = 40)
    @OAColumn(maxLength = 45)
    public String getCostCenterDescription() {
        return costCenterDescription;
    }
    
    public void setCostCenterDescription(String newValue) {
        fireBeforePropertyChange(P_CostCenterDescription, this.costCenterDescription, newValue);
        String old = costCenterDescription;
        this.costCenterDescription = newValue;
        firePropertyChange(P_CostCenterDescription, old, this.costCenterDescription);
    }
    @OAProperty(displayName = "Password Assigned Date", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getPasswordAssignedDate() {
        return passwordAssignedDate;
    }
    
    public void setPasswordAssignedDate(OADate newValue) {
        fireBeforePropertyChange(P_PasswordAssignedDate, this.passwordAssignedDate, newValue);
        OADate old = passwordAssignedDate;
        this.passwordAssignedDate = newValue;
        firePropertyChange(P_PasswordAssignedDate, old, this.passwordAssignedDate);
    }
    @OAProperty(displayName = "Top Level Manager", description = "is this the top manager in the company", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      is this the top manager in the company
    */
    public boolean getTopLevelManager() {
        return topLevelManager;
    }
    
    public void setTopLevelManager(boolean newValue) {
        fireBeforePropertyChange(P_TopLevelManager, this.topLevelManager, newValue);
        boolean old = topLevelManager;
        this.topLevelManager = newValue;
        firePropertyChange(P_TopLevelManager, old, this.topLevelManager);
    }
    @OAProperty(displayName = "Super Approver", description = "if checked this employee's nomination approvals are final unless the award level specifies a required employee", defaultValue = "false", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      if checked this employee's nomination approvals are final unless the award level specifies a required employee
    */
    public boolean getSuperApprover() {
        return superApprover;
    }
    
    public void setSuperApprover(boolean newValue) {
        fireBeforePropertyChange(P_SuperApprover, this.superApprover, newValue);
        boolean old = superApprover;
        this.superApprover = newValue;
        firePropertyChange(P_SuperApprover, old, this.superApprover);
    }
    @OAProperty(maxLength = 50, isUnicode = true, displayLength = 40)
    @OAColumn(maxLength = 50)
    public String getDivision() {
        return division;
    }
    
    public void setDivision(String newValue) {
        fireBeforePropertyChange(P_Division, this.division, newValue);
        String old = division;
        this.division = newValue;
        firePropertyChange(P_Division, old, this.division);
    }
    @OAProperty(displayName = "Is Nominator", description = "can this employee submit points nominations?", defaultValue = "false", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      can this employee submit points nominations?
    */
    public boolean getIsNominator() {
        return isNominator;
    }
    
    public void setIsNominator(boolean newValue) {
        fireBeforePropertyChange(P_IsNominator, this.isNominator, newValue);
        boolean old = isNominator;
        this.isNominator = newValue;
        firePropertyChange(P_IsNominator, old, this.isNominator);
    }
    @OAProperty(displayName = "Company Code", maxLength = 10, isUnicode = true, displayLength = 10)
    @OAColumn(maxLength = 10)
    public String getCompanyCode() {
        return companyCode;
    }
    
    public void setCompanyCode(String newValue) {
        fireBeforePropertyChange(P_CompanyCode, this.companyCode, newValue);
        String old = companyCode;
        this.companyCode = newValue;
        firePropertyChange(P_CompanyCode, old, this.companyCode);
    }
    @OAProperty(displayName = "Company Code Name", maxLength = 45, isUnicode = true, displayLength = 40)
    @OAColumn(maxLength = 45)
    public String getCompanyCodeName() {
        return companyCodeName;
    }
    
    public void setCompanyCodeName(String newValue) {
        fireBeforePropertyChange(P_CompanyCodeName, this.companyCodeName, newValue);
        String old = companyCodeName;
        this.companyCodeName = newValue;
        firePropertyChange(P_CompanyCodeName, old, this.companyCodeName);
    }
    @OAProperty(displayName = "Max Nom Lvl", description = "the highest nomination award level this employee can give", defaultValue = "10", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      the highest nomination award level this employee can give
    */
    public int getMaxNomLvl() {
        return maxNomLvl;
    }
    
    public void setMaxNomLvl(int newValue) {
        fireBeforePropertyChange(P_MaxNomLvl, this.maxNomLvl, newValue);
        int old = maxNomLvl;
        this.maxNomLvl = newValue;
        firePropertyChange(P_MaxNomLvl, old, this.maxNomLvl);
    }
    @OACalculatedProperty(displayName = "Full Name", displayLength = 30, columnLength = 25, properties = {P_FirstName, P_LastName, P_MiddleName, P_SuffixName, P_PrefixName})
    public String getFullName() {
        String fn = "";
        String s = getFirstName();
        if (s != null) fn = s;
        s = getLastName();
        if (s != null) {
            if (fn.length() > 0) fn += " ";
            fn += s;
        }
        return fn;
    }
     
    @OACalculatedProperty(displayName = "Full Name", displayLength = 30, columnLength = 25, properties = {P_FirstName, P_LastName, P_MiddleName})
    public String getFirstMiddleLastName() {
        return firstName+" "+middleName+" "+lastName;//EmployeeDelegate.getFirstMiddleLastName(this);
    }
     
    @OACalculatedProperty(displayName = "Full Name", displayLength = 25, properties = {P_FirstName, P_LastName})
    public String getFirstLastName() {
        return firstName+" "+lastName;//EmployeeDelegate.getFirstLastName(this);
    }
     
    @OACalculatedProperty(displayName = "Points Issuance Balance", description = "number of points this user/manager has avail to issue to other submanagers, or for Hi5 awards to this manager's users", decimalPlaces = 2, displayLength = 7, properties = {P_PointsIssuances+"."+PointsIssuance.P_Points, P_FromPointsIssuances+"."+PointsIssuance.P_Points})
    public double getPointsIssuanceBalance() {
        return 0;//EmployeeDelegate.getPointsIssuanceBalance(this);
    }
     
    @OACalculatedProperty(displayName = "Is Manager", displayLength = 5, properties = {P_EmployeeType+"."+EmployeeType.P_Type})
    public boolean isManager() {
        return false;//EmployeeDelegate.isManager(this);
    }
     
    @OACalculatedProperty(displayName = "Is Manager", displayLength = 5, properties = {P_EmployeeType+"."+EmployeeType.P_Type})
    public boolean isProgramManager() {
        return false;//EmployeeDelegate.isProgramManager(this);
    }
     
    @OACalculatedProperty(displayName = "Has Open Award", displayLength = 5, properties = {P_EmployeeAwards+"."+EmployeeAward.P_Created, P_EmployeeAwards+"."+EmployeeAward.P_Balance, P_EmployeeAwards+"."+EmployeeAward.P_Product})
    public boolean getHasOpenAward() {
        return false;//EmployeeDelegate.getHasOpenAward(this);
    }
     
    @OACalculatedProperty(displayName = "Has New Hifive", displayLength = 5, properties = {P_Hifives+"."+Hifive.P_ApprovedDate, P_Hifives+"."+Hifive.P_AckDate})
    public boolean getHasNewHifive() {
        return false;//EmployeeDelegate.getHasNewHifive(this);
    }
     
    @OACalculatedProperty(displayName = "Open Award", displayLength = 17, properties = {P_EmployeeAwards, P_EmployeeAwards+"."+EmployeeAward.P_AwardDate, P_EmployeeAwards+"."+EmployeeAward.P_AwardType, P_EmployeeAwards+"."+EmployeeAward.P_AwardCardOrders, P_EmployeeAwards+"."+EmployeeAward.P_Product})
    public EmployeeAward getOpenAward() {
        return null;//EmployeeDelegate.getOpenAward(this);
    }
     
    @OACalculatedProperty(displayName = "Hierarchy Changed", description = "checks when Employee Location or Program is changed.", displayLength = 5, properties = {P_Location, P_Location+"."+Location.P_Program, P_Location+"."+Location.P_AwardTypes, P_Program+"."+Program.P_AwardTypes, P_Program+"."+Program.P_Ecards, P_Location+"."+Location.P_Ecards, P_Program+"."+Program.P_InspireCoreValues, P_Location+"."+Location.P_InspireCoreValues, P_Program+"."+Program.P_InspireAwardType, P_Location+"."+Location.P_InspireAwardType, P_Location+"."+Location.P_AddOnItems})
    public boolean getHierarchyChanged() {
        // no-op, used by hubListener when program or location is changed
        return false;
    }

    /* example from oabuilder generator    
    @OACallbackMethod(onlyUseLoadedData=false, runOnServer=false, runInBackgroundThread=false, properties = {P_Location+"."+Location.P_Program, P_Location+"."+Location.P_AwardTypes, P_Location+"."+Location.P_Ecards, P_Location+"."+Location.P_InspireCoreValues, P_Location+"."+Location.P_InspireAwardType, P_Location+"."+Location.P_AddOnItems, P_Program+"."+Program.P_InspireAwardType, P_Program+"."+Program.P_InspireCoreValues, P_Program+"."+Program.P_Ecards, P_Program+"."+Program.P_AwardTypes})
    public void hierarchyTestCallback(OAObject fromObject, String propPathFromThis, Object oldValue, Object newValue) {
        
    }
    */    
    
    @OATriggerMethod(onlyUseLoadedData=true, runOnServer=true, runInBackgroundThread=true,
        properties = {
            P_Location, 
            P_Location+"."+Location.P_Program, 
            P_Location+"."+Location.P_AwardTypes, 
            P_Location+"."+Location.P_Ecards, 
            P_Location+"."+Location.P_InspireAwardType, 
            P_Location+"."+Location.P_AddOnItems,
            P_Location+"."+Location.P_InspireCoreValues, 
            P_Program+"."+Program.P_InspireCoreValues, 
            P_Program+"."+Program.P_InspireAwardType, 
            P_Program+"."+Program.P_AwardTypes, 
            P_Program+"."+Program.P_Ecards
        }
    )
    public boolean hierarchyChangedCallback(HubEvent hubEvent) {
        cntCallback++;
        return false;
    }
    public transient int cntCallback;
    
    
    @OACalculatedProperty(displayName = "Next Anniversary Date", displayLength = 8, properties = {P_HireDate})
    public OADate getNextAnniversaryDate() {
        return new OADate();//EmployeeDelegate.getNextAnniversaryDate(this);
    }
     
    @OACalculatedProperty(displayName = "Calc Charity Total", decimalPlaces = 2, displayLength = 7, properties = {P_EmployeeAwards+"."+EmployeeAward.P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_Value, P_InspireOrders+"."+InspireOrder.P_InspireOrderCharities+"."+InspireOrderCharity.P_Value})
    public double getCalcCharityTotal() {
        return 0;//EmployeeDelegate.getCalcCharityTotal(this);
    }
     
    @OACalculatedProperty(displayName = "Inspire Points Balance", decimalPlaces = 2, displayLength = 7, properties = {P_InspireRecipients+"."+InspireRecipient.P_Points, P_InspireOrders+"."+InspireOrder.P_PointsUsed})
    public double getInspirePointsBalance() {
        return 0;//EmployeeDelegate.getInspirePointsBalance(this);
    }
     
    @OACalculatedProperty(displayName = "Clear Password", displayLength = 13, properties = {P_Password})
    public String getClearPassword() {
        String pw = password;
        if (pw == null) pw = "";
        if (pw.length() > 12) {
           pw = "encrypted, can not display"; 
        }
        Program prog = getProgram();
        if (prog != null) {
            String s = prog.getCode();
            if (s != null && pw.toLowerCase().startsWith(s.toLowerCase())) {
    //qqqqqqqqqqqq need to check to see if the user has set it            
            }
        }
        return pw;
    }
     
    @OACalculatedProperty(displayName = "First Last Name Plus Top Location", displayLength = 23, properties = {P_FullName, P_Location})
    public String getFirstLastNamePlusTopLocation() {
        String value = getFirstLastName();
    
        Location loc = getLocation();
        for (;loc != null;) {
            Location locx = loc.getParentLocation();
            if (locx == null) {
                value += " (" + loc.getName() + ")";
                break;
            }
            loc = locx;
        }
        return value;
    }
     
    @OACalculatedProperty(displayName = "Anniversary Date", displayLength = 8, properties = {P_HireDate})
    public OADate getAnniversaryDate() {
        return new OADate();//EmployeeDelegate.getNextAnniversaryDate(this);
    }
     
    @OACalculatedProperty(displayName = "Points Total", description = "the total points this employee has", displayLength = 5, properties = {P_PointsFromRecord+"."+PointsRecord.P_Points})
    /**
      the total points this employee has
    */
    public int getPointsTotal() {
       return 0;//PointsDelegate.getPointsTotal(this);
    }
    
     
    @OACalculatedProperty(displayName = "Points Grand Total", description = "The sum of all points for this employee (spending, recognition, participation, etc)", displayLength = 5, properties = {P_PointsTotal, P_InspirePointsBalance})
    /**
      The sum of all points for this employee (spending, recognition, participation, etc)
    */
    public int getPointsGrandTotal() {
       return 0;//PointsDelegate.getPointsGrandTotal(this);
    }
    
     
    @OACalculatedProperty(displayName = "Discretionary Points", description = "The points this employee has that cannot be spent", displayLength = 5, properties = {P_PointsFromRecord})
    /**
      The points this employee has that cannot be spent
    */
    public int getDiscretionaryPoints() {
       return 0;//PointsDelegate.getDiscretionaryPoints(this);
    }
    
    
    
     
    @OAMany(
        toClass = Address.class, 
        owner = true, 
        reverseName = Address.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OAEditQuery(enabledProperty="created")
    public Hub<Address> getAddresses() {
        if (hubAddresses == null) {
            hubAddresses = (Hub<Address>) getHub(P_Addresses);
        }
        return hubAddresses;
    }
    public static void onEditQueryAddressesModel(OAObjectModel model) {
        //qqqqqqqqqqqq
    }
    
    @OAMany(
        displayName = "All Employees", 
        toClass = Employee.class, 
        recursive = false, 
        isCalculated = true, 
        reverseName = Employee.P_CalcParentEmployee
    )
    public Hub<Employee> getAllEmployees() {
        if (hubAllEmployees == null) {
            hubAllEmployees = (Hub<Employee>) getHub(PROPERTY_AllEmployees);
            HubMerger hm = new HubMerger(this, hubAllEmployees, PROPERTY_Employees);
        }
        return hubAllEmployees;
    }
    @OAOne(
        displayName = "Anniversary Program", 
        isCalculated = true, 
        reverseName = Program.P_AnniversaryEmployees, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Program getAnniversaryProgram() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Approved Inspires", 
        toClass = InspireRecipient.class, 
        isCalculated = true, 
        reverseName = InspireRecipient.P_ApprovedReceipientEmployee
    )
    public Hub<InspireRecipient> getApprovedInspires() {
        if (hubApprovedInspires == null) {
            FilteredHub<InspireRecipient> fh = new FilteredHub<InspireRecipient>(getInspireRecipients()) {
                @Override
                protected boolean isUsed(InspireRecipient obj) {
                    return (obj.getApprovalStatus() == InspireApproval.STATUS_Approved);
                }
            };
            fh.addProperty(InspireRecipient.PROPERTY_ApprovalStatus);
            hubApprovedInspires = fh;
        }
        return hubApprovedInspires;
    }
    @OAMany(
        displayName = "Approved Points Requests", 
        toClass = PointsRequest.class, 
        reverseName = PointsRequest.P_ApprovingEmployee
    )
    public Hub<PointsRequest> getApprovedPointsRequests() {
        if (hubApprovedPointsRequests == null) {
            hubApprovedPointsRequests = (Hub<PointsRequest>) getHub(P_ApprovedPointsRequests);
        }
        return hubApprovedPointsRequests;
    }
    
    @OAMany(
        toClass = Employee.class, 
        recursive = false, 
        reverseName = Employee.P_HRBPartner, 
        sortProperty = Employee.P_LastName
    )
    public Hub<Employee> getBPEmployees() {
        if (hubBPEmployees == null) {
            hubBPEmployees = (Hub<Employee>) getHub(P_BPEmployees);
        }
        return hubBPEmployees;
    }
    
    @OAMany(
        displayName = "Calc Available Ecards", 
        toClass = Ecard.class, 
        isCalculated = true, 
        reverseName = Ecard.P_Employee
    )
    public Hub<Ecard> getCalcAvailableEcards() {
        if (hubCalcAvailableEcards == null) {
            hubCalcAvailableEcards = (Hub<Ecard>) getHub(PROPERTY_CalcAvailableEcards);
            setupHierarchyListener();
        }
        return hubCalcAvailableEcards;
    }
    
    @OAMany(
        displayName = "Employee Awards", 
        toClass = EmployeeAward.class, 
        isCalculated = true, 
        reverseName = EmployeeAward.P_CalcEmployee
    )
    public Hub<EmployeeAward> getCalcAvailableEmployeeAwards() {
        if (hubCalcAvailableEmployeeAwards != null) return hubCalcAvailableEmployeeAwards;
        hubCalcAvailableEmployeeAwards = (Hub<EmployeeAward>) getHub(P_CalcAvailableEmployeeAwards);
        EmployeeAwardAvailableFilter filter = new EmployeeAwardAvailableFilter(getEmployeeAwards(), hubCalcAvailableEmployeeAwards);
        return hubCalcAvailableEmployeeAwards;
    }
    @OAMany(
        displayName = "Award Types", 
        toClass = AwardType.class, 
        isCalculated = true, 
        reverseName = AwardType.P_Employee
    )
    public Hub<AwardType> getCalcAwardTypes() {
        if (hubCalcAwardTypes == null) {
            hubCalcAwardTypes = (Hub<AwardType>) getHub(PROPERTY_CalcAwardTypes);
            setupHierarchyListener();
        }
        return hubCalcAwardTypes;
    }
    @OAOne(
        displayName = "Calc Parent Employee", 
        isCalculated = true, 
        reverseName = Employee.P_AllEmployees, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Employee getCalcParentEmployee() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Country Code", 
        isCalculated = true, 
        reverseName = CountryCode.P_Employees
    )
    public CountryCode getCountryCode() {
        /*was
        CountryCode cc = null;
        Location loc = getLocation();
        Program prog = null;
        for ( ; loc != null && cc == null; loc = loc.getParentLocation()) {
            cc = loc.getCountryCode();
            if (prog == null) prog = loc.getProgram();
        }
        if (cc == null && prog != null) cc = prog.getCountryCode();
        return cc;
        */
        return countryCode;
    }
    
    public void setCountryCode(CountryCode newValue) {
        fireBeforePropertyChange(P_CountryCode, this.countryCode, newValue);
        CountryCode old = this.countryCode;
        this.countryCode = newValue;
        firePropertyChange(P_CountryCode, old, this.countryCode);
    }
    public boolean isValidCountryCode(CountryCode newValue, OAObjectEditQuery msg) {
        // check valud of validateTestType   see:HubEventDelegateTest
        validateTestResult++;
        if (validateTestType == 3) {
            msg.setResponse("cant set CountryCode for this employee");
            return false;
        }
        return true;
    }
    
    @OAMany(
        displayName = "Employee Awards", 
        toClass = EmployeeAward.class, 
        owner = true, 
        reverseName = EmployeeAward.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<EmployeeAward> getEmployeeAwards() {
        if (hubEmployeeAwards == null) {
            hubEmployeeAwards = (Hub<EmployeeAward>) getHub(P_EmployeeAwards);
        }
        return hubEmployeeAwards;
    }
    @OAEditQuery
    public void onEditQueryEmployeeAwards(OAObjectEditQuery eq) {
        if (validateTestType == 3) {
            eq.setAllowed(false);
            return;
        }
        switch (eq.getType()) {
        case VerifyRemoveAll:
            if (validateTestType == 2) {
                eq.setAllowed(false);
                return;
            }
            break;
        }
    }
    public static void onEditQueryEmployeeAwardsModel(OAObjectModel om) {
    }
    
    
    
    @OAMany(
        displayName = "Employee Custom Datas", 
        toClass = EmployeeCustomData.class, 
        owner = true, 
        reverseName = EmployeeCustomData.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (Employee.P_Program+"."+Program.P_CustomData), 
        matchProperty = EmployeeCustomData.P_CustomData
    )
    public Hub<EmployeeCustomData> getEmployeeCustomDatas() {
        if (hubEmployeeCustomDatas == null) {
            hubEmployeeCustomDatas = (Hub<EmployeeCustomData>) getHub(P_EmployeeCustomDatas);
        }
        return hubEmployeeCustomDatas;
    }
    
    @OAMany(
        displayName = "Employee Ecard Recipients", 
        toClass = EmployeeEcardTo.class, 
        reverseName = EmployeeEcardTo.P_ToEmployee
    )
    public Hub<EmployeeEcardTo> getEmployeeEcardRecipients() {
        if (hubEmployeeEcardRecipients == null) {
            hubEmployeeEcardRecipients = (Hub<EmployeeEcardTo>) getHub(P_EmployeeEcardRecipients);
        }
        return hubEmployeeEcardRecipients;
    }
    
    @OAMany(
        displayName = "Employee Ecards", 
        toClass = EmployeeEcard.class, 
        owner = true, 
        reverseName = EmployeeEcard.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<EmployeeEcard> getEmployeeEcards() {
        if (hubEmployeeEcards == null) {
            hubEmployeeEcards = (Hub<EmployeeEcard>) getHub(P_EmployeeEcards);
        }
        return hubEmployeeEcards;
    }
    
    @OAMany(
        toClass = Employee.class, 
        recursive = true, 
        reverseName = Employee.P_ParentEmployee, 
        cascadeSave = true, 
        mustBeEmptyForDelete = true, 
        sortProperty = Employee.P_LastName
    )
    public Hub<Employee> getEmployees() {
        if (hubEmployees == null) {
            hubEmployees = (Hub<Employee>) getHub(P_Employees);
        }
        return hubEmployees;
    }
    
    @OAMany(
        displayName = "Employee Surveys", 
        toClass = EmployeeSurvey.class, 
        owner = true, 
        reverseName = EmployeeSurvey.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<EmployeeSurvey> getEmployeeSurveys() {
        if (hubEmployeeSurveys == null) {
            hubEmployeeSurveys = (Hub<EmployeeSurvey>) getHub(P_EmployeeSurveys);
        }
        return hubEmployeeSurveys;
    }
    
    @OAOne(
        displayName = "Employee Type", 
        reverseName = EmployeeType.P_Employees, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeTypeId"})
    public EmployeeType getEmployeeType() {
        if (employeeType == null) {
            employeeType = (EmployeeType) getObject(P_EmployeeType);
        }
        return employeeType;
    }
    
    public void setEmployeeType(EmployeeType newValue) {
        fireBeforePropertyChange(P_EmployeeType, this.employeeType, newValue);
        EmployeeType old = this.employeeType;
        this.employeeType = newValue;
        firePropertyChange(P_EmployeeType, old, this.employeeType);
    }
    
    @OAMany(
        displayName = "From Points Issuances", 
        toClass = PointsIssuance.class, 
        owner = true, 
        reverseName = PointsIssuance.P_FromEmployee, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<PointsIssuance> getFromPointsIssuances() {
        if (hubFromPointsIssuances == null) {
            hubFromPointsIssuances = (Hub<PointsIssuance>) getHub(P_FromPointsIssuances);
        }
        return hubFromPointsIssuances;
    }
    
    @OAMany(
        displayName = "Hi5 Nominations", 
        toClass = Hifive.class, 
        owner = true, 
        reverseName = Hifive.P_FromEmployee, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Hifive> getHifiveNominations() {
        if (hubHifiveNominations == null) {
            hubHifiveNominations = (Hub<Hifive>) getHub(P_HifiveNominations);
        }
        return hubHifiveNominations;
    }
    
    @OAMany(
        displayName = "Hi5 Orders", 
        toClass = HifiveOrder.class, 
        owner = true, 
        reverseName = HifiveOrder.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<HifiveOrder> getHifiveOrders() {
        if (hubHifiveOrders == null) {
            hubHifiveOrders = (Hub<HifiveOrder>) getHub(P_HifiveOrders);
        }
        return hubHifiveOrders;
    }
    
    @OAMany(
        displayName = "Hi5s", 
        toClass = Hifive.class, 
        reverseName = Hifive.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<Hifive> getHifives() {
        if (hubHifives == null) {
            hubHifives = (Hub<Hifive>) getHub(P_Hifives);
        }
        return hubHifives;
    }
    
    @OAOne(
        reverseName = Employee.P_BPEmployees, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"HRBPartnerId"})
    public Employee getHRBPartner() {
        if (HRBPartner == null) {
            HRBPartner = (Employee) getObject(P_HRBPartner);
        }
        return HRBPartner;
    }
    
    public void setHRBPartner(Employee newValue) {
        fireBeforePropertyChange(P_HRBPartner, this.HRBPartner, newValue);
        Employee old = this.HRBPartner;
        this.HRBPartner = newValue;
        firePropertyChange(P_HRBPartner, old, this.HRBPartner);
    }
    
    @OAMany(
        displayName = "Inspire Approvals", 
        toClass = InspireApproval.class, 
        reverseName = InspireApproval.P_Employee, 
        cascadeSave = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<InspireApproval> getInspireApprovals() {
        if (hubInspireApprovals == null) {
            hubInspireApprovals = (Hub<InspireApproval>) getHub(P_InspireApprovals);
        }
        return hubInspireApprovals;
    }
    
    @OAMany(
        displayName = "Inspire Award Level Location Values", 
        toClass = InspireAwardLevelLocationValue.class, 
        isCalculated = true, 
        reverseName = InspireAwardLevelLocationValue.P_Employee
    )
    public Hub<InspireAwardLevelLocationValue> getInspireAwardLevelLocationValues() {
        if (hubInspireAwardLevelLocationValues == null) {
            hubInspireAwardLevelLocationValues = (Hub<InspireAwardLevelLocationValue>) getHub(PROPERTY_InspireAwardLevelLocationValues);
            setupHierarchyListener();
        }
        return hubInspireAwardLevelLocationValues;
    }
    @OAMany(
        displayName = "Inspire Award Levels", 
        toClass = InspireAwardLevel.class, 
        isCalculated = true, 
        reverseName = InspireAwardLevel.P_Employee
    )
    public Hub<InspireAwardLevel> getInspireAwardLevels() {
        if (hubInspireAwardLevels == null) {
            hubInspireAwardLevels = new Hub<InspireAwardLevel>(InspireAwardLevel.class);
            new HubMerger(this, hubInspireAwardLevels, OAString.cpp(PROPERTY_Program, Program.PROPERTY_InspireAwardLevels));
        }
        return hubInspireAwardLevels;
    }
    @OAOne(
        displayName = "Inspire Award Type", 
        isCalculated = true, 
        reverseName = AwardType.P_InspireEmployees, 
        allowCreateNew = false
    )
    public AwardType getInspireAwardType() {
        return null;//EmployeeDelegate.getInspireAwardType(this);
    }
    @OAMany(
        displayName = "Inspire Core Values", 
        toClass = InspireCoreValue.class, 
        isCalculated = true, 
        reverseName = InspireCoreValue.P_Employee
    )
    public Hub<InspireCoreValue> getInspireCoreValues() {
        if (hubInspireCoreValues == null) {
            hubInspireCoreValues = (Hub<InspireCoreValue>) getHub(PROPERTY_InspireCoreValues);
            setupHierarchyListener();
        }
        return hubInspireCoreValues;
    }
    @OAOne(
        displayName = "Inspire Imagine Card", 
        isCalculated = true, 
        reverseName = Card.P_InspireImagineEmployees
    )
    public Card getInspireImagineCard() {
        return null;//EmployeeDelegate.getInspireImagineCard(this);
    }
    @OAMany(
        displayName = "Inspire Orders", 
        toClass = InspireOrder.class, 
        owner = true, 
        reverseName = InspireOrder.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<InspireOrder> getInspireOrders() {
        if (hubInspireOrders == null) {
            hubInspireOrders = (Hub<InspireOrder>) getHub(P_InspireOrders);
        }
        return hubInspireOrders;
    }
    
    @OAMany(
        displayName = "Inspire Recipients", 
        toClass = InspireRecipient.class, 
        reverseName = InspireRecipient.P_Employee, 
        cascadeSave = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<InspireRecipient> getInspireRecipients() {
        if (hubInspireRecipients == null) {
            hubInspireRecipients = (Hub<InspireRecipient>) getHub(P_InspireRecipients);
        }
        return hubInspireRecipients;
    }
    
    @OAMany(
        toClass = Inspire.class, 
        owner = true, 
        reverseName = Inspire.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true 
        //triggerClasses = {InspireSendEmailTrigger.class, InspireUpdateApprovalsTrigger.class}
    )
    public Hub<Inspire> getInspires() {
        if (hubInspires == null) {
            hubInspires = (Hub<Inspire>) getHub(P_Inspires);
        }
        return hubInspires;
    }
    
    @OAOne(
        reverseName = Location.P_Employees, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LocationId"})
    public Location getLocation() {
        if (location == null) {
            location = (Location) getObject(P_Location);
        }
        return location;
    }
    
    public void setLocation(Location newValue) {
        fireBeforePropertyChange(P_Location, this.location, newValue);
        Location old = this.location;
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
    
    @OAMany(
        displayName = "Manager Hifives", 
        toClass = Hifive.class, 
        reverseName = Hifive.P_Manager, 
        cascadeSave = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<Hifive> getManagerHifives() {
        if (hubManagerHifives == null) {
            hubManagerHifives = (Hub<Hifive>) getHub(P_ManagerHifives);
        }
        return hubManagerHifives;
    }
    
    @OAOne(
        displayName = "Parent Employee", 
        reverseName = Employee.P_Employees, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ParentEmployeeId"})
    public Employee getParentEmployee() {
        if (parentEmployee == null) {
            parentEmployee = (Employee) getObject(PROPERTY_ParentEmployee);
        }
        return parentEmployee;
    }
    public void setParentEmployee(Employee newValue) {
        Employee old = this.parentEmployee;
        fireBeforePropertyChange(PROPERTY_ParentEmployee, old, newValue);
        this.parentEmployee = newValue;
        firePropertyChange(PROPERTY_ParentEmployee, old, this.parentEmployee);
        if (!isServer()) return;
        if (parentEmployee != null && getLocation() == null) {
            setLocation(parentEmployee.getLocation());
        }
    }
    @OAMany(
        toClass = Phone.class, 
        owner = true, 
        reverseName = Phone.P_Employee, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OALinkTable(name = "EmployeePhone", indexName = "PhoneEmployee", columns = {"EmployeeId"})
    public Hub<Phone> getPhones() {
        if (hubPhones == null) {
            hubPhones = (Hub<Phone>) getHub(P_Phones);
        }
        return hubPhones;
    }
    
    @OAMany(
        displayName = "Points Approvals", 
        toClass = PointsApproval.class, 
        reverseName = PointsApproval.P_Employee
    )
    public Hub<PointsApproval> getPointsApprovals() {
        if (hubPointsApprovals == null) {
            hubPointsApprovals = (Hub<PointsApproval>) getHub(P_PointsApprovals);
        }
        return hubPointsApprovals;
    }
    
    @OAMany(
        displayName = "Points From Record", 
        toClass = PointsRecord.class, 
        reverseName = PointsRecord.P_PointsToEmployee
    )
    public Hub<PointsRecord> getPointsFromRecord() {
        if (hubPointsFromRecord == null) {
            hubPointsFromRecord = (Hub<PointsRecord>) getHub(P_PointsFromRecord);
        }
        return hubPointsFromRecord;
    }
    
    @OAMany(
        displayName = "Points Issuances", 
        toClass = PointsIssuance.class, 
        reverseName = PointsIssuance.P_ToEmployee, 
        cascadeSave = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<PointsIssuance> getPointsIssuances() {
        if (hubPointsIssuances == null) {
            hubPointsIssuances = (Hub<PointsIssuance>) getHub(P_PointsIssuances);
        }
        return hubPointsIssuances;
    }
    
    @OAOne(
        displayName = "Points Next Approval", 
        reverseName = Employee.P_PointsPrevApproval, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PointsNextApprovalId"})
    public Employee getPointsNextApproval() {
        if (pointsNextApproval == null) {
            pointsNextApproval = (Employee) getObject(PROPERTY_PointsNextApproval);
        }
        if (pointsNextApproval == null) {
        pointsNextApproval = this.getParentEmployee();
        }
        return pointsNextApproval;
    }
    
    public void setPointsNextApproval(Employee newValue) {
        fireBeforePropertyChange(PROPERTY_PointsNextApproval, this.pointsNextApproval, newValue);
        Employee old = this.pointsNextApproval;
        this.pointsNextApproval = newValue;
        firePropertyChange(PROPERTY_PointsNextApproval, old, this.pointsNextApproval);
    }
    
    @OAMany(
        displayName = "Points Prev Approval", 
        toClass = Employee.class, 
        recursive = false, 
        reverseName = Employee.P_PointsNextApproval
    )
    public Hub<Employee> getPointsPrevApproval() {
        if (hubPointsPrevApproval == null) {
            hubPointsPrevApproval = (Hub<Employee>) getHub(P_PointsPrevApproval);
        }
        return hubPointsPrevApproval;
    }
    
    @OAMany(
        displayName = "Points Request", 
        toClass = PointsRequest.class, 
        reverseName = PointsRequest.P_RequestingEmployee
    )
    public Hub<PointsRequest> getPointsRequest() {
        if (hubPointsRequest == null) {
            hubPointsRequest = (Hub<PointsRequest>) getHub(P_PointsRequest);
        }
        return hubPointsRequest;
    }
    
    @OAOne(
        isCalculated = true, 
        calcDependentProperties = {Employee.P_Location+"."+Location.P_Program} 
    )
    public Program getProgram() {
        OAHierFinder<Employee> hf = new OAHierFinder<Employee>(Location.P_Program, OAString.cpp(Employee.P_Location), false);
        return (Program) hf.findFirst(this);
    }

    
    @OAOne(
        isCalculated = true, 
        reverseName = Program.P_Employees, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    public Program getProgramX() {
        program = null;
        Location loc = getLocation();
        for ( ; program==null && loc!=null; loc=loc.getParentLocation()) {
            program = loc.getProgram(); 
        }
        return program;
    }
    public void setProgram(Program newValue) {
        Program old = this.program;
        if (newValue != this.program) {
            fireBeforePropertyChange(PROPERTY_Program, old, newValue);
        }
        this.program = getProgram();
        if (old != this.program) {
            firePropertyChange(PROPERTY_Program, old, this.program);
        }
    }
    @OAMany(
        displayName = "Quiz Results", 
        toClass = QuizResult.class, 
        reverseName = QuizResult.P_Employee
    )
    public Hub<QuizResult> getQuizResults() {
        if (hubQuizResults == null) {
            hubQuizResults = (Hub<QuizResult>) getHub(P_QuizResults);
        }
        return hubQuizResults;
    }
    
    @OAMany(
        displayName = "Requires My Approval", 
        toClass = PointsAwardLevel.class, 
        reverseName = PointsAwardLevel.P_RequiredApproval
    )
    public Hub<PointsAwardLevel> getRequiresMyApproval() {
        if (hubRequiresMyApproval == null) {
            hubRequiresMyApproval = (Hub<PointsAwardLevel>) getHub(P_RequiresMyApproval);
        }
        return hubRequiresMyApproval;
    }
    
    // updateHierarchy - listens for changes to Employee location or program
    private transient Hub<Employee> hubEmployeeCalc; 
    protected void setupHierarchyListener() {
        if (hubEmployeeCalc == null) {
            hubEmployeeCalc = new Hub<Employee>(Employee.class);
            hubEmployeeCalc.add(this);
            hubEmployeeCalc.setPos(0);
            hubEmployeeCalc.addHubListener(new HubListenerAdapter() {
                @Override
                public void afterPropertyChange(HubEvent e) {
                    if (PROPERTY_HierarchyChanged.equals(e.getPropertyName())) {
                        updateHierarchy();
                    }
                }
            }, PROPERTY_HierarchyChanged);
        }
        updateHierarchy();
    }
        
    protected void updateHierarchy() {
        if (hubEmployeeCalc == null && hubCalcAvailableEcards == null) return;
    
        Location location = this.getLocation();
        if (location == null) {
            if (hubCalcAwardTypes != null) hubCalcAwardTypes.setSharedHub(null);
            if (hubCalcAvailableEcards != null) hubCalcAvailableEcards.setSharedHub(null);
            if (hubInspireAwardLevelLocationValues != null) hubInspireAwardLevelLocationValues.setSharedHub(null);
            return;
        }
    
        boolean bUpdateAwardTypes = (hubCalcAwardTypes != null);
        boolean bUpdateAvailableEcards = (hubCalcAvailableEcards != null);
        boolean bUpdateInspireAwardLevelLocationValues = (hubInspireAwardLevelLocationValues != null);
        boolean bUpdateInspireCoreValues = (hubInspireCoreValues != null);
        
        for ( ; ; ) {
            if (bUpdateAwardTypes) {
                if (location.getAwardTypes().getSize() > 0) {
                    Hub h = location.getAwardTypes();
                    if (hubCalcAwardTypes.getSharedHub() != h) hubCalcAwardTypes.setSharedHub(h);
                    bUpdateAwardTypes = false;
                }
            }
            if (bUpdateAvailableEcards) {
                if (location.getEcards().getSize() > 0) {
                    Hub h = location.getEcards();
                    if (hubCalcAvailableEcards.getSharedHub() != h) hubCalcAvailableEcards.setSharedHub(h);
                    bUpdateAvailableEcards = false;
                }
            }
            if (bUpdateInspireAwardLevelLocationValues) {
                if (location.getInspireAwardLevelLocationValues().getSize() > 0) {
                    Hub h = location.getInspireAwardLevelLocationValues();
                    if (getInspireAwardLevelLocationValues().getSharedHub() != h) getInspireAwardLevelLocationValues().setSharedHub(h);
                    bUpdateInspireAwardLevelLocationValues = false;
                }
            }
            if (bUpdateInspireCoreValues) {
                if (location.getInspireCoreValues().getSize() > 0) {
                    Hub h = location.getInspireCoreValues();
                    if (getInspireCoreValues().getSharedHub() != h) getInspireCoreValues().setSharedHub(h);
                    bUpdateInspireCoreValues = false;
                }
            }
    
            Location ploc = location.getParentLocation();
            if (ploc == null) {
                Program program = location.getProgram();
                if (this.program != program) setProgram(program);
                if (program != null) {
                    if (bUpdateAwardTypes) {
                        Hub h = program.getAwardTypes();
                        if (hubCalcAwardTypes.getSharedHub() != h) hubCalcAwardTypes.setSharedHub(h);
                    }
                    if (bUpdateAvailableEcards) {
                        Hub h = program.getEcards();
                        if (hubCalcAvailableEcards.getSharedHub() != h) hubCalcAvailableEcards.setSharedHub(h);
                    }
                    if (bUpdateInspireCoreValues) {
                        Hub h = program.getInspireCoreValues();
                        if (getInspireCoreValues().getSharedHub() != h) getInspireCoreValues().setSharedHub(h);
                    }
                }
                else {
                    if (bUpdateAwardTypes) hubCalcAwardTypes.setSharedHub(null);
                    if (bUpdateAvailableEcards) hubCalcAvailableEcards.setSharedHub(null);
                    if (bUpdateInspireCoreValues) getInspireCoreValues().setSharedHub(null);
                }
                break;
            }
            location = ploc;
        }
    }
     
    // currencyValueMethods
    
    //  Point value converted to Currency
    public double getCurrencyValueForCash(double points) {
        return 0;//EmployeeDelegate.getCurrencyValueForCash(this, points);
    }
    public double getCurrencyValueForItem(double points) {
        return 0;//EmployeeDelegate.getCurrencyValueForItem(this, points);
    }
    public double getCurrencyValueForCharity(double points) {
        return 0;//EmployeeDelegate.getCurrencyValueForCharity(this, points);
    }
    public double getCurrencyValueForCard(double points) {
        return 0;//EmployeeDelegate.getCurrencyValueForCard(this, points);
    }
    public double getCurrencyValueForInternationalVisa(double points) {
        return 0;//EmployeeDelegate.getCurrencyValueForInternationalVisa(this, points);
    }
    
    //  Currency value converted to Points
    public double getPointValueForCash(double currency) {
        return 0;//EmployeeDelegate.getPointValueForCash(this, currency);
    }
    public double getPointValueForItem(double currency) {
        return 0;//EmployeeDelegate.getPointValueForItem(this, currency);
    }
    public double getPointValueForCharity(double currency) {
        return 0;//EmployeeDelegate.getPointValueForCharity(this, currency);
    }
    public double getPointValueForCard(double currency) {
        return 0;//EmployeeDelegate.getPointValueForCard(this, currency);
    }
    public double getPointValueForInternationalVisa(double currency) {
        return 0;//EmployeeDelegate.getPointValueForInternationalVisa(this, currency);
    }
     
    // customData
    public EmployeeCustomData getEmployeeCustomData(String code) {
        EmployeeCustomData employeeCustomData = getEmployeeCustomDatas().find(Employee.PROPERTY_EmployeeCustomDatas, EmployeeCustomData.PROPERTY_Code);
        return employeeCustomData;
    }
     
    // reassignPassword - email a new password for this user
    public void reassignPassword() {
        String newPassword = OAString.getRandomString(7, 10, true, true, true);
        setPassword(newPassword); /// OAString.convertToSHAHash(newPassword));
        //EmailDelegate.createForgotPasswordEmail(this);
    }
     
    // getAnniversyDate
    public OADate getAnniversaryDate(OADate d1, OADate d2) {
        return new OADate();//EmployeeDelegate.getAnniversaryDate(this, d1, d2);
    }
     
    // getAnniversyNumber
    public int getAnniversaryNumber(OADate d1, OADate d2) {
        return 0;//EmployeeDelegate.getAnniversaryNumber(this, d1, d2);
    }
     
    // register - send this employee a email with a new login password
    public void register() {
        String newPassword = OAString.getRandomString(7, 10, true, true, true);
        setPassword(newPassword); /// OAString.convertToSHAHash(newPassword));
        //EmailDelegate.createRegisterEmail(this);
    }
     
    // getPointsCoreValues
    public Hub<PointsCoreValue> getPointsCoreValues() {
        return null;//PointsCoreValueDelegate.getPointsCoreValues(this);
    }
     
    // getPointsAwardLevels
    public Hub<PointsAwardLevel> getPointsAwardLevels() {
        return null;//PointsAwardLevelDelegate.getPointsAwardLevels(this);
    }
     
    // loginAsThisEmployee
    public void loginAsThisEmployee() {
        //EmployeeDelegate.loginAsThisEmployee(this);
        return;
    }
     
    @Override
    public OAObjectKey getObjectKey() {
        if (objectKey == null) {
            if (id == 0) {
                int xx = 4;
                xx++;
            }
        }
        return super.getObjectKey();
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
if (objectKey != null) {
    int xx = 4;
    xx++;
}
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.employeeCode = rs.getString(3);
        this.title = rs.getString(4);
        this.prefixName = rs.getString(5);
        this.firstName = rs.getString(6);
        this.middleName = rs.getString(7);
        this.lastName = rs.getString(8);
        this.suffixName = rs.getString(9);
        date = rs.getDate(10);
        if (date != null) this.birthDate = new OADate(date);
        date = rs.getDate(11);
        if (date != null) this.hireDate = new OADate(date);
        this.loginId = rs.getString(12);
        this.password = rs.getString(13);
        date = rs.getDate(14);
        if (date != null) this.inactiveDate = new OADate(date);
        this.inactiveReason = rs.getString(15);
        this.admin = rs.getBoolean(16);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Employee.P_Admin, true);
        }
        this.email = rs.getString(17);
        this.email2 = rs.getString(18);
        this.workLocation = rs.getString(19);
        this.costCenter = rs.getString(20);
        this.costCenterDescription = rs.getString(21);
        date = rs.getDate(22);
        if (date != null) this.passwordAssignedDate = new OADate(date);
        this.topLevelManager = rs.getBoolean(23);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Employee.P_TopLevelManager, true);
        }
        this.superApprover = rs.getBoolean(24);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Employee.P_SuperApprover, true);
        }
        this.division = rs.getString(25);
        this.isNominator = rs.getBoolean(26);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Employee.P_IsNominator, true);
        }
        this.companyCode = rs.getString(27);
        this.companyCodeName = rs.getString(28);
        this.maxNomLvl = (int) rs.getInt(29);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Employee.P_MaxNomLvl, true);
        }
        int employeeTypeFkey = rs.getInt(30);
        if (!rs.wasNull() && employeeTypeFkey > 0) {
            setProperty(P_EmployeeType, new OAObjectKey(employeeTypeFkey));
        }
        int HRBPartnerFkey = rs.getInt(31);
        if (!rs.wasNull() && HRBPartnerFkey > 0) {
            setProperty(P_HRBPartner, new OAObjectKey(HRBPartnerFkey));
        }
        int locationFkey = rs.getInt(32);
        if (!rs.wasNull() && locationFkey > 0) {
            setProperty(P_Location, new OAObjectKey(locationFkey));
        }
        int parentEmployeeFkey = rs.getInt(33);
        if (!rs.wasNull() && parentEmployeeFkey > 0) {
            setProperty(P_ParentEmployee, new OAObjectKey(parentEmployeeFkey));
        }
        int pointsNextApprovalFkey = rs.getInt(34);
        if (!rs.wasNull() && pointsNextApprovalFkey > 0) {
            setProperty(P_PointsNextApproval, new OAObjectKey(pointsNextApprovalFkey));
        }
        if (rs.getMetaData().getColumnCount() != 34) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
    
    @OAMethod
    @OAEditQuery(visibleProperty="xxxx")
    public void command() {
    }
    @OAEditQuery(visibleProperty="birthDate")
    public void onEditQueryCommand(OAObjectEditQuery eq) {
        
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ee",
    displayName = "Employee Ecard",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "EmployeeEcardEmployee", columns = { @OAIndexColumn(name = "EmployeeId") })
    }
)
public class EmployeeEcard extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Subject = "Subject";
    public static final String P_Subject = "Subject";
    public static final String PROPERTY_Message = "Message";
    public static final String P_Message = "Message";
    public static final String PROPERTY_SendDate = "SendDate";
    public static final String P_SendDate = "SendDate";
     
    public static final String PROPERTY_SentDateTime = "SentDateTime";
    public static final String P_SentDateTime = "SentDateTime";
     
    public static final String PROPERTY_ConfirmedEmail = "ConfirmedEmail";
    public static final String P_ConfirmedEmail = "ConfirmedEmail";
    public static final String PROPERTY_DeliveredEmail = "DeliveredEmail";
    public static final String P_DeliveredEmail = "DeliveredEmail";
    public static final String PROPERTY_Ecard = "Ecard";
    public static final String P_Ecard = "Ecard";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_EmployeeEcardTos = "EmployeeEcardTos";
    public static final String P_EmployeeEcardTos = "EmployeeEcardTos";
     
    protected int id;
    protected OADate created;
    protected String subject;
    protected String message;
    protected OADate sendDate;
     
    // Links to other objects.
    protected transient Email confirmedEmail;
    protected transient Email deliveredEmail;
    protected transient Ecard ecard;
    protected transient Employee employee;
    protected transient Hub<EmployeeEcardTo> hubEmployeeEcardTos;
     
    public EmployeeEcard() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public EmployeeEcard(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 125, isUnicode = true, displayLength = 30, columnLength = 20)
    @OAColumn(maxLength = 125)
    public String getSubject() {
        return subject;
    }
    
    public void setSubject(String newValue) {
        fireBeforePropertyChange(P_Subject, this.subject, newValue);
        String old = subject;
        this.subject = newValue;
        firePropertyChange(P_Subject, old, this.subject);
    }
    @OAProperty(maxLength = 11, isUnicode = true, displayLength = 11)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String newValue) {
        fireBeforePropertyChange(P_Message, this.message, newValue);
        String old = message;
        this.message = newValue;
        firePropertyChange(P_Message, old, this.message);
    }
    @OAProperty(displayName = "Send Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getSendDate() {
        return sendDate;
    }
    
    public void setSendDate(OADate newValue) {
        fireBeforePropertyChange(P_SendDate, this.sendDate, newValue);
        OADate old = sendDate;
        this.sendDate = newValue;
        firePropertyChange(P_SendDate, old, this.sendDate);
    }
    @OACalculatedProperty(displayName = "Sent Date Time", displayLength = 15, properties = {P_DeliveredEmail+"."+Email.P_SentDateTime})
    public OADateTime getSentDateTime() {
        OADateTime sentDateTime = null;
        // deliveredEmail.sentDateTime
        Email email = this.getDeliveredEmail();
        if (email != null) {
            sentDateTime = email.getSentDateTime();
        }
    
        return sentDateTime;
    }
    
     
    @OAOne(
        displayName = "Confirmed Email", 
        reverseName = Email.P_EmployeeEcardConfirmed, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ConfirmedEmailId"})
    public Email getConfirmedEmail() {
        if (confirmedEmail == null) {
            confirmedEmail = (Email) getObject(P_ConfirmedEmail);
        }
        return confirmedEmail;
    }
    
    public void setConfirmedEmail(Email newValue) {
        fireBeforePropertyChange(P_ConfirmedEmail, this.confirmedEmail, newValue);
        Email old = this.confirmedEmail;
        this.confirmedEmail = newValue;
        firePropertyChange(P_ConfirmedEmail, old, this.confirmedEmail);
    }
    
    @OAOne(
        displayName = "Delivered Email", 
        reverseName = Email.P_EmployeeEcardDelivered, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"DeliveredEmailId"})
    public Email getDeliveredEmail() {
        if (deliveredEmail == null) {
            deliveredEmail = (Email) getObject(P_DeliveredEmail);
        }
        return deliveredEmail;
    }
    
    public void setDeliveredEmail(Email newValue) {
        fireBeforePropertyChange(P_DeliveredEmail, this.deliveredEmail, newValue);
        Email old = this.deliveredEmail;
        this.deliveredEmail = newValue;
        firePropertyChange(P_DeliveredEmail, old, this.deliveredEmail);
    }
    
    @OAOne(
        reverseName = Ecard.P_EmployeeEcards, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EcardId"})
    public Ecard getEcard() {
        if (ecard == null) {
            ecard = (Ecard) getObject(P_Ecard);
        }
        return ecard;
    }
    
    public void setEcard(Ecard newValue) {
        fireBeforePropertyChange(P_Ecard, this.ecard, newValue);
        Ecard old = this.ecard;
        this.ecard = newValue;
        firePropertyChange(P_Ecard, old, this.ecard);
    }
    
    @OAOne(
        reverseName = Employee.P_EmployeeEcards, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(PROPERTY_Employee);
        }
        return employee;
    }
    public void setEmployee(Employee newValue) {
        setEmployee(newValue, true);
    }
    public void setEmployeeTemp(Employee newValue) {
        setEmployee(newValue, false);
    }
    public void setEmployee(Employee newValue, boolean bFirePropChange) {
        Employee old = this.employee;
        if (bFirePropChange) fireBeforePropertyChange(PROPERTY_Employee, old, newValue);
        this.employee = newValue;
        if (bFirePropChange) firePropertyChange(PROPERTY_Employee, old, this.employee);
        else OAObjectPropertyDelegate.setProperty(this, PROPERTY_Employee, this.employee);         
    }
    @OAMany(
        displayName = "Ecard Recipients", 
        toClass = EmployeeEcardTo.class, 
        owner = true, 
        reverseName = EmployeeEcardTo.P_EmployeeEcard, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<EmployeeEcardTo> getEmployeeEcardTos() {
        if (hubEmployeeEcardTos == null) {
            hubEmployeeEcardTos = (Hub<EmployeeEcardTo>) getHub(P_EmployeeEcardTos);
        }
        return hubEmployeeEcardTos;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.subject = rs.getString(3);
        this.message = rs.getString(4);
        date = rs.getDate(5);
        if (date != null) this.sendDate = new OADate(date);
        int confirmedEmailFkey = rs.getInt(6);
        if (!rs.wasNull() && confirmedEmailFkey > 0) {
            setProperty(P_ConfirmedEmail, new OAObjectKey(confirmedEmailFkey));
        }
        int deliveredEmailFkey = rs.getInt(7);
        if (!rs.wasNull() && deliveredEmailFkey > 0) {
            setProperty(P_DeliveredEmail, new OAObjectKey(deliveredEmailFkey));
        }
        int ecardFkey = rs.getInt(8);
        if (!rs.wasNull() && ecardFkey > 0) {
            setProperty(P_Ecard, new OAObjectKey(ecardFkey));
        }
        int employeeFkey = rs.getInt(9);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

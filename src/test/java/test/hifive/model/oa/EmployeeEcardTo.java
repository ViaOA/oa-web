// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "eet",
    displayName = "Ecard Recipient",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "EmployeeEcardToEmployeeEcard", columns = { @OAIndexColumn(name = "EmployeeEcardId") }), 
        @OAIndex(name = "EmployeeEcardToToEmployee", columns = { @OAIndexColumn(name = "ToEmployeeId") })
    }
)
public class EmployeeEcardTo extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_EmailAddress = "EmailAddress";
    public static final String P_EmailAddress = "EmailAddress";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_IncludeManager = "IncludeManager";
    public static final String P_IncludeManager = "IncludeManager";
     
    public static final String PROPERTY_PdfBytes = "PdfBytes";
    public static final String P_PdfBytes = "PdfBytes";
     
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_EmployeeEcard = "EmployeeEcard";
    public static final String P_EmployeeEcard = "EmployeeEcard";
    public static final String PROPERTY_ToEmployee = "ToEmployee";
    public static final String P_ToEmployee = "ToEmployee";
     
    protected int id;
    protected String emailAddress;
    protected String name;
    protected boolean includeManager;
     
    // Links to other objects.
    protected transient Email email;
    protected transient EmployeeEcard employeeEcard;
    protected transient Employee toEmployee;
     
    public EmployeeEcardTo() {
    }
     
    public EmployeeEcardTo(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5, isAutoSeq = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Email Address", maxLength = 125, displayLength = 40, columnLength = 20, isEmail = true)
    @OAColumn(maxLength = 125)
    public String getEmailAddress() {
        return emailAddress;
    }
    
    public void setEmailAddress(String newValue) {
        fireBeforePropertyChange(P_EmailAddress, this.emailAddress, newValue);
        String old = emailAddress;
        this.emailAddress = newValue;
        firePropertyChange(P_EmailAddress, old, this.emailAddress);
    }
    @OAProperty(maxLength = 75, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Include Manager", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getIncludeManager() {
        return includeManager;
    }
    
    public void setIncludeManager(boolean newValue) {
        fireBeforePropertyChange(P_IncludeManager, this.includeManager, newValue);
        boolean old = includeManager;
        this.includeManager = newValue;
        firePropertyChange(P_IncludeManager, old, this.includeManager);
    }
    @OACalculatedProperty(displayName = "Pdf Bytes", displayLength = 1)
    public byte[] getPdfBytes() {
        byte[] bs = null;
        try {
            bs = null;//EcardDelegate.getPdfBytes(this);
        }
        catch (Exception e) {
        }
        return bs;
    }
     
    @OAOne(
        reverseName = Email.P_EmployeeEcardTo, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"EmailId"})
    public Email getEmail() {
        if (email == null) {
            email = (Email) getObject(P_Email);
        }
        return email;
    }
    
    public void setEmail(Email newValue) {
        fireBeforePropertyChange(P_Email, this.email, newValue);
        Email old = this.email;
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
    
    @OAOne(
        displayName = "Employee Ecard", 
        reverseName = EmployeeEcard.P_EmployeeEcardTos, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeEcardId"})
    public EmployeeEcard getEmployeeEcard() {
        if (employeeEcard == null) {
            employeeEcard = (EmployeeEcard) getObject(P_EmployeeEcard);
        }
        return employeeEcard;
    }
    
    public void setEmployeeEcard(EmployeeEcard newValue) {
        fireBeforePropertyChange(P_EmployeeEcard, this.employeeEcard, newValue);
        EmployeeEcard old = this.employeeEcard;
        this.employeeEcard = newValue;
        firePropertyChange(P_EmployeeEcard, old, this.employeeEcard);
    }
    
    @OAOne(
        displayName = "To Employee", 
        reverseName = Employee.P_EmployeeEcardRecipients, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ToEmployeeId"})
    public Employee getToEmployee() {
        if (toEmployee == null) {
            toEmployee = (Employee) getObject(PROPERTY_ToEmployee);
        }
        return toEmployee;
    }
    public void setToEmployeeTemp(Employee newValue) {
        setToEmployee(newValue, true);
    }
    public void setToEmployee(Employee newValue) {
        setToEmployee(newValue, false);
    }
    public void setToEmployee(Employee newValue, boolean bFirePropChange) {
        Employee old = this.toEmployee;
        if (bFirePropChange) fireBeforePropertyChange(PROPERTY_ToEmployee, old, newValue);
        this.toEmployee = newValue;
        if (bFirePropChange) firePropertyChange(PROPERTY_ToEmployee, old, this.toEmployee);
        else OAObjectPropertyDelegate.setProperty(this, PROPERTY_ToEmployee, this.toEmployee);         
    }
    // viewPdf - view ECard pdf
    public void viewPdf() {
        //EcardDelegate.viewPdf(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.emailAddress = rs.getString(2);
        this.name = rs.getString(3);
        this.includeManager = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, EmployeeEcardTo.P_IncludeManager, true);
        }
        int emailFkey = rs.getInt(5);
        if (!rs.wasNull() && emailFkey > 0) {
            setProperty(P_Email, new OAObjectKey(emailFkey));
        }
        int employeeEcardFkey = rs.getInt(6);
        if (!rs.wasNull() && employeeEcardFkey > 0) {
            setProperty(P_EmployeeEcard, new OAObjectKey(employeeEcardFkey));
        }
        int toEmployeeFkey = rs.getInt(7);
        if (!rs.wasNull() && toEmployeeFkey > 0) {
            setProperty(P_ToEmployee, new OAObjectKey(toEmployeeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

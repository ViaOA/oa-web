// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "es",
    displayName = "Employee Survey",
    displayProperty = "survey.name"
)
@OATable(
    indexes = {
        @OAIndex(name = "EmployeeSurveyEmployee", columns = { @OAIndexColumn(name = "EmployeeId") })
    }
)
public class EmployeeSurvey extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Text = "Text";
    public static final String P_Text = "Text";
    public static final String PROPERTY_Points = "Points";
    public static final String P_Points = "Points";
    public static final String PROPERTY_ApprovedDate = "ApprovedDate";
    public static final String P_ApprovedDate = "ApprovedDate";
     
     
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_EmployeeSurveyQuestions = "EmployeeSurveyQuestions";
    public static final String P_EmployeeSurveyQuestions = "EmployeeSurveyQuestions";
    public static final String PROPERTY_Hifives = "Hifives";
    public static final String P_Hifives = "Hifives";
    public static final String PROPERTY_Survey = "Survey";
    public static final String P_Survey = "Survey";
     
    protected int id;
    protected OADate created;
    protected String text;
    protected double points;
    protected OADate approvedDate;
     
    // Links to other objects.
    protected transient Employee employee;
    protected transient Hub<EmployeeSurveyQuestion> hubEmployeeSurveyQuestions;
    protected transient Survey survey;
     
    public EmployeeSurvey() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public EmployeeSurvey(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Date", defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 254, displayLength = 40)
    @OAColumn(name = "TextValue", sqlType = java.sql.Types.CLOB)
    public String getText() {
        return text;
    }
    
    public void setText(String newValue) {
        fireBeforePropertyChange(P_Text, this.text, newValue);
        String old = text;
        this.text = newValue;
        firePropertyChange(P_Text, old, this.text);
    }
    @OAProperty(decimalPlaces = 2, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPoints() {
        return points;
    }
    
    public void setPoints(double newValue) {
        fireBeforePropertyChange(P_Points, this.points, newValue);
        double old = points;
        this.points = newValue;
        firePropertyChange(P_Points, old, this.points);
    }
    @OAProperty(displayName = "Approved Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getApprovedDate() {
        return approvedDate;
    }
    
    public void setApprovedDate(OADate newValue) {
        fireBeforePropertyChange(P_ApprovedDate, this.approvedDate, newValue);
        OADate old = approvedDate;
        this.approvedDate = newValue;
        firePropertyChange(P_ApprovedDate, old, this.approvedDate);
    }
    @OAOne(
        reverseName = Employee.P_EmployeeSurveys, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAMany(
        displayName = "Employee Survey Questions", 
        toClass = EmployeeSurveyQuestion.class, 
        owner = true, 
        reverseName = EmployeeSurveyQuestion.P_EmployeeSurvey, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (EmployeeSurvey.P_Survey+"."+Survey.P_SurveyQuestions), 
        matchProperty = EmployeeSurveyQuestion.P_SurveyQuestion
    )
    public Hub<EmployeeSurveyQuestion> getEmployeeSurveyQuestions() {
        if (hubEmployeeSurveyQuestions == null) {
            hubEmployeeSurveyQuestions = (Hub<EmployeeSurveyQuestion>) getHub(P_EmployeeSurveyQuestions);
        }
        return hubEmployeeSurveyQuestions;
    }
    
    @OAMany(
        toClass = Hifive.class, 
        reverseName = Hifive.P_EmployeeSurvey, 
        createMethod = false
    )
    private Hub<Hifive> getHifives() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Survey.P_EmployeeSurveys, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SurveyId"})
    public Survey getSurvey() {
        if (survey == null) {
            survey = (Survey) getObject(P_Survey);
        }
        return survey;
    }
    
    public void setSurvey(Survey newValue) {
        fireBeforePropertyChange(P_Survey, this.survey, newValue);
        Survey old = this.survey;
        this.survey = newValue;
        firePropertyChange(P_Survey, old, this.survey);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.text = rs.getString(3);
        this.points = (double) rs.getDouble(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, EmployeeSurvey.P_Points, true);
        }
        date = rs.getDate(5);
        if (date != null) this.approvedDate = new OADate(date);
        int employeeFkey = rs.getInt(6);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int surveyFkey = rs.getInt(7);
        if (!rs.wasNull() && surveyFkey > 0) {
            setProperty(P_Survey, new OAObjectKey(surveyFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

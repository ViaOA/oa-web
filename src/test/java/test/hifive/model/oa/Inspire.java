// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ins",
    displayName = "Inspire",
    displayProperty = "employee"
)
@OATable(
    indexes = {
        @OAIndex(name = "InspireEmployee", columns = { @OAIndexColumn(name = "EmployeeId") })
    }
)
public class Inspire extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Reason = "Reason";
    public static final String P_Reason = "Reason";
    public static final String PROPERTY_Message = "Message";
    public static final String P_Message = "Message";
     
    public static final String PROPERTY_WasAddedToEmployee = "WasAddedToEmployee";
    public static final String P_WasAddedToEmployee = "WasAddedToEmployee";
    public static final String PROPERTY_RecipientNames = "RecipientNames";
    public static final String P_RecipientNames = "RecipientNames";
     
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_InspireAwardLevel = "InspireAwardLevel";
    public static final String P_InspireAwardLevel = "InspireAwardLevel";
    public static final String PROPERTY_InspireCoreValue = "InspireCoreValue";
    public static final String P_InspireCoreValue = "InspireCoreValue";
    public static final String PROPERTY_InspireRecipients = "InspireRecipients";
    public static final String P_InspireRecipients = "InspireRecipients";
     
    protected int id;
    protected OADate created;
    protected String reason;
    protected String message;
     
    // Links to other objects.
    protected transient Email email;
    protected transient Employee employee;
    protected transient InspireAwardLevel inspireAwardLevel;
    protected transient InspireCoreValue inspireCoreValue;
    protected transient Hub<InspireRecipient> hubInspireRecipients;
     
    public Inspire() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Inspire(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 250, displayLength = 40, columnLength = 20)
    @OAColumn(maxLength = 250)
    public String getReason() {
        return reason;
    }
    
    public void setReason(String newValue) {
        fireBeforePropertyChange(P_Reason, this.reason, newValue);
        String old = reason;
        this.reason = newValue;
        firePropertyChange(P_Reason, old, this.reason);
    }
    @OAProperty(maxLength = 500, displayLength = 40, columnLength = 20)
    @OAColumn(maxLength = 500)
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String newValue) {
        fireBeforePropertyChange(P_Message, this.message, newValue);
        String old = message;
        this.message = newValue;
        firePropertyChange(P_Message, old, this.message);
    }
    @OACalculatedProperty(displayName = "Was Added To Employee", description = "Has this Inspire been added to Employee", displayLength = 5, properties = {P_Employee+"."+Employee.P_Inspires})
    public boolean getWasAddedToEmployee() {
        // employee.inspires
        Employee employee = this.getEmployee();
        if (employee != null) {
            Hub<Inspire> hubInspires = employee.getInspires();
            return hubInspires.contains(this);
        }
    
        return false;
    }
    
     
    @OACalculatedProperty(displayName = "Recipient Names", displayLength = 14)
    public String getRecipientNames() {
        String s = "";
        for (InspireRecipient ir : getInspireRecipients()) {
            Employee empx = ir.getEmployee();
            if (empx == null) continue;
            String sx = empx.getFirstLastName();
            if (s.length() > 0) s += ", ";
            s += sx;
        }
        return s;
    }
    
     
    @OAOne(
        reverseName = Email.P_Inspire, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"EmailId"})
    public Email getEmail() {
        if (email == null) {
            email = (Email) getObject(P_Email);
        }
        return email;
    }
    
    public void setEmail(Email newValue) {
        fireBeforePropertyChange(P_Email, this.email, newValue);
        Email old = this.email;
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
    
    @OAOne(
        reverseName = Employee.P_Inspires, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAOne(
        displayName = "Inspire Award Level", 
        reverseName = InspireAwardLevel.P_Inspires, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspireAwardLevelId"})
    public InspireAwardLevel getInspireAwardLevel() {
        if (inspireAwardLevel == null) {
            inspireAwardLevel = (InspireAwardLevel) getObject(P_InspireAwardLevel);
        }
        return inspireAwardLevel;
    }
    
    public void setInspireAwardLevel(InspireAwardLevel newValue) {
        fireBeforePropertyChange(P_InspireAwardLevel, this.inspireAwardLevel, newValue);
        InspireAwardLevel old = this.inspireAwardLevel;
        this.inspireAwardLevel = newValue;
        firePropertyChange(P_InspireAwardLevel, old, this.inspireAwardLevel);
    }
    
    @OAOne(
        displayName = "Inspire Core Value", 
        reverseName = InspireCoreValue.P_Inspires, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspireCoreValueId"})
    public InspireCoreValue getInspireCoreValue() {
        if (inspireCoreValue == null) {
            inspireCoreValue = (InspireCoreValue) getObject(P_InspireCoreValue);
        }
        return inspireCoreValue;
    }
    
    public void setInspireCoreValue(InspireCoreValue newValue) {
        fireBeforePropertyChange(P_InspireCoreValue, this.inspireCoreValue, newValue);
        InspireCoreValue old = this.inspireCoreValue;
        this.inspireCoreValue = newValue;
        firePropertyChange(P_InspireCoreValue, old, this.inspireCoreValue);
    }
    
    @OAMany(
        displayName = "Inspire Recipients", 
        toClass = InspireRecipient.class, 
        owner = true, 
        reverseName = InspireRecipient.P_Inspire, 
        cascadeSave = true, 
        cascadeDelete = true 
        //triggerClasses = {InspireRecipientSendEmailTrigger.class}
    )
    public Hub<InspireRecipient> getInspireRecipients() {
        if (hubInspireRecipients == null) {
            hubInspireRecipients = (Hub<InspireRecipient>) getHub(PROPERTY_InspireRecipients);
        }
        return hubInspireRecipients;
    }
    
    // updateEmail
    public void updateEmail() {
        //EmailDelegate.updateEmail(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.reason = rs.getString(3);
        this.message = rs.getString(4);
        int emailFkey = rs.getInt(5);
        if (!rs.wasNull() && emailFkey > 0) {
            setProperty(P_Email, new OAObjectKey(emailFkey));
        }
        int employeeFkey = rs.getInt(6);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int inspireAwardLevelFkey = rs.getInt(7);
        if (!rs.wasNull() && inspireAwardLevelFkey > 0) {
            setProperty(P_InspireAwardLevel, new OAObjectKey(inspireAwardLevelFkey));
        }
        int inspireCoreValueFkey = rs.getInt(8);
        if (!rs.wasNull() && inspireCoreValueFkey > 0) {
            setProperty(P_InspireCoreValue, new OAObjectKey(inspireCoreValueFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

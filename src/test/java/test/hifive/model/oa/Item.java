// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ite",
    displayName = "Item",
    displayProperty = "name",
    filterClasses = {ItemHifiveApprovedFilter.class, ItemHelpingHandsFilter.class},
    rootTreePropertyPaths = {
        "[Catalog]."+Catalog.P_Sections+"."+Section.P_Items, 
        "[ItemCategory]."+ItemCategory.P_Items, 
        "[ItemVendor]."+ItemVendor.P_Items
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ItemName", columns = {@OAIndexColumn(name = "Name")}),
        @OAIndex(name = "ItemVendorCode", columns = {@OAIndexColumn(name = "VendorCode")}),
        @OAIndex(name = "ItemVendorCode2", columns = {@OAIndexColumn(name = "VendorCode2")})
    }
)
public class Item extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_VendorCode = "VendorCode";
    public static final String P_VendorCode = "VendorCode";
    public static final String PROPERTY_VendorCode2 = "VendorCode2";
    public static final String P_VendorCode2 = "VendorCode2";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_BriefText = "BriefText";
    public static final String P_BriefText = "BriefText";
    public static final String PROPERTY_Text = "Text";
    public static final String P_Text = "Text";
    public static final String PROPERTY_DiscontinuedDate = "DiscontinuedDate";
    public static final String P_DiscontinuedDate = "DiscontinuedDate";
    public static final String PROPERTY_DiscontinuedReason = "DiscontinuedReason";
    public static final String P_DiscontinuedReason = "DiscontinuedReason";
    public static final String PROPERTY_DropShip = "DropShip";
    public static final String P_DropShip = "DropShip";
    public static final String PROPERTY_OtherInformation = "OtherInformation";
    public static final String P_OtherInformation = "OtherInformation";
    public static final String PROPERTY_Manufacturer = "Manufacturer";
    public static final String P_Manufacturer = "Manufacturer";
    public static final String PROPERTY_Model = "Model";
    public static final String P_Model = "Model";
    public static final String PROPERTY_LastUpdate = "LastUpdate";
    public static final String P_LastUpdate = "LastUpdate";
    public static final String PROPERTY_HifiveRating = "HifiveRating";
    public static final String P_HifiveRating = "HifiveRating";
    public static final String PROPERTY_HifiveRatingAsString = "HifiveRatingAsString";
    public static final String P_HifiveRatingAsString = "HifiveRatingAsString";
    public static final String PROPERTY_HifiveRatingDate = "HifiveRatingDate";
    public static final String P_HifiveRatingDate = "HifiveRatingDate";
    public static final String PROPERTY_HifiveRatingNote = "HifiveRatingNote";
    public static final String P_HifiveRatingNote = "HifiveRatingNote";
    public static final String PROPERTY_AccountNumber = "AccountNumber";
    public static final String P_AccountNumber = "AccountNumber";
     
    public static final String PROPERTY_Cost = "Cost";
    public static final String P_Cost = "Cost";
    public static final String PROPERTY_TotalCost = "TotalCost";
    public static final String P_TotalCost = "TotalCost";
    public static final String PROPERTY_HandlingCost = "HandlingCost";
    public static final String P_HandlingCost = "HandlingCost";
     
    public static final String PROPERTY_AddOnItems = "AddOnItems";
    public static final String P_AddOnItems = "AddOnItems";
    public static final String PROPERTY_AvailableAwardTypes = "AvailableAwardTypes";
    public static final String P_AvailableAwardTypes = "AvailableAwardTypes";
    public static final String PROPERTY_ExcludeAwardTypes = "ExcludeAwardTypes";
    public static final String P_ExcludeAwardTypes = "ExcludeAwardTypes";
    public static final String PROPERTY_HelpingHandAwardType = "HelpingHandAwardType";
    public static final String P_HelpingHandAwardType = "HelpingHandAwardType";
    public static final String PROPERTY_ImageStore = "ImageStore";
    public static final String P_ImageStore = "ImageStore";
    public static final String PROPERTY_IncludeAwardTypes = "IncludeAwardTypes";
    public static final String P_IncludeAwardTypes = "IncludeAwardTypes";
    public static final String PROPERTY_ItemCategories = "ItemCategories";
    public static final String P_ItemCategories = "ItemCategories";
    public static final String PROPERTY_ItemTypes = "ItemTypes";
    public static final String P_ItemTypes = "ItemTypes";
    public static final String PROPERTY_ItemVendor = "ItemVendor";
    public static final String P_ItemVendor = "ItemVendor";
    public static final String PROPERTY_Products = "Products";
    public static final String P_Products = "Products";
    public static final String PROPERTY_ReplaceItems = "ReplaceItems";
    public static final String P_ReplaceItems = "ReplaceItems";
    public static final String PROPERTY_ReplacesItems = "ReplacesItems";
    public static final String P_ReplacesItems = "ReplacesItems";
    public static final String PROPERTY_Sections = "Sections";
    public static final String P_Sections = "Sections";
     
    protected int id;
    protected OADate created;
    protected String vendorCode;
    protected String vendorCode2;
    protected String name;
    protected String briefText;
    protected String text;
    protected OADate discontinuedDate;
    protected String discontinuedReason;
    protected boolean dropShip;
    protected String otherInformation;
    protected String manufacturer;
    protected String model;
    protected OADate lastUpdate;
    protected int hifiveRating;
    public static final int HIFIVERATING_unknown = 0;
    public static final int HIFIVERATING_approved = 1;
    public static final int HIFIVERATING_unapproved = 2;
    public static final int HIFIVERATING_somePrograms = 3;
    public static final Hub<String> hubHifiveRating;
    static {
        hubHifiveRating = new Hub<String>(String.class);
        hubHifiveRating.addElement("Unknown");
        hubHifiveRating.addElement("Approved");
        hubHifiveRating.addElement("Unapproved");
        hubHifiveRating.addElement("Some Programs");
    }
    protected OADate hifiveRatingDate;
    protected String hifiveRatingNote;
    protected String accountNumber;
     
    // Links to other objects.
    protected transient ImageStore imageStore;
    protected transient Hub<ItemCategory> hubItemCategories;
    protected transient Hub<ItemType> hubItemTypes;
    protected transient ItemVendor itemVendor;
    protected transient Hub<Product> hubProducts;
    protected transient Hub<Item> hubReplaceItems;
    protected transient Hub<Item> hubReplacesItems;
    protected transient Hub<Section> hubSections;
     
    public Item() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Item(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Vendor Code", maxLength = 50, displayLength = 16, columnLength = 14)
    @OAColumn(maxLength = 50)
    public String getVendorCode() {
        return vendorCode;
    }
    
    public void setVendorCode(String newValue) {
        fireBeforePropertyChange(P_VendorCode, this.vendorCode, newValue);
        String old = vendorCode;
        this.vendorCode = newValue;
        firePropertyChange(P_VendorCode, old, this.vendorCode);
    }
    @OAProperty(displayName = "Vendor Code2", maxLength = 50, displayLength = 40, columnLength = 14)
    @OAColumn(maxLength = 50)
    public String getVendorCode2() {
        return vendorCode2;
    }
    
    public void setVendorCode2(String newValue) {
        fireBeforePropertyChange(P_VendorCode2, this.vendorCode2, newValue);
        String old = vendorCode2;
        this.vendorCode2 = newValue;
        firePropertyChange(P_VendorCode2, old, this.vendorCode2);
    }
    @OAProperty(maxLength = 75, isUnicode = true, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Brief Text", maxLength = 175, isUnicode = true, displayLength = 40)
    @OAColumn(maxLength = 175)
    public String getBriefText() {
        return briefText;
    }
    
    public void setBriefText(String newValue) {
        fireBeforePropertyChange(P_BriefText, this.briefText, newValue);
        String old = briefText;
        this.briefText = newValue;
        firePropertyChange(P_BriefText, old, this.briefText);
    }
    @OAProperty(maxLength = 4, isUnicode = true, displayLength = 4)
    @OAColumn(name = "TextValue", sqlType = java.sql.Types.CLOB)
    public String getText() {
        return text;
    }
    
    public void setText(String newValue) {
        fireBeforePropertyChange(P_Text, this.text, newValue);
        String old = text;
        this.text = newValue;
        firePropertyChange(P_Text, old, this.text);
    }
    @OAProperty(displayName = "Inactive Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDiscontinuedDate() {
        return discontinuedDate;
    }
    
    public void setDiscontinuedDate(OADate newValue) {
        fireBeforePropertyChange(P_DiscontinuedDate, this.discontinuedDate, newValue);
        OADate old = discontinuedDate;
        this.discontinuedDate = newValue;
        firePropertyChange(P_DiscontinuedDate, old, this.discontinuedDate);
    }
    @OAProperty(displayName = "Inactive Reason", maxLength = 75, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getDiscontinuedReason() {
        return discontinuedReason;
    }
    
    public void setDiscontinuedReason(String newValue) {
        fireBeforePropertyChange(P_DiscontinuedReason, this.discontinuedReason, newValue);
        String old = discontinuedReason;
        this.discontinuedReason = newValue;
        firePropertyChange(P_DiscontinuedReason, old, this.discontinuedReason);
    }
    @OAProperty(displayName = "Drop Ship", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getDropShip() {
        return dropShip;
    }
    
    public void setDropShip(boolean newValue) {
        fireBeforePropertyChange(P_DropShip, this.dropShip, newValue);
        boolean old = dropShip;
        this.dropShip = newValue;
        firePropertyChange(P_DropShip, old, this.dropShip);
    }
    @OAProperty(displayName = "Other Information", description = "game, music, book, etc", maxLength = 254, isUnicode = true, displayLength = 40)
    @OAColumn(maxLength = 254)
    /**
      game, music, book, etc
    */
    public String getOtherInformation() {
        return otherInformation;
    }
    
    public void setOtherInformation(String newValue) {
        fireBeforePropertyChange(P_OtherInformation, this.otherInformation, newValue);
        String old = otherInformation;
        this.otherInformation = newValue;
        firePropertyChange(P_OtherInformation, old, this.otherInformation);
    }
    @OAProperty(maxLength = 75, isUnicode = true, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getManufacturer() {
        return manufacturer;
    }
    
    public void setManufacturer(String newValue) {
        fireBeforePropertyChange(P_Manufacturer, this.manufacturer, newValue);
        String old = manufacturer;
        this.manufacturer = newValue;
        firePropertyChange(P_Manufacturer, old, this.manufacturer);
    }
    @OAProperty(maxLength = 55, isUnicode = true, displayLength = 12, columnLength = 10)
    @OAColumn(maxLength = 55)
    public String getModel() {
        return model;
    }
    
    public void setModel(String newValue) {
        fireBeforePropertyChange(P_Model, this.model, newValue);
        String old = model;
        this.model = newValue;
        firePropertyChange(P_Model, old, this.model);
    }
    @OAProperty(displayName = "Last Update", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getLastUpdate() {
        return lastUpdate;
    }
    
    public void setLastUpdate(OADate newValue) {
        fireBeforePropertyChange(P_LastUpdate, this.lastUpdate, newValue);
        OADate old = lastUpdate;
        this.lastUpdate = newValue;
        firePropertyChange(P_LastUpdate, old, this.lastUpdate);
    }
    @OAProperty(displayName = "Hifive Rating", displayLength = 12, columnLength = 10, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getHifiveRating() {
        return hifiveRating;
    }
    
    public void setHifiveRating(int newValue) {
        fireBeforePropertyChange(P_HifiveRating, this.hifiveRating, newValue);
        int old = hifiveRating;
        this.hifiveRating = newValue;
        firePropertyChange(P_HifiveRating, old, this.hifiveRating);
    }
    public String getHifiveRatingAsString() {
        if (isNull(P_HifiveRating)) return "";
        String s = hubHifiveRating.getAt(getHifiveRating());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Hifive Rating Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getHifiveRatingDate() {
        return hifiveRatingDate;
    }
    
    public void setHifiveRatingDate(OADate newValue) {
        fireBeforePropertyChange(P_HifiveRatingDate, this.hifiveRatingDate, newValue);
        OADate old = hifiveRatingDate;
        this.hifiveRatingDate = newValue;
        firePropertyChange(P_HifiveRatingDate, old, this.hifiveRatingDate);
    }
    @OAProperty(displayName = "Hifive Rating Note", maxLength = 245, displayLength = 40, columnLength = 25)
    @OAColumn(maxLength = 245)
    public String getHifiveRatingNote() {
        return hifiveRatingNote;
    }
    
    public void setHifiveRatingNote(String newValue) {
        fireBeforePropertyChange(P_HifiveRatingNote, this.hifiveRatingNote, newValue);
        String old = hifiveRatingNote;
        this.hifiveRatingNote = newValue;
        firePropertyChange(P_HifiveRatingNote, old, this.hifiveRatingNote);
    }
    @OAProperty(displayName = "Account Number", maxLength = 5, displayLength = 5)
    @OAColumn(maxLength = 5)
    public String getAccountNumber() {
        return accountNumber;
    }
    
    public void setAccountNumber(String newValue) {
        fireBeforePropertyChange(P_AccountNumber, this.accountNumber, newValue);
        String old = accountNumber;
        this.accountNumber = newValue;
        firePropertyChange(P_AccountNumber, old, this.accountNumber);
    }
    @OACalculatedProperty(decimalPlaces = 2, isCurrency = true, displayLength = 7, properties = {P_Products+"."+Product.P_Cost})
    public double getCost() {
        double cost = 0;
        // products.cost
        Hub<Product> hubProducts = this.getProducts();
        for (Product product : hubProducts) {
            cost = product.getCost();
            if (cost != 0.0) break;
        }
    
        return cost;
    }
    
     
    @OACalculatedProperty(displayName = "Total Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7, properties = {P_Products+"."+Product.P_TotalCost})
    public double getTotalCost() {
        double totalCost = 0; 
        // products.totalCost
        Hub<Product> hubProducts = this.getProducts();
        for (Product product : hubProducts) {
            totalCost = product.getTotalCost();
            if (totalCost != 0) break;
        }
    
        return totalCost;
    }
    
     
    @OACalculatedProperty(displayName = "Handling Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7, properties = {P_Products+"."+Product.P_HandlingCost})
    public double getHandlingCost() {
        double handlingCost = 0;
        // products.handlingCost
        Hub<Product> hubProducts = this.getProducts();
        for (Product product : hubProducts) {
            handlingCost = product.getHandlingCost();
            if (handlingCost > 0) break;
        }
    
        return handlingCost;
    }
    
     
    @OAMany(
        displayName = "Add On Items", 
        toClass = AddOnItem.class, 
        reverseName = AddOnItem.P_Item, 
        createMethod = false
    )
    private Hub<AddOnItem> getAddOnItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Available Award Types", 
        toClass = AwardType.class, 
        isCalculated = true, 
        reverseName = AwardType.P_AvailableItems, 
        createMethod = false
    )
    private Hub<AwardType> getAvailableAwardTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Exclude Award Types", 
        toClass = AwardType.class, 
        reverseName = AwardType.P_ExcludeItems, 
        createMethod = false
    )
    @OALinkTable(name = "AwardTypeExcludeItem", indexName = "AwardTypeExcludeItem", columns = {"ItemId"})
    private Hub<AwardType> getExcludeAwardTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Helping Hand Award Type", 
        isCalculated = true, 
        reverseName = AwardType.P_AvailableHelpingHandItems, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private AwardType getHelpingHandAwardType() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Image", 
        owner = true, 
        reverseName = ImageStore.P_Item, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ImageStoreId"})
    public ImageStore getImageStore() {
        if (imageStore == null) {
            imageStore = (ImageStore) getObject(P_ImageStore);
        }
        return imageStore;
    }
    
    public void setImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_ImageStore, this.imageStore, newValue);
        ImageStore old = this.imageStore;
        this.imageStore = newValue;
        firePropertyChange(P_ImageStore, old, this.imageStore);
    }
    
    @OAMany(
        displayName = "Include Award Types", 
        toClass = AwardType.class, 
        reverseName = AwardType.P_IncludeItems, 
        createMethod = false
    )
    @OALinkTable(name = "AwardTypeIncludeItem", indexName = "AwardTypeIncludeItem", columns = {"ItemId"})
    private Hub<AwardType> getIncludeAwardTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Item Categories", 
        toClass = ItemCategory.class, 
        recursive = false, 
        reverseName = ItemCategory.P_Items
    )
    @OALinkTable(name = "ItemCategoryItem", indexName = "ItemCategoryItem", columns = {"ItemId"})
    public Hub<ItemCategory> getItemCategories() {
        if (hubItemCategories == null) {
            hubItemCategories = (Hub<ItemCategory>) getHub(P_ItemCategories);
        }
        return hubItemCategories;
    }
    
    @OAMany(
        displayName = "Item Types", 
        toClass = ItemType.class, 
        reverseName = ItemType.P_Items
    )
    @OALinkTable(name = "ItemTypeItem", indexName = "ItemTypeItem", columns = {"ItemId"})
    public Hub<ItemType> getItemTypes() {
        if (hubItemTypes == null) {
            hubItemTypes = (Hub<ItemType>) getHub(P_ItemTypes);
        }
        return hubItemTypes;
    }
    
    @OAOne(
        displayName = "Vendor", 
        reverseName = ItemVendor.P_Items, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ItemVendorId"})
    public ItemVendor getItemVendor() {
        if (itemVendor == null) {
            itemVendor = (ItemVendor) getObject(P_ItemVendor);
        }
        return itemVendor;
    }
    
    public void setItemVendor(ItemVendor newValue) {
        fireBeforePropertyChange(P_ItemVendor, this.itemVendor, newValue);
        ItemVendor old = this.itemVendor;
        this.itemVendor = newValue;
        firePropertyChange(P_ItemVendor, old, this.itemVendor);
    }
    
    @OAMany(
        toClass = Product.class, 
        owner = true, 
        reverseName = Product.P_Item, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Product> getProducts() {
        if (hubProducts == null) {
            hubProducts = (Hub<Product>) getHub(P_Products);
        }
        return hubProducts;
    }
    
    @OAMany(
        displayName = "Replace Items", 
        toClass = Item.class, 
        reverseName = Item.P_ReplacesItems
    )
    @OALinkTable(name = "ReplaceItemItem", indexName = "ItemReplacesItem", columns = {"ItemId"})
    public Hub<Item> getReplaceItems() {
        if (hubReplaceItems == null) {
            hubReplaceItems = (Hub<Item>) getHub(P_ReplaceItems);
        }
        return hubReplaceItems;
    }
    
    @OAMany(
        displayName = "Replaces Items", 
        toClass = Item.class, 
        reverseName = Item.P_ReplaceItems
    )
    @OALinkTable(name = "ReplaceItemItem", indexName = "ItemReplaceItem", columns = {"ItemId2"})
    public Hub<Item> getReplacesItems() {
        if (hubReplacesItems == null) {
            hubReplacesItems = (Hub<Item>) getHub(P_ReplacesItems);
        }
        return hubReplacesItems;
    }
    
    @OAMany(
        toClass = Section.class, 
        recursive = false, 
        reverseName = Section.P_Items
    )
    @OALinkTable(name = "SectionItem", indexName = "SectionItem", columns = {"ItemId"})
    public Hub<Section> getSections() {
        if (hubSections == null) {
            hubSections = (Hub<Section>) getHub(P_Sections);
        }
        return hubSections;
    }
    
    // makeApprovedIfNull - flag as Hi5 approved item
    public void makeApprovedIfNull() {
        int x = getHifiveRating();
        if (x == 0) {
            setHifiveRating(HIFIVERATING_approved);
        }
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.vendorCode = rs.getString(3);
        this.vendorCode2 = rs.getString(4);
        this.name = rs.getString(5);
        this.briefText = rs.getString(6);
        this.text = rs.getString(7);
        date = rs.getDate(8);
        if (date != null) this.discontinuedDate = new OADate(date);
        this.discontinuedReason = rs.getString(9);
        this.dropShip = rs.getBoolean(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_DropShip, true);
        }
        this.otherInformation = rs.getString(11);
        this.manufacturer = rs.getString(12);
        this.model = rs.getString(13);
        date = rs.getDate(14);
        if (date != null) this.lastUpdate = new OADate(date);
        this.hifiveRating = (int) rs.getInt(15);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Item.P_HifiveRating, true);
        }
        date = rs.getDate(16);
        if (date != null) this.hifiveRatingDate = new OADate(date);
        this.hifiveRatingNote = rs.getString(17);
        this.accountNumber = rs.getString(18);
        int imageStoreFkey = rs.getInt(19);
        if (!rs.wasNull() && imageStoreFkey > 0) {
            setProperty(P_ImageStore, new OAObjectKey(imageStoreFkey));
        }
        int itemVendorFkey = rs.getInt(20);
        if (!rs.wasNull() && itemVendorFkey > 0) {
            setProperty(P_ItemVendor, new OAObjectKey(itemVendorFkey));
        }
        if (rs.getMetaData().getColumnCount() != 20) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

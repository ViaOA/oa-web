// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ots",
    displayName = "Order Tracking Status",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "OrderTrackingStatusOrderTracking", columns = { @OAIndexColumn(name = "OrderTrackingId") })
    }
)
public class OrderTrackingStatus extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_Note = "Note";
    public static final String P_Note = "Note";
    public static final String PROPERTY_EmailAddress = "EmailAddress";
    public static final String P_EmailAddress = "EmailAddress";
    public static final String PROPERTY_EmailText = "EmailText";
    public static final String P_EmailText = "EmailText";
    public static final String PROPERTY_EmailDate = "EmailDate";
    public static final String P_EmailDate = "EmailDate";
     
     
    public static final String PROPERTY_OrderTracking = "OrderTracking";
    public static final String P_OrderTracking = "OrderTracking";
     
    protected int id;
    protected OADate created;
    protected String description;
    protected String note;
    protected String emailAddress;
    protected String emailText;
    protected OADate emailDate;
     
    // Links to other objects.
    protected transient OrderTracking orderTracking;
     
    public OrderTrackingStatus() {
    }
     
    public OrderTrackingStatus(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 45, displayLength = 20, columnLength = 14)
    @OAColumn(maxLength = 45)
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String newValue) {
        fireBeforePropertyChange(P_Description, this.description, newValue);
        String old = description;
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(maxLength = 4, displayLength = 4)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNote() {
        return note;
    }
    
    public void setNote(String newValue) {
        fireBeforePropertyChange(P_Note, this.note, newValue);
        String old = note;
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
    @OAProperty(displayName = "Email Address", maxLength = 75, displayLength = 25, columnLength = 15)
    @OAColumn(maxLength = 75)
    public String getEmailAddress() {
        return emailAddress;
    }
    
    public void setEmailAddress(String newValue) {
        fireBeforePropertyChange(P_EmailAddress, this.emailAddress, newValue);
        String old = emailAddress;
        this.emailAddress = newValue;
        firePropertyChange(P_EmailAddress, old, this.emailAddress);
    }
    @OAProperty(displayName = "Email Text", maxLength = 9, displayLength = 9)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getEmailText() {
        return emailText;
    }
    
    public void setEmailText(String newValue) {
        fireBeforePropertyChange(P_EmailText, this.emailText, newValue);
        String old = emailText;
        this.emailText = newValue;
        firePropertyChange(P_EmailText, old, this.emailText);
    }
    @OAProperty(displayName = "Email Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getEmailDate() {
        return emailDate;
    }
    
    public void setEmailDate(OADate newValue) {
        fireBeforePropertyChange(P_EmailDate, this.emailDate, newValue);
        OADate old = emailDate;
        this.emailDate = newValue;
        firePropertyChange(P_EmailDate, old, this.emailDate);
    }
    @OAOne(
        displayName = "Order Tracking", 
        reverseName = OrderTracking.P_OrderTrackingStatuses, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"OrderTrackingId"})
    public OrderTracking getOrderTracking() {
        if (orderTracking == null) {
            orderTracking = (OrderTracking) getObject(P_OrderTracking);
        }
        return orderTracking;
    }
    
    public void setOrderTracking(OrderTracking newValue) {
        fireBeforePropertyChange(P_OrderTracking, this.orderTracking, newValue);
        OrderTracking old = this.orderTracking;
        this.orderTracking = newValue;
        firePropertyChange(P_OrderTracking, old, this.orderTracking);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.description = rs.getString(3);
        this.note = rs.getString(4);
        this.emailAddress = rs.getString(5);
        this.emailText = rs.getString(6);
        date = rs.getDate(7);
        if (date != null) this.emailDate = new OADate(date);
        int orderTrackingFkey = rs.getInt(8);
        if (!rs.wasNull() && orderTrackingFkey > 0) {
            setProperty(P_OrderTracking, new OAObjectKey(orderTrackingFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

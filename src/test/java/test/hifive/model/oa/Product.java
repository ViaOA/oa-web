// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pro",
    displayName = "Product",
    displayProperty = "vendorCode"
)
@OATable(
    indexes = {
        @OAIndex(name = "ProductVendorCode", columns = {@OAIndexColumn(name = "VendorCode")}),
        @OAIndex(name = "ProductItem", columns = { @OAIndexColumn(name = "ItemId") })
    }
)
public class Product extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_VendorCode = "VendorCode";
    public static final String P_VendorCode = "VendorCode";
    public static final String PROPERTY_Attribute = "Attribute";
    public static final String P_Attribute = "Attribute";
    public static final String PROPERTY_Cost = "Cost";
    public static final String P_Cost = "Cost";
    public static final String PROPERTY_HandlingCost = "HandlingCost";
    public static final String P_HandlingCost = "HandlingCost";
    public static final String PROPERTY_ShippingCost = "ShippingCost";
    public static final String P_ShippingCost = "ShippingCost";
    public static final String PROPERTY_TotalCost = "TotalCost";
    public static final String P_TotalCost = "TotalCost";
    public static final String PROPERTY_DiscontinuedDate = "DiscontinuedDate";
    public static final String P_DiscontinuedDate = "DiscontinuedDate";
    public static final String PROPERTY_DiscontinuedReason = "DiscontinuedReason";
    public static final String P_DiscontinuedReason = "DiscontinuedReason";
    public static final String PROPERTY_LastUpdate = "LastUpdate";
    public static final String P_LastUpdate = "LastUpdate";
    public static final String PROPERTY_Msrp = "Msrp";
    public static final String P_Msrp = "Msrp";
    public static final String PROPERTY_StreetValue = "StreetValue";
    public static final String P_StreetValue = "StreetValue";
     
     
    public static final String PROPERTY_AddOnProductEmployeeAwards = "AddOnProductEmployeeAwards";
    public static final String P_AddOnProductEmployeeAwards = "AddOnProductEmployeeAwards";
    public static final String PROPERTY_AwardTypes = "AwardTypes";
    public static final String P_AwardTypes = "AwardTypes";
    public static final String PROPERTY_EmployeeAwards = "EmployeeAwards";
    public static final String P_EmployeeAwards = "EmployeeAwards";
    public static final String PROPERTY_HifiveOrderItems = "HifiveOrderItems";
    public static final String P_HifiveOrderItems = "HifiveOrderItems";
    public static final String PROPERTY_InspireOrderItems = "InspireOrderItems";
    public static final String P_InspireOrderItems = "InspireOrderItems";
    public static final String PROPERTY_Item = "Item";
    public static final String P_Item = "Item";
    public static final String PROPERTY_ProductAudits = "ProductAudits";
    public static final String P_ProductAudits = "ProductAudits";
     
    protected int id;
    protected String vendorCode;
    protected String attribute;
    protected double cost;
    protected double handlingCost;
    protected double shippingCost;
    protected double totalCost;
    protected OADate discontinuedDate;
    protected String discontinuedReason;
    protected OADate lastUpdate;
    protected double msrp;
    protected double streetValue;
     
    // Links to other objects.
    protected transient Item item;
    protected transient Hub<ProductAudit> hubProductAudits;
     
    public Product() {
    }
     
    public Product(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Code", maxLength = 55, displayLength = 15, columnLength = 10)
    @OAColumn(maxLength = 55)
    public String getVendorCode() {
        return vendorCode;
    }
    
    public void setVendorCode(String newValue) {
        fireBeforePropertyChange(P_VendorCode, this.vendorCode, newValue);
        String old = vendorCode;
        this.vendorCode = newValue;
        firePropertyChange(P_VendorCode, old, this.vendorCode);
    }
    @OAProperty(displayName = "Attribute Value", maxLength = 35, isUnicode = true, displayLength = 20, columnLength = 14)
    @OAColumn(maxLength = 35)
    public String getAttribute() {
        return attribute;
    }
    
    public void setAttribute(String newValue) {
        fireBeforePropertyChange(P_Attribute, this.attribute, newValue);
        String old = attribute;
        this.attribute = newValue;
        firePropertyChange(P_Attribute, old, this.attribute);
    }
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCost() {
        return cost;
    }
    
    public void setCost(double newValue) {
        fireBeforePropertyChange(P_Cost, this.cost, newValue);
        double old = cost;
        this.cost = newValue;
        firePropertyChange(P_Cost, old, this.cost);
    }
    @OAProperty(displayName = "Handling Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getHandlingCost() {
        return handlingCost;
    }
    
    public void setHandlingCost(double newValue) {
        fireBeforePropertyChange(P_HandlingCost, this.handlingCost, newValue);
        double old = handlingCost;
        this.handlingCost = newValue;
        firePropertyChange(P_HandlingCost, old, this.handlingCost);
    }
    @OAProperty(displayName = "Shipping Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getShippingCost() {
        return shippingCost;
    }
    
    public void setShippingCost(double newValue) {
        fireBeforePropertyChange(P_ShippingCost, this.shippingCost, newValue);
        double old = shippingCost;
        this.shippingCost = newValue;
        firePropertyChange(P_ShippingCost, old, this.shippingCost);
    }
    @OAProperty(displayName = "Total Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getTotalCost() {
        return totalCost;
    }
    
    public void setTotalCost(double newValue) {
        fireBeforePropertyChange(P_TotalCost, this.totalCost, newValue);
        double old = totalCost;
        this.totalCost = newValue;
        firePropertyChange(P_TotalCost, old, this.totalCost);
    }
    @OAProperty(displayName = "Inactive Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getDiscontinuedDate() {
        return discontinuedDate;
    }
    
    public void setDiscontinuedDate(OADate newValue) {
        fireBeforePropertyChange(P_DiscontinuedDate, this.discontinuedDate, newValue);
        OADate old = discontinuedDate;
        this.discontinuedDate = newValue;
        firePropertyChange(P_DiscontinuedDate, old, this.discontinuedDate);
    }
    @OAProperty(displayName = "Inactive Reason", maxLength = 75, displayLength = 40, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getDiscontinuedReason() {
        return discontinuedReason;
    }
    
    public void setDiscontinuedReason(String newValue) {
        fireBeforePropertyChange(P_DiscontinuedReason, this.discontinuedReason, newValue);
        String old = discontinuedReason;
        this.discontinuedReason = newValue;
        firePropertyChange(P_DiscontinuedReason, old, this.discontinuedReason);
    }
    @OAProperty(displayName = "Last Update", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getLastUpdate() {
        return lastUpdate;
    }
    
    public void setLastUpdate(OADate newValue) {
        fireBeforePropertyChange(P_LastUpdate, this.lastUpdate, newValue);
        OADate old = lastUpdate;
        this.lastUpdate = newValue;
        firePropertyChange(P_LastUpdate, old, this.lastUpdate);
    }
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 7, columnLength = 5)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getMsrp() {
        return msrp;
    }
    
    public void setMsrp(double newValue) {
        fireBeforePropertyChange(P_Msrp, this.msrp, newValue);
        double old = msrp;
        this.msrp = newValue;
        firePropertyChange(P_Msrp, old, this.msrp);
    }
    @OAProperty(displayName = "Street Value", decimalPlaces = 2, isCurrency = true, displayLength = 7, columnLength = 5)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getStreetValue() {
        return streetValue;
    }
    
    public void setStreetValue(double newValue) {
        fireBeforePropertyChange(P_StreetValue, this.streetValue, newValue);
        double old = streetValue;
        this.streetValue = newValue;
        firePropertyChange(P_StreetValue, old, this.streetValue);
    }
    @OAMany(
        displayName = "Add On Product Employee Awards", 
        toClass = EmployeeAward.class, 
        reverseName = EmployeeAward.P_AddOnProduct, 
        createMethod = false
    )
    private Hub<EmployeeAward> getAddOnProductEmployeeAwards() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Award Types", 
        toClass = AwardType.class, 
        reverseName = AwardType.P_PackageProducts, 
        createMethod = false
    )
    @OALinkTable(name = "AwardTypeProduct", indexName = "AwardTypePackageProduct", columns = {"ProductId"})
    private Hub<AwardType> getAwardTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Employee Awards", 
        toClass = EmployeeAward.class, 
        reverseName = EmployeeAward.P_Product, 
        createMethod = false
    )
    private Hub<EmployeeAward> getEmployeeAwards() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Hifive Order Items", 
        toClass = HifiveOrderItem.class, 
        reverseName = HifiveOrderItem.P_Product, 
        createMethod = false
    )
    private Hub<HifiveOrderItem> getHifiveOrderItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Inspire Order Items", 
        toClass = InspireOrderItem.class, 
        reverseName = InspireOrderItem.P_Product, 
        createMethod = false
    )
    private Hub<InspireOrderItem> getInspireOrderItems() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Item.P_Products, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ItemId"})
    public Item getItem() {
        if (item == null) {
            item = (Item) getObject(P_Item);
        }
        return item;
    }
    
    public void setItem(Item newValue) {
        fireBeforePropertyChange(P_Item, this.item, newValue);
        Item old = this.item;
        this.item = newValue;
        firePropertyChange(P_Item, old, this.item);
    }
    
    @OAMany(
        displayName = "Product Audits", 
        toClass = ProductAudit.class, 
        owner = true, 
        reverseName = ProductAudit.P_Product, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<ProductAudit> getProductAudits() {
        if (hubProductAudits == null) {
            hubProductAudits = (Hub<ProductAudit>) getHub(P_ProductAudits);
        }
        return hubProductAudits;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.vendorCode = rs.getString(2);
        this.attribute = rs.getString(3);
        this.cost = (double) rs.getDouble(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Product.P_Cost, true);
        }
        this.handlingCost = (double) rs.getDouble(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Product.P_HandlingCost, true);
        }
        this.shippingCost = (double) rs.getDouble(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Product.P_ShippingCost, true);
        }
        this.totalCost = (double) rs.getDouble(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Product.P_TotalCost, true);
        }
        java.sql.Date date;
        date = rs.getDate(8);
        if (date != null) this.discontinuedDate = new OADate(date);
        this.discontinuedReason = rs.getString(9);
        date = rs.getDate(10);
        if (date != null) this.lastUpdate = new OADate(date);
        this.msrp = (double) rs.getDouble(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Product.P_Msrp, true);
        }
        this.streetValue = (double) rs.getDouble(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Product.P_StreetValue, true);
        }
        int itemFkey = rs.getInt(13);
        if (!rs.wasNull() && itemFkey > 0) {
            setProperty(P_Item, new OAObjectKey(itemFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

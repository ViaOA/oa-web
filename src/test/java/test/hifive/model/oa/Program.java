// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pro",
    displayName = "Program",
    displayProperty = "name",
    sortProperty = "name",
    filterClasses = {ProgramActiveFilter.class},
    rootTreePropertyPaths = {
        "[Company]."+Company.P_Programs
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ProgramCode", columns = {@OAIndexColumn(name = "Code")}),
        @OAIndex(name = "ProgramCompany", columns = { @OAIndexColumn(name = "CompanyId") }), 
        @OAIndex(name = "ProgramInspireAwardType", columns = { @OAIndexColumn(name = "InspireAwardTypeId") }), 
        @OAIndex(name = "ProgramLoginImageSet", columns = { @OAIndexColumn(name = "LoginImageSetId") }), 
        @OAIndex(name = "ProgramManagerHifiveSurvey", columns = { @OAIndexColumn(name = "ManagerHifiveSurveyId") }), 
        @OAIndex(name = "ProgramPageTheme", columns = { @OAIndexColumn(name = "PageThemeId") }), 
        @OAIndex(name = "ProgramPointsConfiguration", columns = { @OAIndexColumn(name = "PointsConfigurationId") })
    }
)
public class Program extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_BeginDate = "BeginDate";
    public static final String P_BeginDate = "BeginDate";
    public static final String PROPERTY_EndDate = "EndDate";
    public static final String P_EndDate = "EndDate";
    public static final String PROPERTY_AwardBeginDate = "AwardBeginDate";
    public static final String P_AwardBeginDate = "AwardBeginDate";
    public static final String PROPERTY_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate = "InactiveDate";
    public static final String PROPERTY_UrlName = "UrlName";
    public static final String P_UrlName = "UrlName";
    public static final String PROPERTY_FromEmailAddress = "FromEmailAddress";
    public static final String P_FromEmailAddress = "FromEmailAddress";
    public static final String PROPERTY_PointsName = "PointsName";
    public static final String P_PointsName = "PointsName";
    public static final String PROPERTY_PointValue = "PointValue";
    public static final String P_PointValue = "PointValue";
    public static final String PROPERTY_UsesInspire = "UsesInspire";
    public static final String P_UsesInspire = "UsesInspire";
    public static final String PROPERTY_UsesHifive = "UsesHifive";
    public static final String P_UsesHifive = "UsesHifive";
    public static final String PROPERTY_UsesSurveys = "UsesSurveys";
    public static final String P_UsesSurveys = "UsesSurveys";
    public static final String PROPERTY_EcardType = "EcardType";
    public static final String P_EcardType = "EcardType";
    public static final String PROPERTY_EcardTypeAsString = "EcardTypeAsString";
    public static final String P_EcardTypeAsString = "EcardTypeAsString";
    public static final String PROPERTY_HifiveName = "HifiveName";
    public static final String P_HifiveName = "HifiveName";
    public static final String PROPERTY_BirthdayDisplayDays = "BirthdayDisplayDays";
    public static final String P_BirthdayDisplayDays = "BirthdayDisplayDays";
    public static final String PROPERTY_AnniversaryDisplayDays = "AnniversaryDisplayDays";
    public static final String P_AnniversaryDisplayDays = "AnniversaryDisplayDays";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
    public static final String PROPERTY_LoginMessage = "LoginMessage";
    public static final String P_LoginMessage = "LoginMessage";
    public static final String PROPERTY_EmployeeAwardExpireDays = "EmployeeAwardExpireDays";
    public static final String P_EmployeeAwardExpireDays = "EmployeeAwardExpireDays";
    public static final String PROPERTY_CharityGoal = "CharityGoal";
    public static final String P_CharityGoal = "CharityGoal";
    public static final String PROPERTY_CharityTotal = "CharityTotal";
    public static final String P_CharityTotal = "CharityTotal";
    public static final String PROPERTY_ItemUpcharge = "ItemUpcharge";
    public static final String P_ItemUpcharge = "ItemUpcharge";
    public static final String PROPERTY_CardUpcharge = "CardUpcharge";
    public static final String P_CardUpcharge = "CardUpcharge";
    public static final String PROPERTY_CharityUpcharge = "CharityUpcharge";
    public static final String P_CharityUpcharge = "CharityUpcharge";
    public static final String PROPERTY_CashUpcharge = "CashUpcharge";
    public static final String P_CashUpcharge = "CashUpcharge";
    public static final String PROPERTY_TestEmail = "TestEmail";
    public static final String P_TestEmail = "TestEmail";
    public static final String PROPERTY_UseAdvancedReports = "UseAdvancedReports";
    public static final String P_UseAdvancedReports = "UseAdvancedReports";
    public static final String PROPERTY_PacketInstructions = "PacketInstructions";
    public static final String P_PacketInstructions = "PacketInstructions";
    public static final String PROPERTY_SsoFailureUrl = "SsoFailureUrl";
    public static final String P_SsoFailureUrl = "SsoFailureUrl";
    public static final String PROPERTY_SsoCode = "SsoCode";
    public static final String P_SsoCode = "SsoCode";
    public static final String PROPERTY_SsoRedirectUrl = "SsoRedirectUrl";
    public static final String P_SsoRedirectUrl = "SsoRedirectUrl";
    public static final String PROPERTY_UsesPoints = "UsesPoints";
    public static final String P_UsesPoints = "UsesPoints";
    public static final String PROPERTY_PointsBillingType = "PointsBillingType";
    public static final String P_PointsBillingType = "PointsBillingType";
    public static final String PROPERTY_PointsBillingTypeAsString = "PointsBillingTypeAsString";
    public static final String P_PointsBillingTypeAsString = "PointsBillingTypeAsString";
    public static final String PROPERTY_SsoLogoutUrl = "SsoLogoutUrl";
    public static final String P_SsoLogoutUrl = "SsoLogoutUrl";
    public static final String PROPERTY_UsesPeerToPeer = "UsesPeerToPeer";
    public static final String P_UsesPeerToPeer = "UsesPeerToPeer";
    public static final String PROPERTY_UsesDiscretionary = "UsesDiscretionary";
    public static final String P_UsesDiscretionary = "UsesDiscretionary";
    public static final String PROPERTY_EmployeeAwardDaysBefore = "EmployeeAwardDaysBefore";
    public static final String P_EmployeeAwardDaysBefore = "EmployeeAwardDaysBefore";
    public static final String PROPERTY_CompanyPaysShipping = "CompanyPaysShipping";
    public static final String P_CompanyPaysShipping = "CompanyPaysShipping";
    public static final String PROPERTY_UsesNominations = "UsesNominations";
    public static final String P_UsesNominations = "UsesNominations";
    public static final String PROPERTY_UsesManagerToolkit = "UsesManagerToolkit";
    public static final String P_UsesManagerToolkit = "UsesManagerToolkit";
     
    public static final String PROPERTY_CalcCharityTotal = "CalcCharityTotal";
    public static final String P_CalcCharityTotal = "CalcCharityTotal";
    public static final String PROPERTY_ProgramPoints = "ProgramPoints";
    public static final String P_ProgramPoints = "ProgramPoints";
     
    public static final String PROPERTY_AddOnItems = "AddOnItems";
    public static final String P_AddOnItems = "AddOnItems";
    public static final String PROPERTY_AnniversaryEmployees = "AnniversaryEmployees";
    public static final String P_AnniversaryEmployees = "AnniversaryEmployees";
    public static final String PROPERTY_AnnouncementDocument = "AnnouncementDocument";
    public static final String P_AnnouncementDocument = "AnnouncementDocument";
    public static final String PROPERTY_AwardTypes = "AwardTypes";
    public static final String P_AwardTypes = "AwardTypes";
    public static final String PROPERTY_BlogDocuments = "BlogDocuments";
    public static final String P_BlogDocuments = "BlogDocuments";
    public static final String PROPERTY_Cards = "Cards";
    public static final String P_Cards = "Cards";
    public static final String PROPERTY_CeoImageStore = "CeoImageStore";
    public static final String P_CeoImageStore = "CeoImageStore";
    public static final String PROPERTY_CeoSignatureImageStore = "CeoSignatureImageStore";
    public static final String P_CeoSignatureImageStore = "CeoSignatureImageStore";
    public static final String PROPERTY_Charities = "Charities";
    public static final String P_Charities = "Charities";
    public static final String PROPERTY_Company = "Company";
    public static final String P_Company = "Company";
    public static final String PROPERTY_CountryCode = "CountryCode";
    public static final String P_CountryCode = "CountryCode";
    public static final String PROPERTY_CustomData = "CustomData";
    public static final String P_CustomData = "CustomData";
    public static final String PROPERTY_Ecards = "Ecards";
    public static final String P_Ecards = "Ecards";
    public static final String PROPERTY_Employees = "Employees";
    public static final String P_Employees = "Employees";
    public static final String PROPERTY_HifiveQualities = "HifiveQualities";
    public static final String P_HifiveQualities = "HifiveQualities";
    public static final String PROPERTY_HifiveReasons = "HifiveReasons";
    public static final String P_HifiveReasons = "HifiveReasons";
    public static final String PROPERTY_ImageStores = "ImageStores";
    public static final String P_ImageStores = "ImageStores";
    public static final String PROPERTY_ImagineCard = "ImagineCard";
    public static final String P_ImagineCard = "ImagineCard";
    public static final String PROPERTY_InspireAwardLevels = "InspireAwardLevels";
    public static final String P_InspireAwardLevels = "InspireAwardLevels";
    public static final String PROPERTY_InspireAwardType = "InspireAwardType";
    public static final String P_InspireAwardType = "InspireAwardType";
    public static final String PROPERTY_InspireCoreValues = "InspireCoreValues";
    public static final String P_InspireCoreValues = "InspireCoreValues";
    public static final String PROPERTY_Locations = "Locations";
    public static final String P_Locations = "Locations";
    public static final String PROPERTY_LoginImageSet = "LoginImageSet";
    public static final String P_LoginImageSet = "LoginImageSet";
    public static final String PROPERTY_LogoImageStores = "LogoImageStores";
    public static final String P_LogoImageStores = "LogoImageStores";
    public static final String PROPERTY_LogoStampImageStore = "LogoStampImageStore";
    public static final String P_LogoStampImageStore = "LogoStampImageStore";
    public static final String PROPERTY_ManagerHifiveSurvey = "ManagerHifiveSurvey";
    public static final String P_ManagerHifiveSurvey = "ManagerHifiveSurvey";
    public static final String PROPERTY_NominationQuiz = "NominationQuiz";
    public static final String P_NominationQuiz = "NominationQuiz";
    public static final String PROPERTY_PageTheme = "PageTheme";
    public static final String P_PageTheme = "PageTheme";
    public static final String PROPERTY_PointsAwardLevels = "PointsAwardLevels";
    public static final String P_PointsAwardLevels = "PointsAwardLevels";
    public static final String PROPERTY_PointsConfiguration = "PointsConfiguration";
    public static final String P_PointsConfiguration = "PointsConfiguration";
    public static final String PROPERTY_PointsCoreValues = "PointsCoreValues";
    public static final String P_PointsCoreValues = "PointsCoreValues";
    public static final String PROPERTY_PointsFromRecord = "PointsFromRecord";
    public static final String P_PointsFromRecord = "PointsFromRecord";
    public static final String PROPERTY_ProgramEmailTypes = "ProgramEmailTypes";
    public static final String P_ProgramEmailTypes = "ProgramEmailTypes";
    public static final String PROPERTY_ProgramEvents = "ProgramEvents";
    public static final String P_ProgramEvents = "ProgramEvents";
    public static final String PROPERTY_ProgramFaqs = "ProgramFaqs";
    public static final String P_ProgramFaqs = "ProgramFaqs";
    public static final String PROPERTY_ProgramPageGroups = "ProgramPageGroups";
    public static final String P_ProgramPageGroups = "ProgramPageGroups";
    public static final String PROPERTY_ProgramPageInfos = "ProgramPageInfos";
    public static final String P_ProgramPageInfos = "ProgramPageInfos";
    public static final String PROPERTY_QuizSurveys = "QuizSurveys";
    public static final String P_QuizSurveys = "QuizSurveys";
    public static final String PROPERTY_RecentInspireRecipients = "RecentInspireRecipients";
    public static final String P_RecentInspireRecipients = "RecentInspireRecipients";
    public static final String PROPERTY_Surveys = "Surveys";
    public static final String P_Surveys = "Surveys";
    public static final String PROPERTY_Widgets = "Widgets";
    public static final String P_Widgets = "Widgets";
     
    protected int id;
    protected OADate created;
    protected String code;
    protected String name;
    protected OADate beginDate;
    protected OADate endDate;
    protected OADate awardBeginDate;
    protected OADate inactiveDate;
    protected String urlName;
    protected String fromEmailAddress;
    protected String pointsName;
    protected double pointValue;
    protected boolean usesInspire;
    protected boolean usesHifive;
    protected boolean usesSurveys;
    protected int ecardType;
    public static final int ECARDTYPE_NotUsed = 0;
    public static final int ECARDTYPE_EmployeesOnly = 1;
    public static final int ECARDTYPE_Anyone = 2;
    public static final Hub<String> hubEcardType;
    static {
        hubEcardType = new Hub<String>(String.class);
        hubEcardType.addElement("Not Used");
        hubEcardType.addElement("Employees Only");
        hubEcardType.addElement("Anyone");
    }
    protected String hifiveName;
    protected int birthdayDisplayDays;
    protected int anniversaryDisplayDays;
    protected int seq;
    protected String loginMessage;
    protected int employeeAwardExpireDays;
    protected double charityGoal;
    protected double charityTotal;
    protected double itemUpcharge;
    protected double cardUpcharge;
    protected double charityUpcharge;
    protected double cashUpcharge;
    protected String testEmail;
    protected boolean useAdvancedReports;
    protected String packetInstructions;
    protected String ssoFailureUrl;
    protected String ssoCode;
    protected String ssoRedirectUrl;
    protected boolean usesPoints;
    protected int pointsBillingType;
    public static final int POINTSBILLINGTYPE_Unknown = 0;
    public static final int POINTSBILLINGTYPE_BillOnRedemption = 1;
    public static final int POINTSBILLINGTYPE_BillOnIssuance = 2;
    public static final Hub<String> hubPointsBillingType;
    static {
        hubPointsBillingType = new Hub<String>(String.class);
        hubPointsBillingType.addElement("Unknown");
        hubPointsBillingType.addElement("Bill On Redemption");
        hubPointsBillingType.addElement("Bill On Issuance");
    }
    protected String ssoLogoutUrl;
    protected boolean usesPeerToPeer;
    protected boolean usesDiscretionary;
    protected int employeeAwardDaysBefore;
    protected boolean companyPaysShipping;
    protected boolean usesNominations;
    protected boolean usesManagerToolkit;
     
    // Links to other objects.
    protected transient Hub<AddOnItem> hubAddOnItems;
    protected transient Hub<Employee> hubAnniversaryEmployees;
    protected transient ProgramDocument announcementDocument;
    protected transient Hub<AwardType> hubAwardTypes;
    protected transient Hub<ProgramDocument> hubBlogDocuments;
    protected transient Hub<Card> hubCards;
    protected transient ImageStore ceoImageStore;
    protected transient ImageStore ceoSignatureImageStore;
    protected transient Hub<Charity> hubCharities;
    protected transient Company company;
    protected transient CountryCode countryCode;
    protected transient Hub<CustomData> hubCustomData;
    protected transient Hub<Ecard> hubEcards;
    protected transient Hub<Employee> hubEmployees;
    protected transient Hub<HifiveQuality> hubHifiveQualities;
    protected transient Hub<HifiveReason> hubHifiveReasons;
    protected transient Hub<ImageStore> hubImageStores;
    protected transient Card imagineCard;
    protected transient Hub<InspireAwardLevel> hubInspireAwardLevels;
    protected transient AwardType inspireAwardType;
    protected transient Hub<InspireCoreValue> hubInspireCoreValues;
    protected transient Hub<Location> hubLocations;
    protected transient LoginImageSet loginImageSet;
    protected transient Hub<ImageStore> hubLogoImageStores;
    protected transient ImageStore logoStampImageStore;
    protected transient Survey managerHifiveSurvey;
    protected transient Quiz nominationQuiz;
    protected transient PageTheme pageTheme;
    protected transient Hub<PointsAwardLevel> hubPointsAwardLevels;
    protected transient PointsConfiguration pointsConfiguration;
    protected transient Hub<PointsCoreValue> hubPointsCoreValues;
    protected transient Hub<PointsRecord> hubPointsFromRecord;
    protected transient Hub<ProgramEmailType> hubProgramEmailTypes;
    protected transient Hub<ProgramEvent> hubProgramEvents;
    protected transient Hub<ProgramFaq> hubProgramFaqs;
    protected transient Hub<ProgramPageGroup> hubProgramPageGroups;
    protected transient Hub<ProgramPageInfo> hubProgramPageInfos;
    protected transient Hub<Survey> hubQuizSurveys;
    protected transient Hub<InspireRecipient> hubRecentInspireRecipients;
    protected transient Hub<Survey> hubSurveys;
    protected transient Hub<Widget> hubWidgets;
     
    public Program() {
        if (!isLoading()) {
            setCreated(new OADate());
            setPointValue(.005);
            setBirthdayDisplayDays(31);
            setEmployeeAwardExpireDays(90);
            setPointsBillingType(0);
            setUsesPeerToPeer(false);
            setUsesDiscretionary(false);
            setEmployeeAwardDaysBefore(30);
            setCompanyPaysShipping(false);
            setUsesManagerToolkit(true);
            setInspireAwardType(new AwardType());
        }
    }
     
    public Program(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 12, displayLength = 12)
    @OAColumn(maxLength = 12)
    public String getCode() {
        return code;
    }
    
    public void setCode(String newValue) {
        fireBeforePropertyChange(P_Code, this.code, newValue);
        String old = code;
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
    @OAProperty(maxLength = 75, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Begin Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getBeginDate() {
        return beginDate;
    }
    
    public void setBeginDate(OADate newValue) {
        fireBeforePropertyChange(P_BeginDate, this.beginDate, newValue);
        OADate old = beginDate;
        this.beginDate = newValue;
        firePropertyChange(P_BeginDate, old, this.beginDate);
    }
    @OAProperty(displayName = "End Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getEndDate() {
        return endDate;
    }
    
    public void setEndDate(OADate newValue) {
        fireBeforePropertyChange(P_EndDate, this.endDate, newValue);
        OADate old = endDate;
        this.endDate = newValue;
        firePropertyChange(P_EndDate, old, this.endDate);
    }
    @OAProperty(displayName = "Award Begin Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getAwardBeginDate() {
        return awardBeginDate;
    }
    
    public void setAwardBeginDate(OADate newValue) {
        fireBeforePropertyChange(P_AwardBeginDate, this.awardBeginDate, newValue);
        OADate old = awardBeginDate;
        this.awardBeginDate = newValue;
        firePropertyChange(P_AwardBeginDate, old, this.awardBeginDate);
    }
    @OAProperty(displayName = "Inactive Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInactiveDate() {
        return inactiveDate;
    }
    
    public void setInactiveDate(OADate newValue) {
        fireBeforePropertyChange(P_InactiveDate, this.inactiveDate, newValue);
        OADate old = inactiveDate;
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
    @OAProperty(displayName = "Url Name", maxLength = 95, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 95)
    public String getUrlName() {
        return urlName;
    }
    
    public void setUrlName(String newValue) {
        fireBeforePropertyChange(P_UrlName, this.urlName, newValue);
        String old = urlName;
        this.urlName = newValue;
        firePropertyChange(P_UrlName, old, this.urlName);
    }
    @OAProperty(displayName = "From Email Address", description = "the from Email address for all emails that are sent out", maxLength = 75, displayLength = 25, columnLength = 18)
    @OAColumn(maxLength = 75)
    /**
      the from Email address for all emails that are sent out
    */
    public String getFromEmailAddress() {
        return fromEmailAddress;
    }
    
    public void setFromEmailAddress(String newValue) {
        fireBeforePropertyChange(P_FromEmailAddress, this.fromEmailAddress, newValue);
        String old = fromEmailAddress;
        this.fromEmailAddress = newValue;
        firePropertyChange(P_FromEmailAddress, old, this.fromEmailAddress);
    }
    @OAProperty(displayName = "Points Name", maxLength = 35, displayLength = 15, columnLength = 12)
    @OAColumn(maxLength = 35)
    public String getPointsName() {
        return pointsName;
    }
    
    public void setPointsName(String newValue) {
        fireBeforePropertyChange(P_PointsName, this.pointsName, newValue);
        String old = pointsName;
        this.pointsName = newValue;
        firePropertyChange(P_PointsName, old, this.pointsName);
    }
    @OAProperty(displayName = "Point Value", description = "The value of a single point, in dollars. 1 = 1$ and 0.005 = half cent", defaultValue = ".005", decimalPlaces = 3, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    /**
      The value of a single point, in dollars. 1 = 1$ and 0.005 = half cent
    */
    public double getPointValue() {
        return pointValue;
    }
    
    public void setPointValue(double newValue) {
        fireBeforePropertyChange(P_PointValue, this.pointValue, newValue);
        double old = pointValue;
        this.pointValue = newValue;
        firePropertyChange(P_PointValue, old, this.pointValue);
    }
    @OAProperty(displayName = "Uses Inspire", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesInspire() {
        return usesInspire;
    }
    
    public void setUsesInspire(boolean newValue) {
        fireBeforePropertyChange(P_UsesInspire, this.usesInspire, newValue);
        boolean old = usesInspire;
        this.usesInspire = newValue;
        firePropertyChange(P_UsesInspire, old, this.usesInspire);
    }
    @OAProperty(displayName = "Uses Hifive", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesHifive() {
        return usesHifive;
    }
    
    public void setUsesHifive(boolean newValue) {
        fireBeforePropertyChange(P_UsesHifive, this.usesHifive, newValue);
        boolean old = usesHifive;
        this.usesHifive = newValue;
        firePropertyChange(P_UsesHifive, old, this.usesHifive);
    }
    @OAProperty(displayName = "Uses Surveys", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesSurveys() {
        return usesSurveys;
    }
    
    public void setUsesSurveys(boolean newValue) {
        fireBeforePropertyChange(P_UsesSurveys, this.usesSurveys, newValue);
        boolean old = usesSurveys;
        this.usesSurveys = newValue;
        firePropertyChange(P_UsesSurveys, old, this.usesSurveys);
    }
    @OAProperty(displayName = "Ecard Type", description = "who can receive ecards", displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      who can receive ecards
    */
    public int getEcardType() {
        return ecardType;
    }
    
    public void setEcardType(int newValue) {
        fireBeforePropertyChange(P_EcardType, this.ecardType, newValue);
        int old = ecardType;
        this.ecardType = newValue;
        firePropertyChange(P_EcardType, old, this.ecardType);
    }
    public String getEcardTypeAsString() {
        if (isNull(P_EcardType)) return "";
        String s = hubEcardType.getAt(getEcardType());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Hifive Name", maxLength = 55, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getHifiveName() {
        return hifiveName;
    }
    
    public void setHifiveName(String newValue) {
        fireBeforePropertyChange(P_HifiveName, this.hifiveName, newValue);
        String old = hifiveName;
        this.hifiveName = newValue;
        firePropertyChange(P_HifiveName, old, this.hifiveName);
    }
    @OAProperty(displayName = "Birthday Display Days", description = "Number of days in advance to display employee birthdays", defaultValue = "31", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      Number of days in advance to display employee birthdays
    */
    public int getBirthdayDisplayDays() {
        return birthdayDisplayDays;
    }
    
    public void setBirthdayDisplayDays(int newValue) {
        fireBeforePropertyChange(P_BirthdayDisplayDays, this.birthdayDisplayDays, newValue);
        int old = birthdayDisplayDays;
        this.birthdayDisplayDays = newValue;
        firePropertyChange(P_BirthdayDisplayDays, old, this.birthdayDisplayDays);
    }
    @OAProperty(displayName = "Anniversary Display Days", description = "days in advance to display employee aniversary", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      days in advance to display employee aniversary
    */
    public int getAnniversaryDisplayDays() {
        return anniversaryDisplayDays;
    }
    
    public void setAnniversaryDisplayDays(int newValue) {
        fireBeforePropertyChange(P_AnniversaryDisplayDays, this.anniversaryDisplayDays, newValue);
        int old = anniversaryDisplayDays;
        this.anniversaryDisplayDays = newValue;
        firePropertyChange(P_AnniversaryDisplayDays, old, this.anniversaryDisplayDays);
    }
    @OAProperty(displayLength = 5, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    
    public void setSeq(int newValue) {
        fireBeforePropertyChange(P_Seq, this.seq, newValue);
        int old = seq;
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAProperty(displayName = "Login Message", maxLength = 125, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 125)
    public String getLoginMessage() {
        return loginMessage;
    }
    
    public void setLoginMessage(String newValue) {
        fireBeforePropertyChange(P_LoginMessage, this.loginMessage, newValue);
        String old = loginMessage;
        this.loginMessage = newValue;
        firePropertyChange(P_LoginMessage, old, this.loginMessage);
    }
    @OAProperty(displayName = "Employee Award Expire Days", defaultValue = "90", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getEmployeeAwardExpireDays() {
        return employeeAwardExpireDays;
    }
    
    public void setEmployeeAwardExpireDays(int newValue) {
        fireBeforePropertyChange(P_EmployeeAwardExpireDays, this.employeeAwardExpireDays, newValue);
        int old = employeeAwardExpireDays;
        this.employeeAwardExpireDays = newValue;
        firePropertyChange(P_EmployeeAwardExpireDays, old, this.employeeAwardExpireDays);
    }
    @OAProperty(displayName = "Charity Goal", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCharityGoal() {
        return charityGoal;
    }
    
    public void setCharityGoal(double newValue) {
        fireBeforePropertyChange(P_CharityGoal, this.charityGoal, newValue);
        double old = charityGoal;
        this.charityGoal = newValue;
        firePropertyChange(P_CharityGoal, old, this.charityGoal);
    }
    @OAProperty(displayName = "Charity Total", decimalPlaces = 2, isCurrency = true, displayLength = 7, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCharityTotal() {
        if (charityTotal == 0) {
            setCharityTotal(getCalcCharityTotal());
        }
        return charityTotal;
    }
    public void setCharityTotal(double newValue) {
        double old = charityTotal;
        fireBeforePropertyChange(PROPERTY_CharityTotal, old, newValue);
        this.charityTotal = newValue;
        firePropertyChange(PROPERTY_CharityTotal, old, this.charityTotal);
    }
    @OAProperty(displayName = "Item Upcharge", decimalPlaces = 4, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getItemUpcharge() {
        return itemUpcharge;
    }
    public void setItemUpcharge(double newValue) {
       // if (newValue != 0 && (newValue <= .001 || newValue > 1.0)) throw new RuntimeException("must be a percentage");
        double old = itemUpcharge;
        fireBeforePropertyChange(PROPERTY_ItemUpcharge, old, newValue);
        this.itemUpcharge = newValue;
        firePropertyChange(PROPERTY_ItemUpcharge, old, this.itemUpcharge);
    }
    @OAProperty(displayName = "Card Upcharge", decimalPlaces = 4, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCardUpcharge() {
        return cardUpcharge;
    }
    public void setCardUpcharge(double newValue) {
        // if (newValue != 0 && (newValue <= .001 || newValue > 1.0)) throw new RuntimeException("must be a percentage");
        double old = cardUpcharge;
        fireBeforePropertyChange(PROPERTY_CardUpcharge, old, newValue);
        this.cardUpcharge = newValue;
        firePropertyChange(PROPERTY_CardUpcharge, old, this.cardUpcharge);
    }
    @OAProperty(displayName = "Charity Upcharge", decimalPlaces = 4, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCharityUpcharge() {
        return charityUpcharge;
    }
    public void setCharityUpcharge(double newValue) {
        //if (newValue != 0 && (newValue <= .001 || newValue > 1.0)) throw new RuntimeException("must be a percentage");
        double old = charityUpcharge;
        fireBeforePropertyChange(PROPERTY_CharityUpcharge, old, newValue);
        this.charityUpcharge = newValue;
        firePropertyChange(PROPERTY_CharityUpcharge, old, this.charityUpcharge);
    }
    @OAProperty(displayName = "Cash Upcharge", decimalPlaces = 4, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCashUpcharge() {
        return cashUpcharge;
    }
    public void setCashUpcharge(double newValue) {
        //if (newValue != 0 && (newValue <= .001 || newValue > 1.0)) throw new RuntimeException("must be a percentage");
        double old = cashUpcharge;
        fireBeforePropertyChange(PROPERTY_CashUpcharge, old, newValue);
        this.cashUpcharge = newValue;
        firePropertyChange(PROPERTY_CashUpcharge, old, this.cashUpcharge);
    }
    @OAProperty(displayName = "Test Email Address", description = "test account to send all emails", maxLength = 125, displayLength = 25, columnLength = 18, columnName = "Test Email'")
    @OAColumn(maxLength = 125)
    /**
      test account to send all emails
    */
    public String getTestEmail() {
        return testEmail;
    }
    
    public void setTestEmail(String newValue) {
        fireBeforePropertyChange(P_TestEmail, this.testEmail, newValue);
        String old = testEmail;
        this.testEmail = newValue;
        firePropertyChange(P_TestEmail, old, this.testEmail);
    }
    @OAProperty(displayName = "Use Advanced Reports", description = "true if this program uses the Advanced Reports", displayLength = 5, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      true if this program uses the Advanced Reports
    */
    public boolean getUseAdvancedReports() {
        return useAdvancedReports;
    }
    
    public void setUseAdvancedReports(boolean newValue) {
        fireBeforePropertyChange(P_UseAdvancedReports, this.useAdvancedReports, newValue);
        boolean old = useAdvancedReports;
        this.useAdvancedReports = newValue;
        firePropertyChange(P_UseAdvancedReports, old, this.useAdvancedReports);
    }
    @OAProperty(displayName = "Packet Instructions", maxLength = 80, displayLength = 40)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getPacketInstructions() {
        return packetInstructions;
    }
    
    public void setPacketInstructions(String newValue) {
        fireBeforePropertyChange(P_PacketInstructions, this.packetInstructions, newValue);
        String old = packetInstructions;
        this.packetInstructions = newValue;
        firePropertyChange(P_PacketInstructions, old, this.packetInstructions);
    }
    @OAProperty(displayName = "Sso Failure Url", maxLength = 120, displayLength = 25, columnLength = 15)
    @OAColumn(maxLength = 120)
    public String getSsoFailureUrl() {
        return ssoFailureUrl;
    }
    
    public void setSsoFailureUrl(String newValue) {
        fireBeforePropertyChange(P_SsoFailureUrl, this.ssoFailureUrl, newValue);
        String old = ssoFailureUrl;
        this.ssoFailureUrl = newValue;
        firePropertyChange(P_SsoFailureUrl, old, this.ssoFailureUrl);
    }
    @OAProperty(displayName = "SSO Code", maxLength = 35, displayLength = 15)
    @OAColumn(maxLength = 35)
    public String getSsoCode() {
        return ssoCode;
    }
    
    public void setSsoCode(String newValue) {
        fireBeforePropertyChange(P_SsoCode, this.ssoCode, newValue);
        String old = ssoCode;
        this.ssoCode = newValue;
        firePropertyChange(P_SsoCode, old, this.ssoCode);
    }
    @OAProperty(displayName = "SSO Redirect Url", maxLength = 120, displayLength = 25, columnLength = 15)
    @OAColumn(maxLength = 120)
    public String getSsoRedirectUrl() {
        return ssoRedirectUrl;
    }
    
    public void setSsoRedirectUrl(String newValue) {
        fireBeforePropertyChange(P_SsoRedirectUrl, this.ssoRedirectUrl, newValue);
        String old = ssoRedirectUrl;
        this.ssoRedirectUrl = newValue;
        firePropertyChange(P_SsoRedirectUrl, old, this.ssoRedirectUrl);
    }
    @OAProperty(displayName = "Uses Points", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesPoints() {
        return usesPoints;
    }
    
    public void setUsesPoints(boolean newValue) {
        fireBeforePropertyChange(P_UsesPoints, this.usesPoints, newValue);
        boolean old = usesPoints;
        this.usesPoints = newValue;
        firePropertyChange(P_UsesPoints, old, this.usesPoints);
    }
    @OAProperty(displayName = "Points Billing Type", defaultValue = "0", displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getPointsBillingType() {
        return pointsBillingType;
    }
    
    public void setPointsBillingType(int newValue) {
        fireBeforePropertyChange(P_PointsBillingType, this.pointsBillingType, newValue);
        int old = pointsBillingType;
        this.pointsBillingType = newValue;
        firePropertyChange(P_PointsBillingType, old, this.pointsBillingType);
    }
    public String getPointsBillingTypeAsString() {
        if (isNull(P_PointsBillingType)) return "";
        String s = hubPointsBillingType.getAt(getPointsBillingType());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Sso Logout Url", maxLength = 75, displayLength = 20, columnLength = 18)
    @OAColumn(maxLength = 75)
    public String getSsoLogoutUrl() {
        return ssoLogoutUrl;
    }
    
    public void setSsoLogoutUrl(String newValue) {
        fireBeforePropertyChange(P_SsoLogoutUrl, this.ssoLogoutUrl, newValue);
        String old = ssoLogoutUrl;
        this.ssoLogoutUrl = newValue;
        firePropertyChange(P_SsoLogoutUrl, old, this.ssoLogoutUrl);
    }
    @OAProperty(displayName = "Uses Peer To Peer", description = "does this program allow managers to recognize employees", defaultValue = "false", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      does this program allow managers to recognize employees
    */
    public boolean getUsesPeerToPeer() {
        return usesPeerToPeer;
    }
    
    public void setUsesPeerToPeer(boolean newValue) {
        fireBeforePropertyChange(P_UsesPeerToPeer, this.usesPeerToPeer, newValue);
        boolean old = usesPeerToPeer;
        this.usesPeerToPeer = newValue;
        firePropertyChange(P_UsesPeerToPeer, old, this.usesPeerToPeer);
    }
    @OAProperty(displayName = "Uses Discretionary", description = "does the program utilize discretionary points", defaultValue = "false", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      does the program utilize discretionary points
    */
    public boolean getUsesDiscretionary() {
        return usesDiscretionary;
    }
    
    public void setUsesDiscretionary(boolean newValue) {
        fireBeforePropertyChange(P_UsesDiscretionary, this.usesDiscretionary, newValue);
        boolean old = usesDiscretionary;
        this.usesDiscretionary = newValue;
        firePropertyChange(P_UsesDiscretionary, old, this.usesDiscretionary);
    }
    @OAProperty(displayName = "Days Before", description = "number of days before that an employee can use their Serviice Award", defaultValue = "30", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      number of days before that an employee can use their Serviice Award
    */
    public int getEmployeeAwardDaysBefore() {
        return employeeAwardDaysBefore;
    }
    
    public void setEmployeeAwardDaysBefore(int newValue) {
        fireBeforePropertyChange(P_EmployeeAwardDaysBefore, this.employeeAwardDaysBefore, newValue);
        int old = employeeAwardDaysBefore;
        this.employeeAwardDaysBefore = newValue;
        firePropertyChange(P_EmployeeAwardDaysBefore, old, this.employeeAwardDaysBefore);
    }
    @OAProperty(displayName = "Company Pays Shipping", description = "Checked to show that employees buy items at cost while the company pays shipping and handling", defaultValue = "false", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      Checked to show that employees buy items at cost while the company pays shipping and handling
    */
    public boolean getCompanyPaysShipping() {
        return companyPaysShipping;
    }
    
    public void setCompanyPaysShipping(boolean newValue) {
        fireBeforePropertyChange(P_CompanyPaysShipping, this.companyPaysShipping, newValue);
        boolean old = companyPaysShipping;
        this.companyPaysShipping = newValue;
        firePropertyChange(P_CompanyPaysShipping, old, this.companyPaysShipping);
    }
    @OAProperty(displayName = "Uses Nominations", description = "does this company use points nominations", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      does this company use points nominations
    */
    public boolean getUsesNominations() {
        return usesNominations;
    }
    
    public void setUsesNominations(boolean newValue) {
        fireBeforePropertyChange(P_UsesNominations, this.usesNominations, newValue);
        boolean old = usesNominations;
        this.usesNominations = newValue;
        firePropertyChange(P_UsesNominations, old, this.usesNominations);
    }
    @OAProperty(displayName = "Uses Manager Toolkit", description = "show manager toolkit?", defaultValue = "true", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      show manager toolkit?
    */
    public boolean getUsesManagerToolkit() {
        return usesManagerToolkit;
    }
    
    public void setUsesManagerToolkit(boolean newValue) {
        fireBeforePropertyChange(P_UsesManagerToolkit, this.usesManagerToolkit, newValue);
        boolean old = usesManagerToolkit;
        this.usesManagerToolkit = newValue;
        firePropertyChange(P_UsesManagerToolkit, old, this.usesManagerToolkit);
    }
    @OACalculatedProperty(displayName = "Calc Charity Total", decimalPlaces = 2, displayLength = 7, properties = {P_Locations+"."+Location.P_CalcCharityTotal})
    public double getCalcCharityTotal() {
        double tot = 0;
        for (Location loc : getLocations()) {
            tot += loc.getCalcCharityTotal();
        }
        return tot;
    }
     
    @OACalculatedProperty(displayName = "Program Points", description = "the discretionary points for this program", displayLength = 5, properties = {P_PointsFromRecord})
    /**
      the discretionary points for this program
    */
    public int getProgramPoints() {
       return 0;//PointsDelegate.getProgramPoints(this);
    }
    
     
    @OAMany(
        displayName = "Add On Items", 
        toClass = AddOnItem.class, 
        reverseName = AddOnItem.P_Program
    )
    @OALinkTable(name = "ProgramAddOnItem", indexName = "AddOnItemProgram", columns = {"ProgramId"})
    public Hub<AddOnItem> getAddOnItems() {
        if (hubAddOnItems == null) {
            hubAddOnItems = (Hub<AddOnItem>) getHub(P_AddOnItems);
        }
        return hubAddOnItems;
    }
    
    @OAMany(
        displayName = "Anniversary Employees", 
        toClass = Employee.class, 
        recursive = false, 
        isCalculated = true, 
        reverseName = Employee.P_AnniversaryProgram
    )
    public Hub<Employee> getAnniversaryEmployees() {
        if (hubAnniversaryEmployees == null) {
            hubAnniversaryEmployees = (Hub<Employee>) getHub(PROPERTY_AnniversaryEmployees);
            EmployeeFilter filter = new EmployeeFilter();
            filter.createNextAnniverseriesFilter(getEmployees(), hubAnniversaryEmployees, false);
            hubAnniversaryEmployees.sort(Employee.PROPERTY_LastName);
        }
        return hubAnniversaryEmployees;
    }
    @OAOne(
        displayName = "CEO Letter", 
        reverseName = ProgramDocument.P_AnnouncementProgram, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"AnnouncementDocumentId"})
    public ProgramDocument getAnnouncementDocument() {
        if (announcementDocument == null) {
            announcementDocument = (ProgramDocument) getObject(P_AnnouncementDocument);
        }
        return announcementDocument;
    }
    
    public void setAnnouncementDocument(ProgramDocument newValue) {
        fireBeforePropertyChange(P_AnnouncementDocument, this.announcementDocument, newValue);
        ProgramDocument old = this.announcementDocument;
        this.announcementDocument = newValue;
        firePropertyChange(P_AnnouncementDocument, old, this.announcementDocument);
    }
    
    @OAMany(
        displayName = "Award Types", 
        toClass = AwardType.class, 
        owner = true, 
        reverseName = AwardType.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        sortProperty = AwardType.P_YearsService
    )
    public Hub<AwardType> getAwardTypes() {
        if (hubAwardTypes == null) {
            hubAwardTypes = (Hub<AwardType>) getHub(P_AwardTypes);
        }
        return hubAwardTypes;
    }
    
    @OAMany(
        displayName = "Blogs", 
        toClass = ProgramDocument.class, 
        reverseName = ProgramDocument.P_BlogPrograms
    )
    @OALinkTable(name = "ProgramProgramDocument", indexName = "ProgramDocumentBlogProgram", columns = {"ProgramId"})
    public Hub<ProgramDocument> getBlogDocuments() {
        if (hubBlogDocuments == null) {
            hubBlogDocuments = (Hub<ProgramDocument>) getHub(P_BlogDocuments);
        }
        return hubBlogDocuments;
    }
    
    @OAMany(
        displayName = "Gift Cards", 
        toClass = Card.class, 
        reverseName = Card.P_Programs
    )
    @OALinkTable(name = "ProgramCard", indexName = "CardProgram", columns = {"ProgramId"})
    public Hub<Card> getCards() {
        if (hubCards == null) {
            hubCards = (Hub<Card>) getHub(P_Cards);
        }
        return hubCards;
    }
    
    @OAOne(
        displayName = "CEO Image", 
        owner = true, 
        reverseName = ImageStore.P_CeoProgram, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"CeoImageStoreId"})
    public ImageStore getCeoImageStore() {
        if (ceoImageStore == null) {
            ceoImageStore = (ImageStore) getObject(P_CeoImageStore);
        }
        return ceoImageStore;
    }
    
    public void setCeoImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_CeoImageStore, this.ceoImageStore, newValue);
        ImageStore old = this.ceoImageStore;
        this.ceoImageStore = newValue;
        firePropertyChange(P_CeoImageStore, old, this.ceoImageStore);
    }
    
    @OAOne(
        displayName = "CEO Signature Image", 
        owner = true, 
        reverseName = ImageStore.P_CeoSignatureProgram, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"CeoSignatureImageStoreId"})
    public ImageStore getCeoSignatureImageStore() {
        if (ceoSignatureImageStore == null) {
            ceoSignatureImageStore = (ImageStore) getObject(P_CeoSignatureImageStore);
        }
        return ceoSignatureImageStore;
    }
    
    public void setCeoSignatureImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_CeoSignatureImageStore, this.ceoSignatureImageStore, newValue);
        ImageStore old = this.ceoSignatureImageStore;
        this.ceoSignatureImageStore = newValue;
        firePropertyChange(P_CeoSignatureImageStore, old, this.ceoSignatureImageStore);
    }
    
    @OAMany(
        toClass = Charity.class, 
        reverseName = Charity.P_Programs
    )
    @OALinkTable(name = "ProgramCharity", indexName = "CharityProgram", columns = {"ProgramId"})
    public Hub<Charity> getCharities() {
        if (hubCharities == null) {
            hubCharities = (Hub<Charity>) getHub(P_Charities);
        }
        return hubCharities;
    }
    
    @OAOne(
        reverseName = Company.P_Programs, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CompanyId"})
    public Company getCompany() {
        if (company == null) {
            company = (Company) getObject(P_Company);
        }
        return company;
    }
    
    public void setCompany(Company newValue) {
        fireBeforePropertyChange(P_Company, this.company, newValue);
        Company old = this.company;
        this.company = newValue;
        firePropertyChange(P_Company, old, this.company);
    }
    
    @OAOne(
        displayName = "Country Code", 
        reverseName = CountryCode.P_Programs
    )
    @OAFkey(columns = {"CountryCodeId"})
    public CountryCode getCountryCode() {
        if (countryCode == null) {
            countryCode = (CountryCode) getObject(P_CountryCode);
        }
        return countryCode;
    }
    
    public void setCountryCode(CountryCode newValue) {
        fireBeforePropertyChange(P_CountryCode, this.countryCode, newValue);
        CountryCode old = this.countryCode;
        this.countryCode = newValue;
        firePropertyChange(P_CountryCode, old, this.countryCode);
    }
    
    @OAMany(
        displayName = "Custom Data", 
        toClass = CustomData.class, 
        owner = true, 
        reverseName = CustomData.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<CustomData> getCustomData() {
        if (hubCustomData == null) {
            hubCustomData = (Hub<CustomData>) getHub(P_CustomData);
        }
        return hubCustomData;
    }
    
    @OAMany(
        displayName = "E:Cards", 
        toClass = Ecard.class, 
        reverseName = Ecard.P_Programs, 
        sortProperty = Ecard.P_Name
    )
    @OALinkTable(name = "ProgramEcard", indexName = "EcardProgram", columns = {"ProgramId"})
    public Hub<Ecard> getEcards() {
        if (hubEcards == null) {
            hubEcards = (Hub<Ecard>) getHub(P_Ecards);
        }
        return hubEcards;
    }
    
    @OAMany(
        toClass = Employee.class, 
        recursive = false, 
        isCalculated = true, 
        reverseName = Employee.P_Program
    )
    public Hub<Employee> getEmployees() {
        if (hubEmployees == null) {
            hubEmployees = (Hub<Employee>) getHub(PROPERTY_Employees);
            HubMerger hm = new HubMerger(this, hubEmployees, OAString.cpp(PROPERTY_Locations, Location.PROPERTY_Employees)); 
        }
        return hubEmployees;
    }
    @OAMany(
        displayName = "Hi5 Qualities", 
        toClass = HifiveQuality.class, 
        owner = true, 
        reverseName = HifiveQuality.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = HifiveQuality.P_Seq, 
        sortProperty = HifiveQuality.P_Seq
    )
    public Hub<HifiveQuality> getHifiveQualities() {
        if (hubHifiveQualities == null) {
            hubHifiveQualities = (Hub<HifiveQuality>) getHub(P_HifiveQualities);
        }
        return hubHifiveQualities;
    }
    
    @OAMany(
        displayName = "Hi5 Reasons", 
        toClass = HifiveReason.class, 
        owner = true, 
        reverseName = HifiveReason.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<HifiveReason> getHifiveReasons() {
        if (hubHifiveReasons == null) {
            hubHifiveReasons = (Hub<HifiveReason>) getHub(P_HifiveReasons);
        }
        return hubHifiveReasons;
    }
    
    @OAMany(
        displayName = "Banner Images", 
        toClass = ImageStore.class, 
        owner = true, 
        reverseName = ImageStore.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OALinkTable(name = "ImageStoreProgram", indexName = "ImageStoreProgram", columns = {"ProgramId"})
    public Hub<ImageStore> getImageStores() {
        if (hubImageStores == null) {
            hubImageStores = (Hub<ImageStore>) getHub(P_ImageStores);
        }
        return hubImageStores;
    }
    
    @OAOne(
        displayName = "Imagine Card", 
        reverseName = Card.P_ImaginePrograms, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ImagineCardId"})
    public Card getImagineCard() {
        if (imagineCard == null) {
            imagineCard = (Card) getObject(P_ImagineCard);
        }
        return imagineCard;
    }
    
    public void setImagineCard(Card newValue) {
        fireBeforePropertyChange(P_ImagineCard, this.imagineCard, newValue);
        Card old = this.imagineCard;
        this.imagineCard = newValue;
        firePropertyChange(P_ImagineCard, old, this.imagineCard);
    }
    
    @OAMany(
        displayName = "Inspire Award Levels", 
        toClass = InspireAwardLevel.class, 
        owner = true, 
        reverseName = InspireAwardLevel.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true, 
        seqProperty = InspireAwardLevel.P_Seq, 
        sortProperty = InspireAwardLevel.P_Seq
    )
    public Hub<InspireAwardLevel> getInspireAwardLevels() {
        if (hubInspireAwardLevels == null) {
            hubInspireAwardLevels = (Hub<InspireAwardLevel>) getHub(P_InspireAwardLevels);
        }
        return hubInspireAwardLevels;
    }
    
    @OAOne(
        displayName = "Inspire Award Type", 
        owner = true, 
        reverseName = AwardType.P_InspireProgram, 
        cascadeSave = true, 
        cascadeDelete = true, 
        autoCreateNew = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"InspireAwardTypeId"})
    public AwardType getInspireAwardType() {
        if (inspireAwardType == null) {
            inspireAwardType = (AwardType) getObject(P_InspireAwardType);
        }
        return inspireAwardType;
    }
    
    public void setInspireAwardType(AwardType newValue) {
        fireBeforePropertyChange(P_InspireAwardType, this.inspireAwardType, newValue);
        AwardType old = this.inspireAwardType;
        this.inspireAwardType = newValue;
        firePropertyChange(P_InspireAwardType, old, this.inspireAwardType);
    }
    
    @OAMany(
        displayName = "Inspire Core Values", 
        toClass = InspireCoreValue.class, 
        owner = true, 
        reverseName = InspireCoreValue.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true, 
        seqProperty = InspireCoreValue.P_Seq, 
        sortProperty = InspireCoreValue.P_Seq
    )
    public Hub<InspireCoreValue> getInspireCoreValues() {
        if (hubInspireCoreValues == null) {
            hubInspireCoreValues = (Hub<InspireCoreValue>) getHub(P_InspireCoreValues);
        }
        return hubInspireCoreValues;
    }
    
    @OAMany(
        toClass = Location.class, 
        recursive = true, 
        owner = true, 
        reverseName = Location.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true, 
        seqProperty = Location.P_Seq, 
        sortProperty = Location.P_Seq,
        cacheSize = 100
    )
    public Hub<Location> getLocations() {
        if (hubLocations == null) {
            hubLocations = (Hub<Location>) getHub(P_Locations);
        }
        return hubLocations;
    }
    
    @OAOne(
        displayName = "Login Image Set", 
        reverseName = LoginImageSet.P_Programs
    )
    @OAFkey(columns = {"LoginImageSetId"})
    public LoginImageSet getLoginImageSet() {
        if (loginImageSet == null) {
            loginImageSet = (LoginImageSet) getObject(P_LoginImageSet);
        }
        return loginImageSet;
    }
    
    public void setLoginImageSet(LoginImageSet newValue) {
        fireBeforePropertyChange(P_LoginImageSet, this.loginImageSet, newValue);
        LoginImageSet old = this.loginImageSet;
        this.loginImageSet = newValue;
        firePropertyChange(P_LoginImageSet, old, this.loginImageSet);
    }
    
    @OAMany(
        displayName = "Program Images", 
        toClass = ImageStore.class, 
        owner = true, 
        reverseName = ImageStore.P_LogoProgram, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OALinkTable(name = "ProgramImageStore", indexName = "ImageStoreLogoProgram", columns = {"LogoProgramId"})
    public Hub<ImageStore> getLogoImageStores() {
        if (hubLogoImageStores == null) {
            hubLogoImageStores = (Hub<ImageStore>) getHub(P_LogoImageStores);
        }
        return hubLogoImageStores;
    }
    
    @OAOne(
        displayName = "Stamp Image", 
        owner = true, 
        reverseName = ImageStore.P_ProgramLogoStamp, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"LogoStampImageStoreId"})
    public ImageStore getLogoStampImageStore() {
        if (logoStampImageStore == null) {
            logoStampImageStore = (ImageStore) getObject(P_LogoStampImageStore);
        }
        return logoStampImageStore;
    }
    
    public void setLogoStampImageStore(ImageStore newValue) {
        fireBeforePropertyChange(P_LogoStampImageStore, this.logoStampImageStore, newValue);
        ImageStore old = this.logoStampImageStore;
        this.logoStampImageStore = newValue;
        firePropertyChange(P_LogoStampImageStore, old, this.logoStampImageStore);
    }
    
    @OAOne(
        displayName = "Manager Hifive Survey", 
        reverseName = Survey.P_ManagerSurveyProgram, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ManagerHifiveSurveyId"})
    public Survey getManagerHifiveSurvey() {
        if (managerHifiveSurvey == null) {
            managerHifiveSurvey = (Survey) getObject(P_ManagerHifiveSurvey);
        }
        return managerHifiveSurvey;
    }
    
    public void setManagerHifiveSurvey(Survey newValue) {
        fireBeforePropertyChange(P_ManagerHifiveSurvey, this.managerHifiveSurvey, newValue);
        Survey old = this.managerHifiveSurvey;
        this.managerHifiveSurvey = newValue;
        firePropertyChange(P_ManagerHifiveSurvey, old, this.managerHifiveSurvey);
    }
    
    @OAOne(
        displayName = "Nomination Quiz", 
        reverseName = Quiz.P_Program
    )
    public Quiz getNominationQuiz() {
        if (nominationQuiz == null) {
            nominationQuiz = (Quiz) getObject(P_NominationQuiz);
        }
        return nominationQuiz;
    }
    
    public void setNominationQuiz(Quiz newValue) {
        fireBeforePropertyChange(P_NominationQuiz, this.nominationQuiz, newValue);
        Quiz old = this.nominationQuiz;
        this.nominationQuiz = newValue;
        firePropertyChange(P_NominationQuiz, old, this.nominationQuiz);
    }
    
    @OAOne(
        displayName = "Page Theme", 
        reverseName = PageTheme.P_Programs, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PageThemeId"})
    public PageTheme getPageTheme() {
        if (pageTheme == null) {
            pageTheme = (PageTheme) getObject(P_PageTheme);
        }
        return pageTheme;
    }
    
    public void setPageTheme(PageTheme newValue) {
        fireBeforePropertyChange(P_PageTheme, this.pageTheme, newValue);
        PageTheme old = this.pageTheme;
        this.pageTheme = newValue;
        firePropertyChange(P_PageTheme, old, this.pageTheme);
    }
    
    @OAMany(
        displayName = "Points Award Levels", 
        toClass = PointsAwardLevel.class, 
        reverseName = PointsAwardLevel.P_Program, 
        seqProperty = PointsAwardLevel.P_Seq, 
        sortProperty = PointsAwardLevel.P_Seq
    )
    public Hub<PointsAwardLevel> getPointsAwardLevels() {
        if (hubPointsAwardLevels == null) {
            hubPointsAwardLevels = (Hub<PointsAwardLevel>) getHub(P_PointsAwardLevels);
        }
        return hubPointsAwardLevels;
    }
    
    @OAOne(
        displayName = "Points Configuration", 
        owner = true, 
        reverseName = PointsConfiguration.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"PointsConfigurationId"})
    public PointsConfiguration getPointsConfiguration() {
        if (pointsConfiguration == null) {
            pointsConfiguration = (PointsConfiguration) getObject(P_PointsConfiguration);
        }
        return pointsConfiguration;
    }
    
    public void setPointsConfiguration(PointsConfiguration newValue) {
        fireBeforePropertyChange(P_PointsConfiguration, this.pointsConfiguration, newValue);
        PointsConfiguration old = this.pointsConfiguration;
        this.pointsConfiguration = newValue;
        firePropertyChange(P_PointsConfiguration, old, this.pointsConfiguration);
    }
    
    @OAMany(
        displayName = "Points Core Values", 
        toClass = PointsCoreValue.class, 
        reverseName = PointsCoreValue.P_Program
    )
    public Hub<PointsCoreValue> getPointsCoreValues() {
        if (hubPointsCoreValues == null) {
            hubPointsCoreValues = (Hub<PointsCoreValue>) getHub(P_PointsCoreValues);
        }
        return hubPointsCoreValues;
    }
    
    @OAMany(
        displayName = "Points From Record", 
        toClass = PointsRecord.class, 
        reverseName = PointsRecord.P_PointsToProgram
    )
    public Hub<PointsRecord> getPointsFromRecord() {
        if (hubPointsFromRecord == null) {
            hubPointsFromRecord = (Hub<PointsRecord>) getHub(P_PointsFromRecord);
        }
        return hubPointsFromRecord;
    }
    
    @OAMany(
        displayName = "Program Email Types", 
        toClass = ProgramEmailType.class, 
        owner = true, 
        reverseName = ProgramEmailType.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        uniqueProperty = ProgramEmailType.P_EmailType
    )
    public Hub<ProgramEmailType> getProgramEmailTypes() {
        if (hubProgramEmailTypes == null) {
            hubProgramEmailTypes = (Hub<ProgramEmailType>) getHub(P_ProgramEmailTypes);
        }
        return hubProgramEmailTypes;
    }
    
    @OAMany(
        displayName = "Events", 
        toClass = ProgramEvent.class, 
        owner = true, 
        reverseName = ProgramEvent.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<ProgramEvent> getProgramEvents() {
        if (hubProgramEvents == null) {
            hubProgramEvents = (Hub<ProgramEvent>) getHub(P_ProgramEvents);
        }
        return hubProgramEvents;
    }
    
    @OAMany(
        displayName = "Faqs", 
        toClass = ProgramFaq.class, 
        owner = true, 
        reverseName = ProgramFaq.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = ProgramFaq.P_Seq, 
        sortProperty = ProgramFaq.P_Seq
    )
    public Hub<ProgramFaq> getProgramFaqs() {
        if (hubProgramFaqs == null) {
            hubProgramFaqs = (Hub<ProgramFaq>) getHub(P_ProgramFaqs);
        }
        return hubProgramFaqs;
    }
    
    @OAMany(
        displayName = "Web Page Groups", 
        toClass = ProgramPageGroup.class, 
        owner = true, 
        reverseName = ProgramPageGroup.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = ProgramPageGroup.P_Seq, 
        uniqueProperty = ProgramPageGroup.P_PageGroup, 
        sortProperty = ProgramPageGroup.P_Seq
    )
    public Hub<ProgramPageGroup> getProgramPageGroups() {
        if (hubProgramPageGroups == null) {
            hubProgramPageGroups = (Hub<ProgramPageGroup>) getHub(P_ProgramPageGroups);
        }
        return hubProgramPageGroups;
    }
    
    @OAMany(
        displayName = "Web Pages", 
        toClass = ProgramPageInfo.class, 
        owner = true, 
        reverseName = ProgramPageInfo.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true, 
        uniqueProperty = ProgramPageInfo.P_PageInfo
    )
    public Hub<ProgramPageInfo> getProgramPageInfos() {
        if (hubProgramPageInfos == null) {
            hubProgramPageInfos = (Hub<ProgramPageInfo>) getHub(P_ProgramPageInfos);
        }
        return hubProgramPageInfos;
    }
    
    @OAMany(
        displayName = "Quiz Surveys", 
        toClass = Survey.class, 
        reverseName = Survey.P_QuizProgram
    )
    public Hub<Survey> getQuizSurveys() {
        if (hubQuizSurveys == null) {
            hubQuizSurveys = (Hub<Survey>) getHub(P_QuizSurveys);
        }
        return hubQuizSurveys;
    }
    
    @OAMany(
        displayName = "Recent Inspire Recipients", 
        toClass = InspireRecipient.class, 
        isCalculated = true, 
        reverseName = InspireRecipient.P_Program
    )
    public Hub<InspireRecipient> getRecentInspireRecipients() {
        if (hubRecentInspireRecipients == null) {
            hubRecentInspireRecipients = (Hub<InspireRecipient>) getHub(PROPERTY_RecentInspireRecipients);
            Hub<InspireRecipient> hubAll = new Hub<InspireRecipient>(InspireRecipient.class);
            new HubMerger(getEmployees(), hubAll, Employee.PROPERTY_InspireRecipients, true);
/*qqqq            
            InspireRecipientFilter filter = new InspireRecipientFilter();
            filter.createRecentFilter(hubAll, hubRecentInspireRecipients, false);
*/            
        }
        return hubRecentInspireRecipients;
    }
    @OAMany(
        toClass = Survey.class, 
        owner = true, 
        reverseName = Survey.P_Program, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Survey> getSurveys() {
        if (hubSurveys == null) {
            hubSurveys = (Hub<Survey>) getHub(P_Surveys);
        }
        return hubSurveys;
    }
    
    @OAMany(
        toClass = Widget.class, 
        reverseName = Widget.P_Programs
    )
    @OALinkTable(name = "ProgramWidget", indexName = "WidgetProgram", columns = {"ProgramId"})
    public Hub<Widget> getWidgets() {
        if (hubWidgets == null) {
            hubWidgets = (Hub<Widget>) getHub(P_Widgets);
        }
        return hubWidgets;
    }
    
    // runSqlServerImport - import employees from SQL Server database
    public void runSqlServerImport() {
        //ProgramDelegate.runSqlServerImport(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.code = rs.getString(3);
        this.name = rs.getString(4);
        date = rs.getDate(5);
        if (date != null) this.beginDate = new OADate(date);
        date = rs.getDate(6);
        if (date != null) this.endDate = new OADate(date);
        date = rs.getDate(7);
        if (date != null) this.awardBeginDate = new OADate(date);
        date = rs.getDate(8);
        if (date != null) this.inactiveDate = new OADate(date);
        this.urlName = rs.getString(9);
        this.fromEmailAddress = rs.getString(10);
        this.pointsName = rs.getString(11);
        this.pointValue = (double) rs.getDouble(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_PointValue, true);
        }
        this.usesInspire = rs.getBoolean(13);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesInspire, true);
        }
        this.usesHifive = rs.getBoolean(14);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesHifive, true);
        }
        this.usesSurveys = rs.getBoolean(15);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesSurveys, true);
        }
        this.ecardType = (int) rs.getInt(16);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_EcardType, true);
        }
        this.hifiveName = rs.getString(17);
        this.birthdayDisplayDays = (int) rs.getInt(18);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_BirthdayDisplayDays, true);
        }
        this.anniversaryDisplayDays = (int) rs.getInt(19);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_AnniversaryDisplayDays, true);
        }
        this.seq = (int) rs.getInt(20);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_Seq, true);
        }
        this.loginMessage = rs.getString(21);
        this.employeeAwardExpireDays = (int) rs.getInt(22);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_EmployeeAwardExpireDays, true);
        }
        this.charityGoal = (double) rs.getDouble(23);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_CharityGoal, true);
        }
        this.charityTotal = (double) rs.getDouble(24);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_CharityTotal, true);
        }
        this.itemUpcharge = (double) rs.getDouble(25);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_ItemUpcharge, true);
        }
        this.cardUpcharge = (double) rs.getDouble(26);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_CardUpcharge, true);
        }
        this.charityUpcharge = (double) rs.getDouble(27);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_CharityUpcharge, true);
        }
        this.cashUpcharge = (double) rs.getDouble(28);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_CashUpcharge, true);
        }
        this.testEmail = rs.getString(29);
        this.useAdvancedReports = rs.getBoolean(30);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UseAdvancedReports, true);
        }
        this.packetInstructions = rs.getString(31);
        this.ssoFailureUrl = rs.getString(32);
        this.ssoCode = rs.getString(33);
        this.ssoRedirectUrl = rs.getString(34);
        this.usesPoints = rs.getBoolean(35);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesPoints, true);
        }
        this.pointsBillingType = (int) rs.getInt(36);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_PointsBillingType, true);
        }
        this.ssoLogoutUrl = rs.getString(37);
        this.usesPeerToPeer = rs.getBoolean(38);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesPeerToPeer, true);
        }
        this.usesDiscretionary = rs.getBoolean(39);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesDiscretionary, true);
        }
        this.employeeAwardDaysBefore = (int) rs.getInt(40);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_EmployeeAwardDaysBefore, true);
        }
        this.companyPaysShipping = rs.getBoolean(41);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_CompanyPaysShipping, true);
        }
        this.usesNominations = rs.getBoolean(42);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesNominations, true);
        }
        this.usesManagerToolkit = rs.getBoolean(43);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Program.P_UsesManagerToolkit, true);
        }
        int announcementDocumentFkey = rs.getInt(44);
        if (!rs.wasNull() && announcementDocumentFkey > 0) {
            setProperty(P_AnnouncementDocument, new OAObjectKey(announcementDocumentFkey));
        }
        int ceoImageStoreFkey = rs.getInt(45);
        if (!rs.wasNull() && ceoImageStoreFkey > 0) {
            setProperty(P_CeoImageStore, new OAObjectKey(ceoImageStoreFkey));
        }
        int ceoSignatureImageStoreFkey = rs.getInt(46);
        if (!rs.wasNull() && ceoSignatureImageStoreFkey > 0) {
            setProperty(P_CeoSignatureImageStore, new OAObjectKey(ceoSignatureImageStoreFkey));
        }
        int companyFkey = rs.getInt(47);
        if (!rs.wasNull() && companyFkey > 0) {
            setProperty(P_Company, new OAObjectKey(companyFkey));
        }
        int countryCodeFkey = rs.getInt(48);
        if (!rs.wasNull() && countryCodeFkey > 0) {
            setProperty(P_CountryCode, new OAObjectKey(countryCodeFkey));
        }
        int imagineCardFkey = rs.getInt(49);
        if (!rs.wasNull() && imagineCardFkey > 0) {
            setProperty(P_ImagineCard, new OAObjectKey(imagineCardFkey));
        }
        int inspireAwardTypeFkey = rs.getInt(50);
        if (!rs.wasNull() && inspireAwardTypeFkey > 0) {
            setProperty(P_InspireAwardType, new OAObjectKey(inspireAwardTypeFkey));
        }
        int loginImageSetFkey = rs.getInt(51);
        if (!rs.wasNull() && loginImageSetFkey > 0) {
            setProperty(P_LoginImageSet, new OAObjectKey(loginImageSetFkey));
        }
        int logoStampImageStoreFkey = rs.getInt(52);
        if (!rs.wasNull() && logoStampImageStoreFkey > 0) {
            setProperty(P_LogoStampImageStore, new OAObjectKey(logoStampImageStoreFkey));
        }
        int managerHifiveSurveyFkey = rs.getInt(53);
        if (!rs.wasNull() && managerHifiveSurveyFkey > 0) {
            setProperty(P_ManagerHifiveSurvey, new OAObjectKey(managerHifiveSurveyFkey));
        }
        int pageThemeFkey = rs.getInt(54);
        if (!rs.wasNull() && pageThemeFkey > 0) {
            setProperty(P_PageTheme, new OAObjectKey(pageThemeFkey));
        }
        int pointsConfigurationFkey = rs.getInt(55);
        if (!rs.wasNull() && pointsConfigurationFkey > 0) {
            setProperty(P_PointsConfiguration, new OAObjectKey(pointsConfigurationFkey));
        }
        if (rs.getMetaData().getColumnCount() != 55) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

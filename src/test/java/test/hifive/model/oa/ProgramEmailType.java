// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pet",
    displayName = "Program Email Type",
    displayProperty = "emailType"
)
@OATable(
    indexes = {
        @OAIndex(name = "ProgramEmailTypeProgram", columns = { @OAIndexColumn(name = "ProgramId") })
    }
)
public class ProgramEmailType extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_AllowAutomaticSend = "AllowAutomaticSend";
    public static final String P_AllowAutomaticSend = "AllowAutomaticSend";
    public static final String PROPERTY_Subject = "Subject";
    public static final String P_Subject = "Subject";
    public static final String PROPERTY_Text = "Text";
    public static final String P_Text = "Text";
     
     
    public static final String PROPERTY_Emails = "Emails";
    public static final String P_Emails = "Emails";
    public static final String PROPERTY_EmailType = "EmailType";
    public static final String P_EmailType = "EmailType";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
     
    protected int id;
    protected OADate created;
    protected boolean allowAutomaticSend;
    protected String subject;
    protected String text;
     
    // Links to other objects.
    protected transient EmailType emailType;
    protected transient Program program;
     
    public ProgramEmailType() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public ProgramEmailType(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 28, columnLength = 22, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Allow Automatic Send", description = "flag to know if emails can be automatically sent.", displayLength = 5, columnName = "Auto")
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      flag to know if emails can be automatically sent.
    */
    public boolean getAllowAutomaticSend() {
        return allowAutomaticSend;
    }
    
    public void setAllowAutomaticSend(boolean newValue) {
        fireBeforePropertyChange(P_AllowAutomaticSend, this.allowAutomaticSend, newValue);
        boolean old = allowAutomaticSend;
        this.allowAutomaticSend = newValue;
        firePropertyChange(P_AllowAutomaticSend, old, this.allowAutomaticSend);
    }
    @OAProperty(maxLength = 150, isUnicode = true, displayLength = 25, columnLength = 22)
    @OAColumn(maxLength = 150)
    public String getSubject() {
        return subject;
    }
    
    public void setSubject(String newValue) {
        fireBeforePropertyChange(P_Subject, this.subject, newValue);
        String old = subject;
        this.subject = newValue;
        firePropertyChange(P_Subject, old, this.subject);
    }
    @OAProperty(maxLength = 4, isUnicode = true, displayLength = 4)
    @OAColumn(name = "TextValue", sqlType = java.sql.Types.CLOB)
    public String getText() {
        return text;
    }
    
    public void setText(String newValue) {
        fireBeforePropertyChange(P_Text, this.text, newValue);
        String old = text;
        this.text = newValue;
        firePropertyChange(P_Text, old, this.text);
    }
    @OAMany(
        toClass = Email.class, 
        reverseName = Email.P_ProgramEmailType, 
        createMethod = false
    )
    private Hub<Email> getEmails() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Email Type", 
        reverseName = EmailType.P_ProgramEmailTypes, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmailTypeId"})
    public EmailType getEmailType() {
        if (emailType == null) {
            emailType = (EmailType) getObject(PROPERTY_EmailType);
        }
        return emailType;
    }
    public void setEmailType(EmailType newValue) {
        EmailType old = this.emailType;
        fireBeforePropertyChange(PROPERTY_EmailType, old, newValue);
        this.emailType = newValue;
        firePropertyChange(PROPERTY_EmailType, old, this.emailType);
        
        // custom
        if (newValue == null || isLoading() || !isServer()) return;
        if (OAString.isEmpty(getText())) {
            setText(emailType.getText());
        }
        if (OAString.isEmpty(getSubject())) {
            setSubject(emailType.getSubject());
        }
    }
    @OAOne(
        reverseName = Program.P_ProgramEmailTypes, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProgramId"})
    public Program getProgram() {
        if (program == null) {
            program = (Program) getObject(P_Program);
        }
        return program;
    }
    
    public void setProgram(Program newValue) {
        fireBeforePropertyChange(P_Program, this.program, newValue);
        Program old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    
    // textFieldClass - this will return the root class used to insert fields for HtmlTextPane
/*    
    public Class getTextFieldClass() {
        EmailType et = getEmailType();
        return EmailTypeDelegate.getTextFieldClass(et);
    }
*/     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.allowAutomaticSend = rs.getBoolean(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ProgramEmailType.P_AllowAutomaticSend, true);
        }
        this.subject = rs.getString(4);
        this.text = rs.getString(5);
        int emailTypeFkey = rs.getInt(6);
        if (!rs.wasNull() && emailTypeFkey > 0) {
            setProperty(P_EmailType, new OAObjectKey(emailTypeFkey));
        }
        int programFkey = rs.getInt(7);
        if (!rs.wasNull() && programFkey > 0) {
            setProperty(P_Program, new OAObjectKey(programFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "qui",
    displayName = "Quiz",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "QuizLocation", columns = { @OAIndexColumn(name = "LocationId") }), 
        @OAIndex(name = "QuizProgram", columns = { @OAIndexColumn(name = "ProgramId") })
    }
)
public class Quiz extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
     
     
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
    public static final String PROPERTY_Questions = "Questions";
    public static final String P_Questions = "Questions";
    public static final String PROPERTY_QuizResults = "QuizResults";
    public static final String P_QuizResults = "QuizResults";
     
    protected int id;
    protected String name;
     
    // Links to other objects.
    protected transient Location location;
    protected transient Program program;
    protected transient Hub<Question> hubQuestions;
    protected transient Hub<QuizResult> hubQuizResults;
     
    public Quiz() {
    }
     
    public Quiz(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 40, displayLength = 40)
    @OAColumn(maxLength = 40)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAOne(
        reverseName = Location.P_NominationQuiz, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LocationId"})
    public Location getLocation() {
        if (location == null) {
            location = (Location) getObject(P_Location);
        }
        return location;
    }
    
    public void setLocation(Location newValue) {
        fireBeforePropertyChange(P_Location, this.location, newValue);
        Location old = this.location;
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
    
    @OAOne(
        reverseName = Program.P_NominationQuiz, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProgramId"})
    public Program getProgram() {
        if (program == null) {
            program = (Program) getObject(P_Program);
        }
        return program;
    }
    
    public void setProgram(Program newValue) {
        fireBeforePropertyChange(P_Program, this.program, newValue);
        Program old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    
    @OAMany(
        toClass = Question.class, 
        owner = true, 
        reverseName = Question.P_Quiz
    )
    public Hub<Question> getQuestions() {
        if (hubQuestions == null) {
            hubQuestions = (Hub<Question>) getHub(P_Questions);
        }
        return hubQuestions;
    }
    
    @OAMany(
        displayName = "Quiz Results", 
        toClass = QuizResult.class, 
        reverseName = QuizResult.P_Quiz
    )
    public Hub<QuizResult> getQuizResults() {
        if (hubQuizResults == null) {
            hubQuizResults = (Hub<QuizResult>) getHub(P_QuizResults);
        }
        return hubQuizResults;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        int locationFkey = rs.getInt(3);
        if (!rs.wasNull() && locationFkey > 0) {
            setProperty(P_Location, new OAObjectKey(locationFkey));
        }
        int programFkey = rs.getInt(4);
        if (!rs.wasNull() && programFkey > 0) {
            setProperty(P_Program, new OAObjectKey(programFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

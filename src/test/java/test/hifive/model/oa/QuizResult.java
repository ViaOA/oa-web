// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "qr",
    displayName = "Quiz Result",
    displayProperty = "name",
    sortProperty = "quiz"
)
@OATable(
    indexes = {
        @OAIndex(name = "QuizResultEmployee", columns = { @OAIndexColumn(name = "EmployeeId") }), 
        @OAIndex(name = "QuizResultQuiz", columns = { @OAIndexColumn(name = "QuizId") })
    }
)
public class QuizResult extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
     
     
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_PointsRequest = "PointsRequest";
    public static final String P_PointsRequest = "PointsRequest";
    public static final String PROPERTY_QuestionResults = "QuestionResults";
    public static final String P_QuestionResults = "QuestionResults";
    public static final String PROPERTY_Quiz = "Quiz";
    public static final String P_Quiz = "Quiz";
     
    protected int id;
    protected String name;
     
    // Links to other objects.
    protected transient Employee employee;
    protected transient PointsRequest pointsRequest;
    protected transient Hub<QuestionResult> hubQuestionResults;
    protected transient Quiz quiz;
     
    public QuizResult() {
    }
     
    public QuizResult(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 40, displayLength = 40)
    @OAColumn(maxLength = 40)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAOne(
        reverseName = Employee.P_QuizResults, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAOne(
        displayName = "Points Request", 
        reverseName = PointsRequest.P_QuizResult, 
        allowCreateNew = false
    )
    public PointsRequest getPointsRequest() {
        if (pointsRequest == null) {
            pointsRequest = (PointsRequest) getObject(P_PointsRequest);
        }
        return pointsRequest;
    }
    
    public void setPointsRequest(PointsRequest newValue) {
        fireBeforePropertyChange(P_PointsRequest, this.pointsRequest, newValue);
        PointsRequest old = this.pointsRequest;
        this.pointsRequest = newValue;
        firePropertyChange(P_PointsRequest, old, this.pointsRequest);
    }
    
    @OAMany(
        displayName = "Question Results", 
        toClass = QuestionResult.class, 
        owner = true, 
        reverseName = QuestionResult.P_QuizResult, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<QuestionResult> getQuestionResults() {
        if (hubQuestionResults == null) {
            hubQuestionResults = (Hub<QuestionResult>) getHub(P_QuestionResults);
        }
        return hubQuestionResults;
    }
    
    @OAOne(
        reverseName = Quiz.P_QuizResults
    )
    @OAFkey(columns = {"QuizId"})
    public Quiz getQuiz() {
        if (quiz == null) {
            quiz = (Quiz) getObject(P_Quiz);
        }
        return quiz;
    }
    
    public void setQuiz(Quiz newValue) {
        fireBeforePropertyChange(P_Quiz, this.quiz, newValue);
        Quiz old = this.quiz;
        this.quiz = newValue;
        firePropertyChange(P_Quiz, old, this.quiz);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        int employeeFkey = rs.getInt(3);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int quizFkey = rs.getInt(4);
        if (!rs.wasNull() && quizFkey > 0) {
            setProperty(P_Quiz, new OAObjectKey(quizFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rep",
    displayName = "Report",
    displayProperty = "name",
    sortProperty = "name",
    rootTreePropertyPaths = {
        "[ReportClass]."+ReportClass.P_Reports
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ReportParentReport", columns = { @OAIndexColumn(name = "ParentReportId") }), 
        @OAIndex(name = "ReportReportClass", columns = { @OAIndexColumn(name = "ReportClassId") })
    }
)
public class Report extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Orientation = "Orientation";
    public static final String P_Orientation = "Orientation";
    public static final String PROPERTY_OrientationAsString = "OrientationAsString";
    public static final String P_OrientationAsString = "OrientationAsString";
    public static final String PROPERTY_Template = "Template";
    public static final String P_Template = "Template";
     
     
    public static final String PROPERTY_ParentReport = "ParentReport";
    public static final String P_ParentReport = "ParentReport";
    public static final String PROPERTY_ReportClass = "ReportClass";
    public static final String P_ReportClass = "ReportClass";
    public static final String PROPERTY_Reports = "Reports";
    public static final String P_Reports = "Reports";
     
    protected int id;
    protected OADate created;
    protected String code;
    protected String name;
    protected int orientation;
    public static final int ORIENTATION_PORTRAIT = 0;
    public static final int ORIENTATION_LANDSCAPE = 1;
    public static final int ORIENTATION_CERTIFICATE = 2;
    public static final Hub<String> hubOrientation;
    static {
        hubOrientation = new Hub<String>(String.class);
        hubOrientation.addElement("Portrait");
        hubOrientation.addElement("Landscape");
        hubOrientation.addElement("Certificate");
    }
    protected String template;
     
    // Links to other objects.
    protected transient Report parentReport;
    protected transient ReportClass reportClass;
    protected transient Hub<Report> hubReports;
     
    public Report() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Report(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 20, displayLength = 8)
    @OAColumn(maxLength = 20)
    public String getCode() {
        return code;
    }
    
    public void setCode(String newValue) {
        fireBeforePropertyChange(P_Code, this.code, newValue);
        String old = code;
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
    @OAProperty(maxLength = 35, displayLength = 20)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getOrientation() {
        return orientation;
    }
    
    public void setOrientation(int newValue) {
        fireBeforePropertyChange(P_Orientation, this.orientation, newValue);
        int old = orientation;
        this.orientation = newValue;
        firePropertyChange(P_Orientation, old, this.orientation);
    }
    public String getOrientationAsString() {
        if (isNull(P_Orientation)) return "";
        String s = hubOrientation.getAt(getOrientation());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(maxLength = 8, displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getTemplate() {
        return template;
    }
    
    public void setTemplate(String newValue) {
        fireBeforePropertyChange(P_Template, this.template, newValue);
        String old = template;
        this.template = newValue;
        firePropertyChange(P_Template, old, this.template);
    }
    @OAOne(
        displayName = "Parent Report", 
        reverseName = Report.P_Reports
    )
    @OAFkey(columns = {"ParentReportId"})
    public Report getParentReport() {
        if (parentReport == null) {
            parentReport = (Report) getObject(P_ParentReport);
        }
        return parentReport;
    }
    
    public void setParentReport(Report newValue) {
        fireBeforePropertyChange(P_ParentReport, this.parentReport, newValue);
        Report old = this.parentReport;
        this.parentReport = newValue;
        firePropertyChange(P_ParentReport, old, this.parentReport);
    }
    
    @OAOne(
        displayName = "Report Class", 
        reverseName = ReportClass.P_Reports, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ReportClassId"})
    public ReportClass getReportClass() {
        if (reportClass == null) {
            reportClass = (ReportClass) getObject(P_ReportClass);
        }
        return reportClass;
    }
    
    public void setReportClass(ReportClass newValue) {
        fireBeforePropertyChange(P_ReportClass, this.reportClass, newValue);
        ReportClass old = this.reportClass;
        this.reportClass = newValue;
        firePropertyChange(P_ReportClass, old, this.reportClass);
    }
    
    @OAMany(
        toClass = Report.class, 
        recursive = true, 
        reverseName = Report.P_ParentReport
    )
    public Hub<Report> getReports() {
        if (hubReports == null) {
            hubReports = (Hub<Report>) getHub(P_Reports);
        }
        return hubReports;
    }
    
    // getTemplateFieldClass
    /**
        This is the method that the OAHTMLTextPane editor will look for to be able to 
        get the root class for inserting dynamic field values.
        pattern:  "get" + textFieldName + "Class()"
    */
/*    
    public Class getTemplateFieldClass() {
        return ReportDelegate.getTemplateFieldClass(this);
    }
*/     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.code = rs.getString(3);
        this.name = rs.getString(4);
        this.orientation = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Report.P_Orientation, true);
        }
        this.template = rs.getString(6);
        int parentReportFkey = rs.getInt(7);
        if (!rs.wasNull() && parentReportFkey > 0) {
            setProperty(P_ParentReport, new OAObjectKey(parentReportFkey));
        }
        int reportClassFkey = rs.getInt(8);
        if (!rs.wasNull() && reportClassFkey > 0) {
            setProperty(P_ReportClass, new OAObjectKey(reportClassFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

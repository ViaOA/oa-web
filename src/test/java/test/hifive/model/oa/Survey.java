// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "sur",
    displayName = "Survey",
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[Company]."+Company.P_Programs+"."+Program.P_Surveys
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "SurveyProgram", columns = { @OAIndexColumn(name = "ProgramId") }), 
        @OAIndex(name = "SurveyQuizProgram", columns = { @OAIndexColumn(name = "QuizProgramId") })
    }
)
public class Survey extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Descripiton = "Descripiton";
    public static final String P_Descripiton = "Descripiton";
    public static final String PROPERTY_AllowText = "AllowText";
    public static final String P_AllowText = "AllowText";
     
     
    public static final String PROPERTY_EmployeeSurveys = "EmployeeSurveys";
    public static final String P_EmployeeSurveys = "EmployeeSurveys";
    public static final String PROPERTY_ManagerSurveyProgram = "ManagerSurveyProgram";
    public static final String P_ManagerSurveyProgram = "ManagerSurveyProgram";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
    public static final String PROPERTY_QuizProgram = "QuizProgram";
    public static final String P_QuizProgram = "QuizProgram";
    public static final String PROPERTY_SurveyQuestions = "SurveyQuestions";
    public static final String P_SurveyQuestions = "SurveyQuestions";
     
    protected int id;
    protected OADate created;
    protected String name;
    protected String descripiton;
    protected boolean allowText;
     
    // Links to other objects.
    protected transient Program managerSurveyProgram;
    protected transient Program program;
    protected transient Program quizProgram;
    protected transient Hub<SurveyQuestion> hubSurveyQuestions;
     
    public Survey() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Survey(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 75, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 254, displayLength = 25)
    @OAColumn(maxLength = 254)
    public String getDescripiton() {
        return descripiton;
    }
    
    public void setDescripiton(String newValue) {
        fireBeforePropertyChange(P_Descripiton, this.descripiton, newValue);
        String old = descripiton;
        this.descripiton = newValue;
        firePropertyChange(P_Descripiton, old, this.descripiton);
    }
    @OAProperty(displayName = "Allow Text", displayLength = 5, columnLength = 9)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getAllowText() {
        return allowText;
    }
    
    public void setAllowText(boolean newValue) {
        fireBeforePropertyChange(P_AllowText, this.allowText, newValue);
        boolean old = allowText;
        this.allowText = newValue;
        firePropertyChange(P_AllowText, old, this.allowText);
    }
    @OAMany(
        displayName = "Employee Surveys", 
        toClass = EmployeeSurvey.class, 
        reverseName = EmployeeSurvey.P_Survey, 
        createMethod = false
    )
    private Hub<EmployeeSurvey> getEmployeeSurveys() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Manager Survey Program", 
        reverseName = Program.P_ManagerHifiveSurvey, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    public Program getManagerSurveyProgram() {
        if (managerSurveyProgram == null) {
            managerSurveyProgram = (Program) getObject(P_ManagerSurveyProgram);
        }
        return managerSurveyProgram;
    }
    
    public void setManagerSurveyProgram(Program newValue) {
        fireBeforePropertyChange(P_ManagerSurveyProgram, this.managerSurveyProgram, newValue);
        Program old = this.managerSurveyProgram;
        this.managerSurveyProgram = newValue;
        firePropertyChange(P_ManagerSurveyProgram, old, this.managerSurveyProgram);
    }
    
    @OAOne(
        reverseName = Program.P_Surveys, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProgramId"})
    public Program getProgram() {
        if (program == null) {
            program = (Program) getObject(P_Program);
        }
        return program;
    }
    
    public void setProgram(Program newValue) {
        fireBeforePropertyChange(P_Program, this.program, newValue);
        Program old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    
    @OAOne(
        displayName = "Quiz Program", 
        reverseName = Program.P_QuizSurveys
    )
    @OAFkey(columns = {"QuizProgramId"})
    public Program getQuizProgram() {
        if (quizProgram == null) {
            quizProgram = (Program) getObject(P_QuizProgram);
        }
        return quizProgram;
    }
    
    public void setQuizProgram(Program newValue) {
        fireBeforePropertyChange(P_QuizProgram, this.quizProgram, newValue);
        Program old = this.quizProgram;
        this.quizProgram = newValue;
        firePropertyChange(P_QuizProgram, old, this.quizProgram);
    }
    
    @OAMany(
        displayName = "Survey Questions", 
        toClass = SurveyQuestion.class, 
        owner = true, 
        reverseName = SurveyQuestion.P_Survey, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = SurveyQuestion.P_Seq, 
        sortProperty = SurveyQuestion.P_Seq
    )
    public Hub<SurveyQuestion> getSurveyQuestions() {
        if (hubSurveyQuestions == null) {
            hubSurveyQuestions = (Hub<SurveyQuestion>) getHub(P_SurveyQuestions);
        }
        return hubSurveyQuestions;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.name = rs.getString(3);
        this.descripiton = rs.getString(4);
        this.allowText = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Survey.P_AllowText, true);
        }
        int programFkey = rs.getInt(6);
        if (!rs.wasNull() && programFkey > 0) {
            setProperty(P_Program, new OAObjectKey(programFkey));
        }
        int quizProgramFkey = rs.getInt(7);
        if (!rs.wasNull() && quizProgramFkey > 0) {
            setProperty(P_QuizProgram, new OAObjectKey(quizProgramFkey));
        }
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa.filter;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.*;

import java.util.*;

@OAClass(useDataSource=false, localOnly=true)
@OAClassFilter(name = "MissingManager", displayName = "missing manager", hasInputParams = false, description = "there is a required manager that is missing")
public class InspireRecipientMissingManagerFilter extends OAObject implements CustomHubFilter<InspireRecipient> {
    private static final long serialVersionUID = 1L;


    public static final String PPCode = ":MissingManager()";
    private Hub<InspireRecipient> hubMaster;
    private Hub<InspireRecipient> hub;
    private HubFilter<InspireRecipient> filter;
    private boolean bAllHubs;

    public InspireRecipientMissingManagerFilter(Hub<InspireRecipient> hub) {
        this(true, null, hub);
    }
    public InspireRecipientMissingManagerFilter(Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub) {
        this(false, hubMaster, hub);
    }
    public InspireRecipientMissingManagerFilter(boolean bAllHubs, Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hubFiltered) {
        this.hubMaster = hubMaster;
        this.hub = hubFiltered;
        if (hubMaster == null) this.hubMaster = new Hub<InspireRecipient>(InspireRecipient.class);
        this.bAllHubs = bAllHubs;
        getHubFilter(); // create filter
    }


    public void reset() {
    }

    public boolean isDataEntered() {
        return false;
    }
    public void refresh() {
        if (filter != null) getHubFilter().refresh();
    }

    @Override
    public HubFilter<InspireRecipient> getHubFilter() {
        if (filter == null) {
            filter = createHubFilter(hubMaster, hub, bAllHubs);
        }
        return filter;
    }
    protected HubFilter<InspireRecipient> createHubFilter(final Hub<InspireRecipient> hubMaster, Hub<InspireRecipient> hub, boolean bAllHubs) {
        HubFilter<InspireRecipient> filter = new HubFilter<InspireRecipient>(hubMaster, hub) {
            @Override
            public boolean isUsed(InspireRecipient inspireRecipient) {
                return InspireRecipientMissingManagerFilter.this.isUsed(inspireRecipient);
            }
        };
        filter.addDependentProperty(InspireRecipient.P_Inspire);
        filter.addDependentProperty(InspireRecipient.P_Employee);
        filter.addDependentProperty(OAString.cpp(InspireRecipient.P_Inspire, Inspire.P_Employee));
 
        if (!bAllHubs) return filter;
        // need to listen to all InspireRecipient
        OAObjectCacheHubAdder hubCacheAdder = new OAObjectCacheHubAdder(hubMaster);
        return filter;
    }

    public boolean isUsed(InspireRecipient inspireRecipient) {
        if (inspireRecipient.getCompletedDate() != null) return false;
        if (inspireRecipient.getInspire() == null) return false;
        if (inspireRecipient.getEmployee() == null) return false;
        if (!inspireRecipient.getInspire().getWasAddedToEmployee()) return false;
        return inspireRecipient.getHasMissingManager();
    }
}

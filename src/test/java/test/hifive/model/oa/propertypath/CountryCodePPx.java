// Generated by OABuilder
package test.hifive.model.oa.propertypath;
 
import java.io.Serializable;

import test.hifive.model.oa.*;
 
public class CountryCodePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private LocationPPx calcLocations;
    private CurrencyTypePPx currencyType;
    private EmployeePPx employees;
    private LocationPPx locations;
    private ProgramPPx programs;
     
    public CountryCodePPx(String name) {
        this(null, name);
    }

    public CountryCodePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public LocationPPx calcLocations() {
        if (calcLocations == null) calcLocations = new LocationPPx(this, CountryCode.P_CalcLocations);
        return calcLocations;
    }

    public CurrencyTypePPx currencyType() {
        if (currencyType == null) currencyType = new CurrencyTypePPx(this, CountryCode.P_CurrencyType);
        return currencyType;
    }

    public EmployeePPx employees() {
        if (employees == null) employees = new EmployeePPx(this, CountryCode.P_Employees);
        return employees;
    }

    public LocationPPx locations() {
        if (locations == null) locations = new LocationPPx(this, CountryCode.P_Locations);
        return locations;
    }

    public ProgramPPx programs() {
        if (programs == null) programs = new ProgramPPx(this, CountryCode.P_Programs);
        return programs;
    }

    public String id() {
        return pp + "." + CountryCode.P_Id;
    }

    public String name() {
        return pp + "." + CountryCode.P_Name;
    }

    public String code() {
        return pp + "." + CountryCode.P_Code;
    }

    public String stateIsRequired() {
        return pp + "." + CountryCode.P_StateIsRequired;
    }

    public String stateName() {
        return pp + "." + CountryCode.P_StateName;
    }

    public String zipCodeIsRequired() {
        return pp + "." + CountryCode.P_ZipCodeIsRequired;
    }

    public String zipCodeName() {
        return pp + "." + CountryCode.P_ZipCodeName;
    }

    public String usesState() {
        return pp + "." + CountryCode.P_UsesState;
    }

    public String usesZipCode() {
        return pp + "." + CountryCode.P_UsesZipCode;
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

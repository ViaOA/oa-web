// Generated by OABuilder
package test.hifive.model.oa.propertypath;
 
import java.io.Serializable;

import test.hifive.model.oa.*;
 
public class EmployeePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private AddressPPx addresses;
    private EmployeePPx allEmployees;
    private ProgramPPx anniversaryProgram;
    private InspireRecipientPPx approvedInspires;
    private PointsRequestPPx approvedPointsRequests;
    private EmployeePPx BPEmployees;
    private EcardPPx calcAvailableEcards;
    private EmployeeAwardPPx calcAvailableEmployeeAwards;
    private AwardTypePPx calcAwardTypes;
    private EmployeePPx calcParentEmployee;
    private CountryCodePPx countryCode;
    private EmployeeAwardPPx employeeAwards;
    private EmployeeCustomDataPPx employeeCustomDatas;
    private EmployeeEcardToPPx employeeEcardRecipients;
    private EmployeeEcardPPx employeeEcards;
    private EmployeePPx employees;
    private EmployeeSurveyPPx employeeSurveys;
    private EmployeeTypePPx employeeType;
    private PointsIssuancePPx fromPointsIssuances;
    private HifivePPx hifiveNominations;
    private HifiveOrderPPx hifiveOrders;
    private HifivePPx hifives;
    private EmployeePPx HRBPartner;
    private InspireApprovalPPx inspireApprovals;
    private InspireAwardLevelLocationValuePPx inspireAwardLevelLocationValues;
    private InspireAwardLevelPPx inspireAwardLevels;
    private AwardTypePPx inspireAwardType;
    private InspireCoreValuePPx inspireCoreValues;
    private CardPPx inspireImagineCard;
    private InspireOrderPPx inspireOrders;
    private InspireRecipientPPx inspireRecipients;
    private InspirePPx inspires;
    private LocationPPx location;
    private HifivePPx managerHifives;
    private EmployeePPx parentEmployee;
    private PhonePPx phones;
    private PointsApprovalPPx pointsApprovals;
    private PointsRecordPPx pointsFromRecord;
    private PointsIssuancePPx pointsIssuances;
    private EmployeePPx pointsNextApproval;
    private EmployeePPx pointsPrevApproval;
    private PointsRequestPPx pointsRequest;
    private ProgramPPx program;
    private QuizResultPPx quizResults;
    private PointsAwardLevelPPx requiresMyApproval;
     
    public EmployeePPx(String name) {
        this(null, name);
    }

    public EmployeePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public AddressPPx addresses() {
        if (addresses == null) addresses = new AddressPPx(this, Employee.P_Addresses);
        return addresses;
    }

    public EmployeePPx allEmployees() {
        if (allEmployees == null) allEmployees = new EmployeePPx(this, Employee.P_AllEmployees);
        return allEmployees;
    }

    public ProgramPPx anniversaryProgram() {
        if (anniversaryProgram == null) anniversaryProgram = new ProgramPPx(this, Employee.P_AnniversaryProgram);
        return anniversaryProgram;
    }

    public InspireRecipientPPx approvedInspires() {
        if (approvedInspires == null) approvedInspires = new InspireRecipientPPx(this, Employee.P_ApprovedInspires);
        return approvedInspires;
    }

    public PointsRequestPPx approvedPointsRequests() {
        if (approvedPointsRequests == null) approvedPointsRequests = new PointsRequestPPx(this, Employee.P_ApprovedPointsRequests);
        return approvedPointsRequests;
    }

    public EmployeePPx BPEmployees() {
        if (BPEmployees == null) BPEmployees = new EmployeePPx(this, Employee.P_BPEmployees);
        return BPEmployees;
    }

    public EcardPPx calcAvailableEcards() {
        if (calcAvailableEcards == null) calcAvailableEcards = new EcardPPx(this, Employee.P_CalcAvailableEcards);
        return calcAvailableEcards;
    }

    public EmployeeAwardPPx calcAvailableEmployeeAwards() {
        if (calcAvailableEmployeeAwards == null) calcAvailableEmployeeAwards = new EmployeeAwardPPx(this, Employee.P_CalcAvailableEmployeeAwards);
        return calcAvailableEmployeeAwards;
    }

    public AwardTypePPx calcAwardTypes() {
        if (calcAwardTypes == null) calcAwardTypes = new AwardTypePPx(this, Employee.P_CalcAwardTypes);
        return calcAwardTypes;
    }

    public EmployeePPx calcParentEmployee() {
        if (calcParentEmployee == null) calcParentEmployee = new EmployeePPx(this, Employee.P_CalcParentEmployee);
        return calcParentEmployee;
    }

    public CountryCodePPx countryCode() {
        if (countryCode == null) countryCode = new CountryCodePPx(this, Employee.P_CountryCode);
        return countryCode;
    }

    public EmployeeAwardPPx employeeAwards() {
        if (employeeAwards == null) employeeAwards = new EmployeeAwardPPx(this, Employee.P_EmployeeAwards);
        return employeeAwards;
    }

    public EmployeeCustomDataPPx employeeCustomDatas() {
        if (employeeCustomDatas == null) employeeCustomDatas = new EmployeeCustomDataPPx(this, Employee.P_EmployeeCustomDatas);
        return employeeCustomDatas;
    }

    public EmployeeEcardToPPx employeeEcardRecipients() {
        if (employeeEcardRecipients == null) employeeEcardRecipients = new EmployeeEcardToPPx(this, Employee.P_EmployeeEcardRecipients);
        return employeeEcardRecipients;
    }

    public EmployeeEcardPPx employeeEcards() {
        if (employeeEcards == null) employeeEcards = new EmployeeEcardPPx(this, Employee.P_EmployeeEcards);
        return employeeEcards;
    }

    public EmployeePPx employees() {
        if (employees == null) employees = new EmployeePPx(this, Employee.P_Employees);
        return employees;
    }

    public EmployeeSurveyPPx employeeSurveys() {
        if (employeeSurveys == null) employeeSurveys = new EmployeeSurveyPPx(this, Employee.P_EmployeeSurveys);
        return employeeSurveys;
    }

    public EmployeeTypePPx employeeType() {
        if (employeeType == null) employeeType = new EmployeeTypePPx(this, Employee.P_EmployeeType);
        return employeeType;
    }

    public PointsIssuancePPx fromPointsIssuances() {
        if (fromPointsIssuances == null) fromPointsIssuances = new PointsIssuancePPx(this, Employee.P_FromPointsIssuances);
        return fromPointsIssuances;
    }

    public HifivePPx hifiveNominations() {
        if (hifiveNominations == null) hifiveNominations = new HifivePPx(this, Employee.P_HifiveNominations);
        return hifiveNominations;
    }

    public HifiveOrderPPx hifiveOrders() {
        if (hifiveOrders == null) hifiveOrders = new HifiveOrderPPx(this, Employee.P_HifiveOrders);
        return hifiveOrders;
    }

    public HifivePPx hifives() {
        if (hifives == null) hifives = new HifivePPx(this, Employee.P_Hifives);
        return hifives;
    }

    public EmployeePPx HRBPartner() {
        if (HRBPartner == null) HRBPartner = new EmployeePPx(this, Employee.P_HRBPartner);
        return HRBPartner;
    }

    public InspireApprovalPPx inspireApprovals() {
        if (inspireApprovals == null) inspireApprovals = new InspireApprovalPPx(this, Employee.P_InspireApprovals);
        return inspireApprovals;
    }

    public InspireAwardLevelLocationValuePPx inspireAwardLevelLocationValues() {
        if (inspireAwardLevelLocationValues == null) inspireAwardLevelLocationValues = new InspireAwardLevelLocationValuePPx(this, Employee.P_InspireAwardLevelLocationValues);
        return inspireAwardLevelLocationValues;
    }

    public InspireAwardLevelPPx inspireAwardLevels() {
        if (inspireAwardLevels == null) inspireAwardLevels = new InspireAwardLevelPPx(this, Employee.P_InspireAwardLevels);
        return inspireAwardLevels;
    }

    public AwardTypePPx inspireAwardType() {
        if (inspireAwardType == null) inspireAwardType = new AwardTypePPx(this, Employee.P_InspireAwardType);
        return inspireAwardType;
    }

    public InspireCoreValuePPx inspireCoreValues() {
        if (inspireCoreValues == null) inspireCoreValues = new InspireCoreValuePPx(this, Employee.P_InspireCoreValues);
        return inspireCoreValues;
    }

    public CardPPx inspireImagineCard() {
        if (inspireImagineCard == null) inspireImagineCard = new CardPPx(this, Employee.P_InspireImagineCard);
        return inspireImagineCard;
    }

    public InspireOrderPPx inspireOrders() {
        if (inspireOrders == null) inspireOrders = new InspireOrderPPx(this, Employee.P_InspireOrders);
        return inspireOrders;
    }

    public InspireRecipientPPx inspireRecipients() {
        if (inspireRecipients == null) inspireRecipients = new InspireRecipientPPx(this, Employee.P_InspireRecipients);
        return inspireRecipients;
    }

    public InspirePPx inspires() {
        if (inspires == null) inspires = new InspirePPx(this, Employee.P_Inspires);
        return inspires;
    }

    public LocationPPx location() {
        if (location == null) location = new LocationPPx(this, Employee.P_Location);
        return location;
    }

    public HifivePPx managerHifives() {
        if (managerHifives == null) managerHifives = new HifivePPx(this, Employee.P_ManagerHifives);
        return managerHifives;
    }

    public EmployeePPx parentEmployee() {
        if (parentEmployee == null) parentEmployee = new EmployeePPx(this, Employee.P_ParentEmployee);
        return parentEmployee;
    }

    public PhonePPx phones() {
        if (phones == null) phones = new PhonePPx(this, Employee.P_Phones);
        return phones;
    }

    public PointsApprovalPPx pointsApprovals() {
        if (pointsApprovals == null) pointsApprovals = new PointsApprovalPPx(this, Employee.P_PointsApprovals);
        return pointsApprovals;
    }

    public PointsRecordPPx pointsFromRecord() {
        if (pointsFromRecord == null) pointsFromRecord = new PointsRecordPPx(this, Employee.P_PointsFromRecord);
        return pointsFromRecord;
    }

    public PointsIssuancePPx pointsIssuances() {
        if (pointsIssuances == null) pointsIssuances = new PointsIssuancePPx(this, Employee.P_PointsIssuances);
        return pointsIssuances;
    }

    public EmployeePPx pointsNextApproval() {
        if (pointsNextApproval == null) pointsNextApproval = new EmployeePPx(this, Employee.P_PointsNextApproval);
        return pointsNextApproval;
    }

    public EmployeePPx pointsPrevApproval() {
        if (pointsPrevApproval == null) pointsPrevApproval = new EmployeePPx(this, Employee.P_PointsPrevApproval);
        return pointsPrevApproval;
    }

    public PointsRequestPPx pointsRequest() {
        if (pointsRequest == null) pointsRequest = new PointsRequestPPx(this, Employee.P_PointsRequest);
        return pointsRequest;
    }

    public ProgramPPx program() {
        if (program == null) program = new ProgramPPx(this, Employee.P_Program);
        return program;
    }

    public QuizResultPPx quizResults() {
        if (quizResults == null) quizResults = new QuizResultPPx(this, Employee.P_QuizResults);
        return quizResults;
    }

    public PointsAwardLevelPPx requiresMyApproval() {
        if (requiresMyApproval == null) requiresMyApproval = new PointsAwardLevelPPx(this, Employee.P_RequiresMyApproval);
        return requiresMyApproval;
    }

    public String id() {
        return pp + "." + Employee.P_Id;
    }

    public String created() {
        return pp + "." + Employee.P_Created;
    }

    public String employeeCode() {
        return pp + "." + Employee.P_EmployeeCode;
    }

    public String title() {
        return pp + "." + Employee.P_Title;
    }

    public String prefixName() {
        return pp + "." + Employee.P_PrefixName;
    }

    public String firstName() {
        return pp + "." + Employee.P_FirstName;
    }

    public String middleName() {
        return pp + "." + Employee.P_MiddleName;
    }

    public String lastName() {
        return pp + "." + Employee.P_LastName;
    }

    public String suffixName() {
        return pp + "." + Employee.P_SuffixName;
    }

    public String birthDate() {
        return pp + "." + Employee.P_BirthDate;
    }

    public String hireDate() {
        return pp + "." + Employee.P_HireDate;
    }

    public String loginId() {
        return pp + "." + Employee.P_LoginId;
    }

    public String password() {
        return pp + "." + Employee.P_Password;
    }

    public String inactiveDate() {
        return pp + "." + Employee.P_InactiveDate;
    }

    public String inactiveReason() {
        return pp + "." + Employee.P_InactiveReason;
    }

    public String admin() {
        return pp + "." + Employee.P_Admin;
    }

    public String email() {
        return pp + "." + Employee.P_Email;
    }

    public String email2() {
        return pp + "." + Employee.P_Email2;
    }

    public String workLocation() {
        return pp + "." + Employee.P_WorkLocation;
    }

    public String costCenter() {
        return pp + "." + Employee.P_CostCenter;
    }

    public String costCenterDescription() {
        return pp + "." + Employee.P_CostCenterDescription;
    }

    public String passwordAssignedDate() {
        return pp + "." + Employee.P_PasswordAssignedDate;
    }

    public String topLevelManager() {
        return pp + "." + Employee.P_TopLevelManager;
    }

    public String superApprover() {
        return pp + "." + Employee.P_SuperApprover;
    }

    public String division() {
        return pp + "." + Employee.P_Division;
    }

    public String isNominator() {
        return pp + "." + Employee.P_IsNominator;
    }

    public String companyCode() {
        return pp + "." + Employee.P_CompanyCode;
    }

    public String companyCodeName() {
        return pp + "." + Employee.P_CompanyCodeName;
    }

    public String maxNomLvl() {
        return pp + "." + Employee.P_MaxNomLvl;
    }

    public String fullName() {
        return pp + "." + Employee.P_FullName;
    }

    public String firstMiddleLastName() {
        return pp + "." + Employee.P_FirstMiddleLastName;
    }

    public String firstLastName() {
        return pp + "." + Employee.P_FirstLastName;
    }

    public String pointsIssuanceBalance() {
        return pp + "." + Employee.P_PointsIssuanceBalance;
    }

    public String isManagerOrGreater() {
        return pp + "." + Employee.P_IsManagerOrGreater;
    }

    public String isProgramManagerOrGreater() {
        return pp + "." + Employee.P_IsProgramManagerOrGreater;
    }

    public String hasOpenAward() {
        return pp + "." + Employee.P_HasOpenAward;
    }

    public String hasNewHifive() {
        return pp + "." + Employee.P_HasNewHifive;
    }

    public String getOpenAward() {
        return pp + "." + Employee.P_GetOpenAward;
    }

    public String hierarchyChanged() {
        return pp + "." + Employee.P_HierarchyChanged;
    }

    public String nextAnniversaryDate() {
        return pp + "." + Employee.P_NextAnniversaryDate;
    }

    public String calcCharityTotal() {
        return pp + "." + Employee.P_CalcCharityTotal;
    }

    public String inspirePointsBalance() {
        return pp + "." + Employee.P_InspirePointsBalance;
    }

    public String clearPassword() {
        return pp + "." + Employee.P_ClearPassword;
    }

    public String firstLastNamePlusTopLocation() {
        return pp + "." + Employee.P_FirstLastNamePlusTopLocation;
    }

    public String anniversaryDate() {
        return pp + "." + Employee.P_AnniversaryDate;
    }

    public String pointsTotal() {
        return pp + "." + Employee.P_PointsTotal;
    }

    public String pointsGrandTotal() {
        return pp + "." + Employee.P_PointsGrandTotal;
    }

    public String discretionaryPoints() {
        return pp + "." + Employee.P_DiscretionaryPoints;
    }

    public String updateHierarchy() {
        return pp + ".updateHierarchy";
    }

    public String currencyValueMethods() {
        return pp + ".currencyValueMethods";
    }

    public String customData() {
        return pp + ".customData";
    }

    public String reassignPassword() {
        return pp + ".reassignPassword";
    }

    public String getAnniversyDate() {
        return pp + ".getAnniversyDate";
    }

    public String getAnniversyNumber() {
        return pp + ".getAnniversyNumber";
    }

    public String register() {
        return pp + ".register";
    }

    public String getPointsCoreValues() {
        return pp + ".getPointsCoreValues";
    }

    public String getPointsAwardLevels() {
        return pp + ".getPointsAwardLevels";
    }

    public String loginAsThisEmployee() {
        return pp + ".loginAsThisEmployee";
    }

    public String nextAnniverseriesFilter() {
        return pp + ":nextAnniverseries()";
    }

    public String nextBirthdaysFilter() {
        return pp + ":nextBirthdays()";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

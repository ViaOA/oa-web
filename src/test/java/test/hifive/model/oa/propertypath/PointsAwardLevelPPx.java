// Generated by OABuilder
package test.hifive.model.oa.propertypath;
 
import java.io.Serializable;

import test.hifive.model.oa.*;
 
public class PointsAwardLevelPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private PointsApprovalPPx approvedApprovals;
    private LocationPPx location;
    private PointsRequestPPx pointsRequests;
    private ProgramPPx program;
    private EmployeePPx requiredApproval;
    private PointsApprovalPPx startingApprovals;
     
    public PointsAwardLevelPPx(String name) {
        this(null, name);
    }

    public PointsAwardLevelPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public PointsApprovalPPx approvedApprovals() {
        if (approvedApprovals == null) approvedApprovals = new PointsApprovalPPx(this, PointsAwardLevel.P_ApprovedApprovals);
        return approvedApprovals;
    }

    public LocationPPx location() {
        if (location == null) location = new LocationPPx(this, PointsAwardLevel.P_Location);
        return location;
    }

    public PointsRequestPPx pointsRequests() {
        if (pointsRequests == null) pointsRequests = new PointsRequestPPx(this, PointsAwardLevel.P_PointsRequests);
        return pointsRequests;
    }

    public ProgramPPx program() {
        if (program == null) program = new ProgramPPx(this, PointsAwardLevel.P_Program);
        return program;
    }

    public EmployeePPx requiredApproval() {
        if (requiredApproval == null) requiredApproval = new EmployeePPx(this, PointsAwardLevel.P_RequiredApproval);
        return requiredApproval;
    }

    public PointsApprovalPPx startingApprovals() {
        if (startingApprovals == null) startingApprovals = new PointsApprovalPPx(this, PointsAwardLevel.P_StartingApprovals);
        return startingApprovals;
    }

    public String id() {
        return pp + "." + PointsAwardLevel.P_Id;
    }

    public String name() {
        return pp + "." + PointsAwardLevel.P_Name;
    }

    public String seq() {
        return pp + "." + PointsAwardLevel.P_Seq;
    }

    public String approvalLevels() {
        return pp + "." + PointsAwardLevel.P_ApprovalLevels;
    }

    public String requireSuperApprover() {
        return pp + "." + PointsAwardLevel.P_RequireSuperApprover;
    }

    public String points() {
        return pp + "." + PointsAwardLevel.P_Points;
    }

    public String quizRangeMin() {
        return pp + "." + PointsAwardLevel.P_QuizRangeMin;
    }

    public String quizRangeMax() {
        return pp + "." + PointsAwardLevel.P_QuizRangeMax;
    }

    public String description() {
        return pp + "." + PointsAwardLevel.P_Description;
    }

    public String level() {
        return pp + "." + PointsAwardLevel.P_Level;
    }

    public String isAvailable() {
        return pp + ".isAvailable";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

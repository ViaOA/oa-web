// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac.delegate.ServerModelDelegate;
import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "ag",
    displayName = "Application Group",
    displayProperty = "name",
    sortProperty = "seq",
    rootTreePropertyPaths = {
        "[Site]."+Site.P_Environments+"."+Environment.P_Silos+"."+Silo.P_ApplicationGroups
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ApplicationGroupSilo", columns = { @OAIndexColumn(name = "SiloId") })
    }
)
public class ApplicationGroup extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
     
     
    public static final String PROPERTY_Applications = "Applications";
    public static final String P_Applications = "Applications";
    public static final String PROPERTY_ApplicationTypes = "ApplicationTypes";
    public static final String P_ApplicationTypes = "ApplicationTypes";
    public static final String PROPERTY_Schedules = "Schedules";
    public static final String P_Schedules = "Schedules";
    public static final String PROPERTY_Silo = "Silo";
    public static final String P_Silo = "Silo";
     
    protected int id;
    protected String code;
    protected String name;
    protected int seq;
     
    // Links to other objects.
    protected transient Hub<Application> hubApplications;
    protected transient Hub<ApplicationType> hubApplicationTypes;
    protected transient Hub<Schedule> hubSchedules;
    protected transient Silo silo;
     
    public ApplicationGroup() {
    }
     
    public ApplicationGroup(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 15, displayLength = 10, columnLength = 8)
    @OAColumn(maxLength = 15)
    public String getCode() {
        return code;
    }
    
    public void setCode(String newValue) {
        fireBeforePropertyChange(P_Code, this.code, newValue);
        String old = code;
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
    @OAProperty(maxLength = 55, displayLength = 25, columnLength = 22)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayLength = 5, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    
    public void setSeq(int newValue) {
        fireBeforePropertyChange(P_Seq, this.seq, newValue);
        int old = seq;
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAMany(
        toClass = Application.class, 
        reverseName = Application.P_ApplicationGroups
    )
    @OALinkTable(name = "ApplicationGroupApplication", indexName = "ApplicationApplicationGroup", columns = {"ApplicationGroupId"})
    public Hub<Application> getApplications() {
        if (hubApplications == null) {
            hubApplications = (Hub<Application>) getHub(P_Applications);
        }
        return hubApplications;
    }
    
    @OAMany(
        displayName = "Application Types", 
        toClass = ApplicationType.class, 
        reverseName = ApplicationType.P_ApplicationGroups
    )
    @OALinkTable(name = "ApplicationGroupApplicationType", indexName = "ApplicationTypeApplicationGroup", columns = {"ApplicationGroupId"})
    public Hub<ApplicationType> getApplicationTypes() {
        if (hubApplicationTypes == null) {
            hubApplicationTypes = (Hub<ApplicationType>) getHub(P_ApplicationTypes);
        }
        return hubApplicationTypes;
    }
    
    @OAMany(
        toClass = Schedule.class, 
        reverseName = Schedule.P_ApplicationGroup
    )
    public Hub<Schedule> getSchedules() {
        if (hubSchedules == null) {
            hubSchedules = (Hub<Schedule>) getHub(P_Schedules);
        }
        return hubSchedules;
    }
    
    @OAOne(
        reverseName = Silo.P_ApplicationGroups, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SiloId"})
    public Silo getSilo() {
        if (silo == null) {
            silo = (Silo) getObject(P_Silo);
        }
        return silo;
    }
    
    public void setSilo(Silo newValue) {
        fireBeforePropertyChange(P_Silo, this.silo, newValue);
        Silo old = this.silo;
        this.silo = newValue;
        firePropertyChange(P_Silo, old, this.silo);
    }
    
    // start - Start
    public void start() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().applicationGroup_start(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.start(this);
    */
    }
     
    // stop - Stop
    public void stop() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().applicationGroup_stop(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.stop(this);
    */
    }
     
    // kill - Kill
    public void kill() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().applicationGroup_kill(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.hardKill(this);
    */
    }
     
    // suspend - Suspend
    public void suspend() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().applicationGroup_suspend(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.suspend(this);
    */
    }
     
    // resume - Resume
    public void resume() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().applicationGroup_resume(this);
            return;
        }
        RemoteAdminServerInterface remote = RemoteDelegate.getRemoteAdminServerClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.resume(this);
    */
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        this.seq = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ApplicationGroup.P_Seq, true);
        }
        int siloFkey = rs.getInt(5);
        if (!rs.wasNull() && siloFkey > 0) {
            setProperty(P_Silo, new OAObjectKey(siloFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

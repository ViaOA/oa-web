// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.delegate.ServerModelDelegate;
import test.xice.tsac.delegate.oa.MRADServerCommandDelegate;
import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "mradsc",
    displayName = "MRAD Server Command",
    displayProperty = "type"
)
@OATable(
    indexes = {
        @OAIndex(name = "MRADServerCommandMradServer", columns = { @OAIndexColumn(name = "MradServerId") })
    }
)
public class MRADServerCommand extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Type = "Type";
    public static final String P_Type = "Type";
    public static final String PROPERTY_TypeAsString = "TypeAsString";
    public static final String P_TypeAsString = "TypeAsString";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_Console = "Console";
    public static final String P_Console = "Console";
     
     
    public static final String PROPERTY_AdminUser = "AdminUser";
    public static final String P_AdminUser = "AdminUser";
    public static final String PROPERTY_MRADClientCommands = "MRADClientCommands";
    public static final String P_MRADClientCommands = "MRADClientCommands";
    public static final String PROPERTY_MRADServer = "MRADServer";
    public static final String P_MRADServer = "MRADServer";
    public static final String PROPERTY_SSHExecute = "SSHExecute";
    public static final String P_SSHExecute = "SSHExecute";
     
    protected int id;
    protected OADateTime created;
    protected int type;
    public static final int TYPE_NONE = 0;
    public static final int TYPE_START = 1;
    public static final int TYPE_STARTSNAPSHOT = 2;
    public static final int TYPE_STOP = 3;
    public static final int TYPE_KILL = 4;
    public static final int TYPE_SUSPEND = 5;
    public static final int TYPE_RESUME = 6;
    public static final int TYPE_PING = 7;
    public static final int TYPE_UPDATE = 8;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("None");
        hubType.addElement("Start");
        hubType.addElement("Start Snapshot");
        hubType.addElement("Stop");
        hubType.addElement("Kill");
        hubType.addElement("Suspend");
        hubType.addElement("Resume");
        hubType.addElement("Ping");
        hubType.addElement("Update");
    }
    protected OADateTime started;
    protected String error;
    protected String console;
     
    // Links to other objects.
    protected transient AdminUser adminUser;
    protected transient Hub<MRADClientCommand> hubMRADClientCommands;
    protected transient MRADServer mradServer;
    protected transient SSHExecute sshExecute;
     
    public MRADServerCommand() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public MRADServerCommand(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 5, columnLength = 12, isProcessed = true, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    
    public void setType(int newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        int old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
    }
    public String getTypeAsString() {
        if (isNull(P_Type)) return "";
        String s = hubType.getAt(getType());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    
    public void setStarted(OADateTime newValue) {
        fireBeforePropertyChange(P_Started, this.started, newValue);
        OADateTime old = started;
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 15)
    @OAColumn(maxLength = 75)
    public String getError() {
        return error;
    }
    
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    @OAProperty(maxLength = 255, displayLength = 20, columnLength = 18)
    public String getConsole() {
        return console;
    }
    
    public void setConsole(String newValue) {
        fireBeforePropertyChange(P_Console, this.console, newValue);
        String old = console;
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    @OAOne(
        displayName = "Admin User", 
        reverseName = AdminUser.P_MRADServerCommands, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"AdminUserId"})
    public AdminUser getAdminUser() {
        if (adminUser == null) {
            adminUser = (AdminUser) getObject(P_AdminUser);
        }
        return adminUser;
    }
    
    public void setAdminUser(AdminUser newValue) {
        fireBeforePropertyChange(P_AdminUser, this.adminUser, newValue);
        AdminUser old = this.adminUser;
        this.adminUser = newValue;
        firePropertyChange(P_AdminUser, old, this.adminUser);
    }
    
    @OAMany(
        displayName = "MRAD Client Commands", 
        toClass = MRADClientCommand.class, 
        owner = true, 
        reverseName = MRADClientCommand.P_MRADServerCommand, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<MRADClientCommand> getMRADClientCommands() {
        if (hubMRADClientCommands == null) {
            hubMRADClientCommands = (Hub<MRADClientCommand>) getHub(P_MRADClientCommands);
        }
        return hubMRADClientCommands;
    }
    
    @OAOne(
        displayName = "MRAD Server", 
        reverseName = MRADServer.P_MRADServerCommands, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MradServerId"})
    public MRADServer getMRADServer() {
        if (mradServer == null) {
            mradServer = (MRADServer) getObject(P_MRADServer);
        }
        return mradServer;
    }
    
    public void setMRADServer(MRADServer newValue) {
        fireBeforePropertyChange(P_MRADServer, this.mradServer, newValue);
        MRADServer old = this.mradServer;
        this.mradServer = newValue;
        firePropertyChange(P_MRADServer, old, this.mradServer);
    }
    
    @OAOne(
        displayName = "SSH Execute", 
        reverseName = SSHExecute.P_MRADServerCommand
    )
    @OAFkey(columns = {"SshExecuteId"})
    public SSHExecute getSSHExecute() {
        if (sshExecute == null) {
            sshExecute = (SSHExecute) getObject(P_SSHExecute);
        }
        return sshExecute;
    }
    
    public void setSSHExecute(SSHExecute newValue) {
        fireBeforePropertyChange(P_SSHExecute, this.sshExecute, newValue);
        SSHExecute old = this.sshExecute;
        this.sshExecute = newValue;
        firePropertyChange(P_SSHExecute, old, this.sshExecute);
    }
    
    // runOnMRADServer - run command
    public void runOnMRADServer() throws Exception {
        MRADServerCommandDelegate.runOnMRADServer(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.type = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MRADServerCommand.P_Type, true);
        }
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        this.error = rs.getString(5);
        int adminUserFkey = rs.getInt(6);
        if (!rs.wasNull() && adminUserFkey > 0) {
            setProperty(P_AdminUser, new OAObjectKey(adminUserFkey));
        }
        int mradServerFkey = rs.getInt(7);
        if (!rs.wasNull() && mradServerFkey > 0) {
            setProperty(P_MRADServer, new OAObjectKey(mradServerFkey));
        }
        int sshExecuteFkey = rs.getInt(8);
        if (!rs.wasNull() && sshExecuteFkey > 0) {
            setProperty(P_SSHExecute, new OAObjectKey(sshExecuteFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

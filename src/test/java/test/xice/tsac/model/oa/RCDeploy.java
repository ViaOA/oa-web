// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.delegate.RemoteDelegate;
import test.xice.tsac.delegate.ServerModelDelegate;
import test.xice.tsac.delegate.oa.*;
import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rcd",
    displayName = "RC Deploy",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCDeployEnvironment", columns = { @OAIndexColumn(name = "EnvironmentId") })
    }
)
public class RCDeploy extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Console = "Console";
    public static final String P_Console = "Console";
     
     
    public static final String PROPERTY_Environment = "Environment";
    public static final String P_Environment = "Environment";
    public static final String PROPERTY_RCDeployDetails = "RCDeployDetails";
    public static final String P_RCDeployDetails = "RCDeployDetails";
    public static final String PROPERTY_RCDownload = "RCDownload";
    public static final String P_RCDownload = "RCDownload";
    public static final String PROPERTY_RCInstall = "RCInstall";
    public static final String P_RCInstall = "RCInstall";
    public static final String PROPERTY_RCStage = "RCStage";
    public static final String P_RCStage = "RCStage";
    public static final String PROPERTY_RCStart = "RCStart";
    public static final String P_RCStart = "RCStart";
    public static final String PROPERTY_RCStop = "RCStop";
    public static final String P_RCStop = "RCStop";
    public static final String PROPERTY_RCVerify = "RCVerify";
    public static final String P_RCVerify = "RCVerify";
     
    protected int id;
    protected OADateTime created;
    protected String console;
     
    // Links to other objects.
    protected transient Environment environment;
    protected transient Hub<RCDeployDetail> hubRCDeployDetails;
    protected transient RCDownload rcDownload;
    protected transient RCInstall rcInstall;
    protected transient RCStage rcStage;
    protected transient RCStart rcStart;
    protected transient RCStop rcStop;
    protected transient RCVerify rcVerify;
     
    public RCDeploy() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public RCDeploy(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 7, displayLength = 7)
    public String getConsole() {
        return console;
    }
    
    public void setConsole(String newValue) {
        fireBeforePropertyChange(P_Console, this.console, newValue);
        String old = console;
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    @OAOne(
        reverseName = Environment.P_RCDeploy, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EnvironmentId"})
    public Environment getEnvironment() {
        if (environment == null) {
            environment = (Environment) getObject(P_Environment);
        }
        return environment;
    }
    
    public void setEnvironment(Environment newValue) {
        fireBeforePropertyChange(P_Environment, this.environment, newValue);
        Environment old = this.environment;
        this.environment = newValue;
        firePropertyChange(P_Environment, old, this.environment);
    }
    
    @OAMany(
        displayName = "RC Deploy Details", 
        toClass = RCDeployDetail.class, 
        reverseName = RCDeployDetail.P_RCDeploy
    )
    public Hub<RCDeployDetail> getRCDeployDetails() {
        if (hubRCDeployDetails == null) {
            hubRCDeployDetails = (Hub<RCDeployDetail>) getHub(P_RCDeployDetails);
        }
        return hubRCDeployDetails;
    }
    
    @OAOne(
        displayName = "RC Download", 
        reverseName = RCDownload.P_RCDeploy
    )
    public RCDownload getRCDownload() {
        if (rcDownload == null) {
            rcDownload = (RCDownload) getObject(P_RCDownload);
        }
        return rcDownload;
    }
    
    public void setRCDownload(RCDownload newValue) {
        fireBeforePropertyChange(P_RCDownload, this.rcDownload, newValue);
        RCDownload old = this.rcDownload;
        this.rcDownload = newValue;
        firePropertyChange(P_RCDownload, old, this.rcDownload);
    }
    
    @OAOne(
        displayName = "RC Install", 
        reverseName = RCInstall.P_RCDeploy
    )
    public RCInstall getRCInstall() {
        if (rcInstall == null) {
            rcInstall = (RCInstall) getObject(P_RCInstall);
        }
        return rcInstall;
    }
    
    public void setRCInstall(RCInstall newValue) {
        fireBeforePropertyChange(P_RCInstall, this.rcInstall, newValue);
        RCInstall old = this.rcInstall;
        this.rcInstall = newValue;
        firePropertyChange(P_RCInstall, old, this.rcInstall);
    }
    
    @OAOne(
        displayName = "RC Stage", 
        reverseName = RCStage.P_RCDeploy
    )
    public RCStage getRCStage() {
        if (rcStage == null) {
            rcStage = (RCStage) getObject(P_RCStage);
        }
        return rcStage;
    }
    
    public void setRCStage(RCStage newValue) {
        fireBeforePropertyChange(P_RCStage, this.rcStage, newValue);
        RCStage old = this.rcStage;
        this.rcStage = newValue;
        firePropertyChange(P_RCStage, old, this.rcStage);
    }
    
    @OAOne(
        displayName = "RC Start", 
        reverseName = RCStart.P_RCDeploy
    )
    public RCStart getRCStart() {
        if (rcStart == null) {
            rcStart = (RCStart) getObject(P_RCStart);
        }
        return rcStart;
    }
    
    public void setRCStart(RCStart newValue) {
        fireBeforePropertyChange(P_RCStart, this.rcStart, newValue);
        RCStart old = this.rcStart;
        this.rcStart = newValue;
        firePropertyChange(P_RCStart, old, this.rcStart);
    }
    
    @OAOne(
        displayName = "RC Stop", 
        reverseName = RCStop.P_RCDeploy
    )
    public RCStop getRCStop() {
        if (rcStop == null) {
            rcStop = (RCStop) getObject(P_RCStop);
        }
        return rcStop;
    }
    
    public void setRCStop(RCStop newValue) {
        fireBeforePropertyChange(P_RCStop, this.rcStop, newValue);
        RCStop old = this.rcStop;
        this.rcStop = newValue;
        firePropertyChange(P_RCStop, old, this.rcStop);
    }
    
    @OAOne(
        displayName = "RC Verify", 
        reverseName = RCVerify.P_RCDeploy
    )
    public RCVerify getRCVerify() {
        if (rcVerify == null) {
            rcVerify = (RCVerify) getObject(P_RCVerify);
        }
        return rcVerify;
    }
    
    public void setRCVerify(RCVerify newValue) {
        fireBeforePropertyChange(P_RCVerify, this.rcVerify, newValue);
        RCVerify old = this.rcVerify;
        this.rcVerify = newValue;
        firePropertyChange(P_RCVerify, old, this.rcVerify);
    }
    
    // initialize - populate list of servers
    public void initialize() throws Exception {
        RCDeployDelegate.initialize(this);
    }
     
    // download - Downloading new versions
    public void download() throws Exception {
        RCDeployDelegate.download(this);
    }
     
    // stage - Stage downloaded files
    public void stage() throws Exception {
        RCDeployDelegate.stage(this);
    }
     
    // stop - stop applications
    public void stop() throws Exception {
        RCDeployDelegate.stop(this);
    }
     
    // install - Install staged versions
    public void install() throws Exception {
        RCDeployDelegate.install(this);
    }
     
    // verify - verify version that is installed
    public void verify() throws Exception {
        RCDeployDelegate.verify(this);
    }
     
    // start - start applications
    public void start() throws Exception {
        RCDeployDelegate.start(this);
    }
     
    // envImport
    public boolean envImport() {
        return EnvironmentDelegate.envImport(getEnvironment());
    }
     
    // envExport
    public boolean envExport() {
        return EnvironmentDelegate.envExport(getEnvironment());
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        int environmentFkey = rs.getInt(3);
        if (!rs.wasNull() && environmentFkey > 0) {
            setProperty(P_Environment, new OAObjectKey(environmentFkey));
        }
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

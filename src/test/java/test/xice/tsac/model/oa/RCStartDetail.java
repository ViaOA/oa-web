// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rcsd",
    displayName = "RC Start Detail"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCStartDetailRcDeployDetail", columns = { @OAIndexColumn(name = "RcDeployDetailId") }), 
        @OAIndex(name = "RCStartDetailRcStart", columns = { @OAIndexColumn(name = "RcStartId") })
    }
)
public class RCStartDetail extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Host = "Host";
    public static final String P_Host = "Host";
    public static final String PROPERTY_Service = "Service";
    public static final String P_Service = "Service";
    public static final String PROPERTY_Result = "Result";
    public static final String P_Result = "Result";
    public static final String PROPERTY_TotalTimeMs = "TotalTimeMs";
    public static final String P_TotalTimeMs = "TotalTimeMs";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_Stopped = "Stopped";
    public static final String P_Stopped = "Stopped";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_InvalidMessage = "InvalidMessage";
    public static final String P_InvalidMessage = "InvalidMessage";
     
     
    public static final String PROPERTY_RCDeployDetail = "RCDeployDetail";
    public static final String P_RCDeployDetail = "RCDeployDetail";
    public static final String PROPERTY_RCStart = "RCStart";
    public static final String P_RCStart = "RCStart";
     
    protected int id;
    protected String host;
    protected String service;
    protected String result;
    protected int totalTimeMs;
    protected OADateTime started;
    protected OADateTime stopped;
    protected String error;
    protected String invalidMessage;
     
    // Links to other objects.
    protected transient RCDeployDetail rcDeployDetail;
    protected transient RCStart rcStart;
     
    public RCStartDetail() {
    }
     
    public RCStartDetail(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 35, displayLength = 15, columnLength = 12)
    @OAColumn(maxLength = 35)
    public String getHost() {
        return host;
    }
    
    public void setHost(String newValue) {
        fireBeforePropertyChange(P_Host, this.host, newValue);
        String old = host;
        this.host = newValue;
        firePropertyChange(P_Host, old, this.host);
    }
    @OAProperty(maxLength = 20, displayLength = 8)
    @OAColumn(maxLength = 20)
    public String getService() {
        return service;
    }
    
    public void setService(String newValue) {
        fireBeforePropertyChange(P_Service, this.service, newValue);
        String old = service;
        this.service = newValue;
        firePropertyChange(P_Service, old, this.service);
    }
    @OAProperty(maxLength = 50, displayLength = 20, columnLength = 14)
    @OAColumn(maxLength = 50)
    public String getResult() {
        return result;
    }
    
    public void setResult(String newValue) {
        fireBeforePropertyChange(P_Result, this.result, newValue);
        String old = result;
        this.result = newValue;
        firePropertyChange(P_Result, old, this.result);
    }
    @OAProperty(displayName = "Total Time Ms", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getTotalTimeMs() {
        return totalTimeMs;
    }
    
    public void setTotalTimeMs(int newValue) {
        fireBeforePropertyChange(P_TotalTimeMs, this.totalTimeMs, newValue);
        int old = totalTimeMs;
        this.totalTimeMs = newValue;
        firePropertyChange(P_TotalTimeMs, old, this.totalTimeMs);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    
    public void setStarted(OADateTime newValue) {
        fireBeforePropertyChange(P_Started, this.started, newValue);
        OADateTime old = started;
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    @OAProperty(displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStopped() {
        return stopped;
    }
    
    public void setStopped(OADateTime newValue) {
        fireBeforePropertyChange(P_Stopped, this.stopped, newValue);
        OADateTime old = stopped;
        this.stopped = newValue;
        firePropertyChange(P_Stopped, old, this.stopped);
    }
    @OAProperty(maxLength = 75, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 75)
    public String getError() {
        return error;
    }
    
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    @OAProperty(displayName = "Invalid Message", maxLength = 120, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 120)
    public String getInvalidMessage() {
        return invalidMessage;
    }
    
    public void setInvalidMessage(String newValue) {
        fireBeforePropertyChange(P_InvalidMessage, this.invalidMessage, newValue);
        String old = invalidMessage;
        this.invalidMessage = newValue;
        firePropertyChange(P_InvalidMessage, old, this.invalidMessage);
    }
    @OAOne(
        displayName = "RC Deploy Detail", 
        reverseName = RCDeployDetail.P_RCStartDetail
    )
    @OAFkey(columns = {"RcDeployDetailId"})
    public RCDeployDetail getRCDeployDetail() {
        if (rcDeployDetail == null) {
            rcDeployDetail = (RCDeployDetail) getObject(P_RCDeployDetail);
        }
        return rcDeployDetail;
    }
    
    public void setRCDeployDetail(RCDeployDetail newValue) {
        fireBeforePropertyChange(P_RCDeployDetail, this.rcDeployDetail, newValue);
        RCDeployDetail old = this.rcDeployDetail;
        this.rcDeployDetail = newValue;
        firePropertyChange(P_RCDeployDetail, old, this.rcDeployDetail);
    }
    
    @OAOne(
        displayName = "RC Start", 
        reverseName = RCStart.P_RCStartDetails
    )
    @OAFkey(columns = {"RcStartId"})
    public RCStart getRCStart() {
        if (rcStart == null) {
            rcStart = (RCStart) getObject(P_RCStart);
        }
        return rcStart;
    }
    
    public void setRCStart(RCStart newValue) {
        fireBeforePropertyChange(P_RCStart, this.rcStart, newValue);
        RCStart old = this.rcStart;
        this.rcStart = newValue;
        firePropertyChange(P_RCStart, old, this.rcStart);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.host = rs.getString(2);
        this.service = rs.getString(3);
        this.result = rs.getString(4);
        this.totalTimeMs = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCStartDetail.P_TotalTimeMs, true);
        }
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(6);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.stopped = new OADateTime(timestamp);
        this.error = rs.getString(8);
        this.invalidMessage = rs.getString(9);
        int rcDeployDetailFkey = rs.getInt(10);
        if (!rs.wasNull() && rcDeployDetailFkey > 0) {
            setProperty(P_RCDeployDetail, new OAObjectKey(rcDeployDetailFkey));
        }
        int rcStartFkey = rs.getInt(11);
        if (!rs.wasNull() && rcStartFkey > 0) {
            setProperty(P_RCStart, new OAObjectKey(rcStartFkey));
        }
        if (rs.getMetaData().getColumnCount() != 11) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rm",
    displayName = "Request Method",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name"
)
@OATable(
)
public class RequestMethod extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_FunctionId = "FunctionId";
    public static final String P_FunctionId = "FunctionId";
    public static final String PROPERTY_RetryTimeoutSeconds = "RetryTimeoutSeconds";
    public static final String P_RetryTimeoutSeconds = "RetryTimeoutSeconds";
    public static final String PROPERTY_RetryWaitMs = "RetryWaitMs";
    public static final String P_RetryWaitMs = "RetryWaitMs";
    public static final String PROPERTY_GemstoneTimeoutSeconds = "GemstoneTimeoutSeconds";
    public static final String P_GemstoneTimeoutSeconds = "GemstoneTimeoutSeconds";
    public static final String PROPERTY_Disabled = "Disabled";
    public static final String P_Disabled = "Disabled";
    public static final String PROPERTY_UsesHeavy = "UsesHeavy";
    public static final String P_UsesHeavy = "UsesHeavy";
    public static final String PROPERTY_RetryOnHeavy = "RetryOnHeavy";
    public static final String P_RetryOnHeavy = "RetryOnHeavy";
    public static final String PROPERTY_AvgRequestPerDay = "AvgRequestPerDay";
    public static final String P_AvgRequestPerDay = "AvgRequestPerDay";
    public static final String PROPERTY_AvgResponseSize = "AvgResponseSize";
    public static final String P_AvgResponseSize = "AvgResponseSize";
    public static final String PROPERTY_AvgResponseMs = "AvgResponseMs";
    public static final String P_AvgResponseMs = "AvgResponseMs";
     
     
    public static final String PROPERTY_GSRequests = "GSRequests";
    public static final String P_GSRequests = "GSRequests";
     
    protected int id;
    protected OADateTime created;
    protected String name;
    protected int functionId;
    protected int retryTimeoutSeconds;
    protected int retryWaitMs;
    protected int gemstoneTimeoutSeconds;
    protected OADateTime disabled;
    protected boolean usesHeavy;
    protected boolean retryOnHeavy;
    protected int avgRequestPerDay;
    protected int avgResponseSize;
    protected int avgResponseMs;
     
    // Links to other objects.
     
    public RequestMethod() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public RequestMethod(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 75, displayLength = 35, columnLength = 40, isProcessed = true)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Function Id", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getFunctionId() {
        return functionId;
    }
    
    public void setFunctionId(int newValue) {
        fireBeforePropertyChange(P_FunctionId, this.functionId, newValue);
        int old = functionId;
        this.functionId = newValue;
        firePropertyChange(P_FunctionId, old, this.functionId);
    }
    @OAProperty(displayName = "Retry Timeout Seconds", displayLength = 5, isProcessed = true)
    @OAColumn(name = "TimeoutSeconds", sqlType = java.sql.Types.INTEGER)
    public int getRetryTimeoutSeconds() {
        return retryTimeoutSeconds;
    }
    
    public void setRetryTimeoutSeconds(int newValue) {
        fireBeforePropertyChange(P_RetryTimeoutSeconds, this.retryTimeoutSeconds, newValue);
        int old = retryTimeoutSeconds;
        this.retryTimeoutSeconds = newValue;
        firePropertyChange(P_RetryTimeoutSeconds, old, this.retryTimeoutSeconds);
    }
    @OAProperty(displayName = "Retry Wait Ms", displayLength = 5, isProcessed = true)
    @OAColumn(name = "TimeoutSeconds", sqlType = java.sql.Types.INTEGER)
    public int getRetryWaitMs() {
        return retryWaitMs;
    }
    
    public void setRetryWaitMs(int newValue) {
        fireBeforePropertyChange(P_RetryWaitMs, this.retryWaitMs, newValue);
        int old = retryWaitMs;
        this.retryWaitMs = newValue;
        firePropertyChange(P_RetryWaitMs, old, this.retryWaitMs);
    }
    @OAProperty(displayName = "Gemstone Timeout Seconds", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getGemstoneTimeoutSeconds() {
        return gemstoneTimeoutSeconds;
    }
    
    public void setGemstoneTimeoutSeconds(int newValue) {
        fireBeforePropertyChange(P_GemstoneTimeoutSeconds, this.gemstoneTimeoutSeconds, newValue);
        int old = gemstoneTimeoutSeconds;
        this.gemstoneTimeoutSeconds = newValue;
        firePropertyChange(P_GemstoneTimeoutSeconds, old, this.gemstoneTimeoutSeconds);
    }
    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getDisabled() {
        return disabled;
    }
    
    public void setDisabled(OADateTime newValue) {
        fireBeforePropertyChange(P_Disabled, this.disabled, newValue);
        OADateTime old = disabled;
        this.disabled = newValue;
        firePropertyChange(P_Disabled, old, this.disabled);
    }
    @OAProperty(displayName = "Uses Heavy", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesHeavy() {
        return usesHeavy;
    }
    
    public void setUsesHeavy(boolean newValue) {
        fireBeforePropertyChange(P_UsesHeavy, this.usesHeavy, newValue);
        boolean old = usesHeavy;
        this.usesHeavy = newValue;
        firePropertyChange(P_UsesHeavy, old, this.usesHeavy);
    }
    @OAProperty(displayName = "Retry On Heavy", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getRetryOnHeavy() {
        return retryOnHeavy;
    }
    
    public void setRetryOnHeavy(boolean newValue) {
        fireBeforePropertyChange(P_RetryOnHeavy, this.retryOnHeavy, newValue);
        boolean old = retryOnHeavy;
        this.retryOnHeavy = newValue;
        firePropertyChange(P_RetryOnHeavy, old, this.retryOnHeavy);
    }
    @OAProperty(displayName = "Avg Request Per Day", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getAvgRequestPerDay() {
        return avgRequestPerDay;
    }
    
    public void setAvgRequestPerDay(int newValue) {
        fireBeforePropertyChange(P_AvgRequestPerDay, this.avgRequestPerDay, newValue);
        int old = avgRequestPerDay;
        this.avgRequestPerDay = newValue;
        firePropertyChange(P_AvgRequestPerDay, old, this.avgRequestPerDay);
    }
    @OAProperty(displayName = "Avg Response Size", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getAvgResponseSize() {
        return avgResponseSize;
    }
    
    public void setAvgResponseSize(int newValue) {
        fireBeforePropertyChange(P_AvgResponseSize, this.avgResponseSize, newValue);
        int old = avgResponseSize;
        this.avgResponseSize = newValue;
        firePropertyChange(P_AvgResponseSize, old, this.avgResponseSize);
    }
    @OAProperty(displayName = "Avg Response (ms)", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getAvgResponseMs() {
        return avgResponseMs;
    }
    
    public void setAvgResponseMs(int newValue) {
        fireBeforePropertyChange(P_AvgResponseMs, this.avgResponseMs, newValue);
        int old = avgResponseMs;
        this.avgResponseMs = newValue;
        firePropertyChange(P_AvgResponseMs, old, this.avgResponseMs);
    }
    @OAMany(
        toClass = GSRequest.class, 
        reverseName = GSRequest.P_RequestMethod, 
        mustBeEmptyForDelete = true, 
        createMethod = false
    )
    private Hub<GSRequest> getGSRequests() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.functionId = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_FunctionId, true);
        }
        this.retryTimeoutSeconds = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_RetryTimeoutSeconds, true);
        }
        this.retryWaitMs = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_RetryWaitMs, true);
        }
        this.gemstoneTimeoutSeconds = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_GemstoneTimeoutSeconds, true);
        }
        timestamp = rs.getTimestamp(8);
        if (timestamp != null) this.disabled = new OADateTime(timestamp);
        this.usesHeavy = rs.getBoolean(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_UsesHeavy, true);
        }
        this.retryOnHeavy = rs.getBoolean(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_RetryOnHeavy, true);
        }
        this.avgRequestPerDay = (int) rs.getInt(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_AvgRequestPerDay, true);
        }
        this.avgResponseSize = (int) rs.getInt(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_AvgResponseSize, true);
        }
        this.avgResponseMs = (int) rs.getInt(13);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RequestMethod.P_AvgResponseMs, true);
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsac.model.oa.*;
 
public class RCExecutePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public RCExecutePPx(String name) {
        this(null, name);
    }

    public RCExecutePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public RCCommandPPx rcCommand() {
        RCCommandPPx ppx = new RCCommandPPx(this, RCExecute.P_RCCommand);
        return ppx;
    }

    public RCDownloadPPx rcDownloads() {
        RCDownloadPPx ppx = new RCDownloadPPx(this, RCExecute.P_RCDownloads);
        return ppx;
    }

    public RCInstalledVersionPPx rcInstalledVersions() {
        RCInstalledVersionPPx ppx = new RCInstalledVersionPPx(this, RCExecute.P_RCInstalledVersions);
        return ppx;
    }

    public RCInstallPPx rcInstalls() {
        RCInstallPPx ppx = new RCInstallPPx(this, RCExecute.P_RCInstalls);
        return ppx;
    }

    public RCPackageListPPx rcPackageLists() {
        RCPackageListPPx ppx = new RCPackageListPPx(this, RCExecute.P_RCPackageLists);
        return ppx;
    }

    public RCRepoVersionPPx rcRepoVersions() {
        RCRepoVersionPPx ppx = new RCRepoVersionPPx(this, RCExecute.P_RCRepoVersions);
        return ppx;
    }

    public RCServerListPPx rcServerLists() {
        RCServerListPPx ppx = new RCServerListPPx(this, RCExecute.P_RCServerLists);
        return ppx;
    }

    public RCServiceListPPx rcServiceLists() {
        RCServiceListPPx ppx = new RCServiceListPPx(this, RCExecute.P_RCServiceLists);
        return ppx;
    }

    public RCStagePPx rcStages() {
        RCStagePPx ppx = new RCStagePPx(this, RCExecute.P_RCStages);
        return ppx;
    }

    public RCStartPPx rcStarts() {
        RCStartPPx ppx = new RCStartPPx(this, RCExecute.P_RCStarts);
        return ppx;
    }

    public RCStopPPx rcStops() {
        RCStopPPx ppx = new RCStopPPx(this, RCExecute.P_RCStops);
        return ppx;
    }

    public RCVerifyPPx rcVerifies() {
        RCVerifyPPx ppx = new RCVerifyPPx(this, RCExecute.P_RCVerifies);
        return ppx;
    }

    public RemoteClientPPx remoteClient() {
        RemoteClientPPx ppx = new RemoteClientPPx(this, RCExecute.P_RemoteClient);
        return ppx;
    }

    public String id() {
        return pp + "." + RCExecute.P_Id;
    }

    public String created() {
        return pp + "." + RCExecute.P_Created;
    }

    public String started() {
        return pp + "." + RCExecute.P_Started;
    }

    public String completed() {
        return pp + "." + RCExecute.P_Completed;
    }

    public String commandLine() {
        return pp + "." + RCExecute.P_CommandLine;
    }

    public String configFileName() {
        return pp + "." + RCExecute.P_ConfigFileName;
    }

    public String input() {
        return pp + "." + RCExecute.P_Input;
    }

    public String output() {
        return pp + "." + RCExecute.P_Output;
    }

    public String error() {
        return pp + "." + RCExecute.P_Error;
    }

    public String console() {
        return pp + "." + RCExecute.P_Console;
    }

    public String processed() {
        return pp + "." + RCExecute.P_Processed;
    }

    public String processingOutput() {
        return pp + "." + RCExecute.P_ProcessingOutput;
    }

    public String loaded() {
        return pp + "." + RCExecute.P_Loaded;
    }

    public String canRun() {
        return pp + "." + RCExecute.P_CanRun;
    }

    public String run() {
        return pp + ".run";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

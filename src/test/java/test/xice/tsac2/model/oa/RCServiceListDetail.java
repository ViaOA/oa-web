// Generated by OABuilder
package test.xice.tsac2.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac2.model.oa.filter.*;
import test.xice.tsac2.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "rcsld",
    displayName = "RCService List Detail",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCServiceListDetailRcServiceList", columns = { @OAIndexColumn(name = "RcServiceListId") })
    }
)
public class RCServiceListDetail extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Login = "Login";
    public static final String P_Login = "Login";
    public static final String PROPERTY_Packages = "Packages";
    public static final String P_Packages = "Packages";
    public static final String PROPERTY_Type = "Type";
    public static final String P_Type = "Type";
    public static final String PROPERTY_BaseDirectory = "BaseDirectory";
    public static final String P_BaseDirectory = "BaseDirectory";
    public static final String PROPERTY_StartCommand = "StartCommand";
    public static final String P_StartCommand = "StartCommand";
    public static final String PROPERTY_StopCommand = "StopCommand";
    public static final String P_StopCommand = "StopCommand";
    public static final String PROPERTY_HealthPort = "HealthPort";
    public static final String P_HealthPort = "HealthPort";
    public static final String PROPERTY_InvalidMessage = "InvalidMessage";
    public static final String P_InvalidMessage = "InvalidMessage";
    public static final String PROPERTY_Selected = "Selected";
    public static final String P_Selected = "Selected";
    public static final String PROPERTY_Loaded = "Loaded";
    public static final String P_Loaded = "Loaded";
     
     
    public static final String PROPERTY_ApplicationType = "ApplicationType";
    public static final String P_ApplicationType = "ApplicationType";
    public static final String PROPERTY_RCServiceList = "RCServiceList";
    public static final String P_RCServiceList = "RCServiceList";
     
    protected int id;
    protected String name;
    protected String login;
    protected String packages;
    protected String type;
    protected String baseDirectory;
    protected String startCommand;
    protected String stopCommand;
    protected int healthPort;
    protected String invalidMessage;
    protected boolean selected;
    protected boolean loaded;
     
    // Links to other objects.
    protected transient ApplicationType applicationType;
    protected transient RCServiceList rcServiceList;
     
    public RCServiceListDetail() {
    }
     
    public RCServiceListDetail(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 25, displayLength = 8, columnLength = 5)
    @OAColumn(maxLength = 25)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 25, displayLength = 18, columnLength = 12)
    @OAColumn(maxLength = 25)
    public String getLogin() {
        return login;
    }
    
    public void setLogin(String newValue) {
        fireBeforePropertyChange(P_Login, this.login, newValue);
        String old = login;
        this.login = newValue;
        firePropertyChange(P_Login, old, this.login);
    }
    @OAProperty(maxLength = 128, displayLength = 24, columnLength = 10)
    @OAColumn(maxLength = 128)
    public String getPackages() {
        return packages;
    }
    
    public void setPackages(String newValue) {
        fireBeforePropertyChange(P_Packages, this.packages, newValue);
        String old = packages;
        this.packages = newValue;
        firePropertyChange(P_Packages, old, this.packages);
    }
    @OAProperty(maxLength = 25, displayLength = 8, columnLength = 7)
    @OAColumn(maxLength = 25)
    public String getType() {
        return type;
    }
    
    public void setType(String newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        String old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
    }
    @OAProperty(displayName = "Base Directory", maxLength = 128, displayLength = 25, columnLength = 14)
    @OAColumn(maxLength = 128)
    public String getBaseDirectory() {
        return baseDirectory;
    }
    
    public void setBaseDirectory(String newValue) {
        fireBeforePropertyChange(P_BaseDirectory, this.baseDirectory, newValue);
        String old = baseDirectory;
        this.baseDirectory = newValue;
        firePropertyChange(P_BaseDirectory, old, this.baseDirectory);
    }
    @OAProperty(displayName = "Start Command", maxLength = 128, displayLength = 30, columnLength = 18)
    @OAColumn(maxLength = 128)
    public String getStartCommand() {
        return startCommand;
    }
    
    public void setStartCommand(String newValue) {
        fireBeforePropertyChange(P_StartCommand, this.startCommand, newValue);
        String old = startCommand;
        this.startCommand = newValue;
        firePropertyChange(P_StartCommand, old, this.startCommand);
    }
    @OAProperty(displayName = "Stop Command", maxLength = 128, displayLength = 40, columnLength = 18)
    @OAColumn(name = "StartCommand", maxLength = 128)
    public String getStopCommand() {
        return stopCommand;
    }
    
    public void setStopCommand(String newValue) {
        fireBeforePropertyChange(P_StopCommand, this.stopCommand, newValue);
        String old = stopCommand;
        this.stopCommand = newValue;
        firePropertyChange(P_StopCommand, old, this.stopCommand);
    }
    @OAProperty(displayName = "Health Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getHealthPort() {
        return healthPort;
    }
    
    public void setHealthPort(int newValue) {
        fireBeforePropertyChange(P_HealthPort, this.healthPort, newValue);
        int old = healthPort;
        this.healthPort = newValue;
        firePropertyChange(P_HealthPort, old, this.healthPort);
    }
    @OAProperty(displayName = "Invalid Message", maxLength = 120, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 120)
    public String getInvalidMessage() {
        return invalidMessage;
    }
    
    public void setInvalidMessage(String newValue) {
        fireBeforePropertyChange(P_InvalidMessage, this.invalidMessage, newValue);
        String old = invalidMessage;
        this.invalidMessage = newValue;
        firePropertyChange(P_InvalidMessage, old, this.invalidMessage);
    }
    @OAProperty(displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSelected() {
        return selected;
    }
    
    public void setSelected(boolean newValue) {
        fireBeforePropertyChange(P_Selected, this.selected, newValue);
        boolean old = selected;
        this.selected = newValue;
        firePropertyChange(P_Selected, old, this.selected);
    }
    @OAProperty(displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getLoaded() {
        return loaded;
    }
    
    public void setLoaded(boolean newValue) {
        fireBeforePropertyChange(P_Loaded, this.loaded, newValue);
        boolean old = loaded;
        this.loaded = newValue;
        firePropertyChange(P_Loaded, old, this.loaded);
    }
    @OAOne(
        displayName = "Application Type", 
        reverseName = ApplicationType.P_RCServiceListDetails, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationTypeId"})
    public ApplicationType getApplicationType() {
        if (applicationType == null) {
            applicationType = (ApplicationType) getObject(P_ApplicationType);
        }
        return applicationType;
    }
    
    public void setApplicationType(ApplicationType newValue) {
        fireBeforePropertyChange(P_ApplicationType, this.applicationType, newValue);
        ApplicationType old = this.applicationType;
        this.applicationType = newValue;
        firePropertyChange(P_ApplicationType, old, this.applicationType);
    }
    
    @OAOne(
        displayName = "RCService List", 
        reverseName = RCServiceList.P_RCServiceListDetails, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"RcServiceListId"})
    public RCServiceList getRCServiceList() {
        if (rcServiceList == null) {
            rcServiceList = (RCServiceList) getObject(P_RCServiceList);
        }
        return rcServiceList;
    }
    
    public void setRCServiceList(RCServiceList newValue) {
        fireBeforePropertyChange(P_RCServiceList, this.rcServiceList, newValue);
        RCServiceList old = this.rcServiceList;
        this.rcServiceList = newValue;
        firePropertyChange(P_RCServiceList, old, this.rcServiceList);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.login = rs.getString(3);
        this.packages = rs.getString(4);
        this.type = rs.getString(5);
        this.baseDirectory = rs.getString(6);
        this.startCommand = rs.getString(7);
        this.stopCommand = rs.getString(8);
        this.healthPort = (int) rs.getInt(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCServiceListDetail.P_HealthPort, true);
        }
        this.invalidMessage = rs.getString(10);
        this.selected = rs.getBoolean(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCServiceListDetail.P_Selected, true);
        }
        this.loaded = rs.getBoolean(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCServiceListDetail.P_Loaded, true);
        }
        int applicationTypeFkey = rs.getInt(13);
        if (!rs.wasNull() && applicationTypeFkey > 0) {
            setProperty(P_ApplicationType, new OAObjectKey(applicationTypeFkey));
        }
        int rcServiceListFkey = rs.getInt(14);
        if (!rs.wasNull() && rcServiceListFkey > 0) {
            setProperty(P_RCServiceList, new OAObjectKey(rcServiceListFkey));
        }
        if (rs.getMetaData().getColumnCount() != 14) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

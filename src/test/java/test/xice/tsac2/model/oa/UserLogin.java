// Generated by OABuilder
package test.xice.tsac2.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac2.model.oa.filter.*;
import test.xice.tsac2.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ul",
    displayName = "User Login",
    displayProperty = "user",
    sortProperty = "user.lastName"
)
@OATable(
    indexes = {
        @OAIndex(name = "UserLoginLladClient", columns = { @OAIndexColumn(name = "LladClientId") }), 
        @OAIndex(name = "UserLoginUser", columns = { @OAIndexColumn(name = "UserId") })
    }
)
public class UserLogin extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Login = "Login";
    public static final String P_Login = "Login";
    public static final String PROPERTY_Gateway = "Gateway";
    public static final String P_Gateway = "Gateway";
    public static final String PROPERTY_Password = "Password";
    public static final String P_Password = "Password";
     
     
    public static final String PROPERTY_ClientAppType = "ClientAppType";
    public static final String P_ClientAppType = "ClientAppType";
    public static final String PROPERTY_LLADClient = "LLADClient";
    public static final String P_LLADClient = "LLADClient";
    public static final String PROPERTY_LoginType = "LoginType";
    public static final String P_LoginType = "LoginType";
    public static final String PROPERTY_User = "User";
    public static final String P_User = "User";
     
    protected int id;
    protected OADateTime login;
    protected String gateway;
    protected String password;
     
    // Links to other objects.
    protected transient ClientAppType clientAppType;
    protected transient LLADClient lladClient;
    protected transient LoginType loginType;
    protected transient User user;
     
    public UserLogin() {
    }
     
    public UserLogin(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Date/Time", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getLogin() {
        return login;
    }
    
    public void setLogin(OADateTime newValue) {
        fireBeforePropertyChange(P_Login, this.login, newValue);
        OADateTime old = login;
        this.login = newValue;
        firePropertyChange(P_Login, old, this.login);
    }
    @OAProperty(maxLength = 55, displayLength = 20, columnLength = 17, isProcessed = true)
    @OAColumn(maxLength = 55)
    public String getGateway() {
        return gateway;
    }
    
    public void setGateway(String newValue) {
        fireBeforePropertyChange(P_Gateway, this.gateway, newValue);
        String old = gateway;
        this.gateway = newValue;
        firePropertyChange(P_Gateway, old, this.gateway);
    }
    @OAProperty(maxLength = 15, displayLength = 10, isPassword = true, isProcessed = true)
    @OAColumn(maxLength = 15)
    public String getPassword() {
        return password;
    }
    
    public void setPassword(String newValue) {
        fireBeforePropertyChange(P_Password, this.password, newValue);
        String old = password;
        this.password = newValue;
        firePropertyChange(P_Password, old, this.password);
    }
    @OAOne(
        displayName = "Client App Type", 
        reverseName = ClientAppType.P_UserLogins, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ClientAppTypeId"})
    public ClientAppType getClientAppType() {
        if (clientAppType == null) {
            clientAppType = (ClientAppType) getObject(P_ClientAppType);
        }
        return clientAppType;
    }
    
    public void setClientAppType(ClientAppType newValue) {
        fireBeforePropertyChange(P_ClientAppType, this.clientAppType, newValue);
        ClientAppType old = this.clientAppType;
        this.clientAppType = newValue;
        firePropertyChange(P_ClientAppType, old, this.clientAppType);
    }
    
    @OAOne(
        reverseName = LLADClient.P_UserLogins, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LladClientId"})
    public LLADClient getLLADClient() {
        if (lladClient == null) {
            lladClient = (LLADClient) getObject(P_LLADClient);
        }
        return lladClient;
    }
    
    public void setLLADClient(LLADClient newValue) {
        fireBeforePropertyChange(P_LLADClient, this.lladClient, newValue);
        LLADClient old = this.lladClient;
        this.lladClient = newValue;
        firePropertyChange(P_LLADClient, old, this.lladClient);
    }
    
    @OAOne(
        displayName = "Login Type", 
        reverseName = LoginType.P_UserLogins, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LoginTypeId"})
    public LoginType getLoginType() {
        if (loginType == null) {
            loginType = (LoginType) getObject(P_LoginType);
        }
        return loginType;
    }
    
    public void setLoginType(LoginType newValue) {
        fireBeforePropertyChange(P_LoginType, this.loginType, newValue);
        LoginType old = this.loginType;
        this.loginType = newValue;
        firePropertyChange(P_LoginType, old, this.loginType);
    }
    
    @OAOne(
        reverseName = User.P_UserLogins, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"UserId"})
    public User getUser() {
        if (user == null) {
            user = (User) getObject(P_User);
        }
        return user;
    }
    
    public void setUser(User newValue) {
        fireBeforePropertyChange(P_User, this.user, newValue);
        User old = this.user;
        this.user = newValue;
        firePropertyChange(P_User, old, this.user);
    }
    
    // forceLogout - Force Logout
    public void forceLogout() {
    }
     
    // refreshUserCache - Refresh User Cache
    public void refreshUserCache() {
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.login = new OADateTime(timestamp);
        this.gateway = rs.getString(3);
        this.password = rs.getString(4);
        int clientAppTypeFkey = rs.getInt(5);
        if (!rs.wasNull() && clientAppTypeFkey > 0) {
            setProperty(P_ClientAppType, new OAObjectKey(clientAppTypeFkey));
        }
        int lladClientFkey = rs.getInt(6);
        if (!rs.wasNull() && lladClientFkey > 0) {
            setProperty(P_LLADClient, new OAObjectKey(lladClientFkey));
        }
        int loginTypeFkey = rs.getInt(7);
        if (!rs.wasNull() && loginTypeFkey > 0) {
            setProperty(P_LoginType, new OAObjectKey(loginTypeFkey));
        }
        int userFkey = rs.getInt(8);
        if (!rs.wasNull() && userFkey > 0) {
            setProperty(P_User, new OAObjectKey(userFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

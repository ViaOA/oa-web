// Generated by OABuilder
package test.xice.tsac2.model.oa.propertypath;
 
import test.xice.tsac2.model.oa.*;
 
public class ApplicationTypePP {
    private static ApplicationPPx applications;
    private static PackageTypePPx packageTypes;
    private static RCServiceListDetailPPx rcServiceListDetails;
    private static SiloConfigPPx siloConfigs;
    private static SiloTypePPx siloTypes;
     

    public static ApplicationPPx applications() {
        if (applications == null) applications = new ApplicationPPx(ApplicationType.P_Applications);
        return applications;
    }

    public static PackageTypePPx packageTypes() {
        if (packageTypes == null) packageTypes = new PackageTypePPx(ApplicationType.P_PackageTypes);
        return packageTypes;
    }

    public static RCServiceListDetailPPx rcServiceListDetails() {
        if (rcServiceListDetails == null) rcServiceListDetails = new RCServiceListDetailPPx(ApplicationType.P_RCServiceListDetails);
        return rcServiceListDetails;
    }

    public static SiloConfigPPx siloConfigs() {
        if (siloConfigs == null) siloConfigs = new SiloConfigPPx(ApplicationType.P_SiloConfigs);
        return siloConfigs;
    }

    public static SiloTypePPx siloTypes() {
        if (siloTypes == null) siloTypes = new SiloTypePPx(ApplicationType.P_SiloTypes);
        return siloTypes;
    }

    public static String id() {
        String s = ApplicationType.P_Id;
        return s;
    }

    public static String code() {
        String s = ApplicationType.P_Code;
        return s;
    }

    public static String name() {
        String s = ApplicationType.P_Name;
        return s;
    }

    public static String description() {
        String s = ApplicationType.P_Description;
        return s;
    }

    public static String serverTypeId() {
        String s = ApplicationType.P_ServerTypeId;
        return s;
    }

    public static String usesCron() {
        String s = ApplicationType.P_UsesCron;
        return s;
    }

    public static String usesPool() {
        String s = ApplicationType.P_UsesPool;
        return s;
    }

    public static String usesDns() {
        String s = ApplicationType.P_UsesDns;
        return s;
    }

    public static String dnsName() {
        String s = ApplicationType.P_DnsName;
        return s;
    }

    public static String dnsShortName() {
        String s = ApplicationType.P_DnsShortName;
        return s;
    }

    public static String clientPort() {
        String s = ApplicationType.P_ClientPort;
        return s;
    }

    public static String webPort() {
        String s = ApplicationType.P_WebPort;
        return s;
    }

    public static String sslPort() {
        String s = ApplicationType.P_SslPort;
        return s;
    }

    public static String vipClientPort() {
        String s = ApplicationType.P_VIPClientPort;
        return s;
    }

    public static String vipWebPort() {
        String s = ApplicationType.P_VIPWebPort;
        return s;
    }

    public static String vipSSLPort() {
        String s = ApplicationType.P_VIPSSLPort;
        return s;
    }

    public static String f5Port() {
        String s = ApplicationType.P_F5Port;
        return s;
    }

    public static String hasClient() {
        String s = ApplicationType.P_HasClient;
        return s;
    }

    public static String sudoUser() {
        String s = ApplicationType.P_SudoUser;
        return s;
    }

    public static String usesIDL() {
        String s = ApplicationType.P_UsesIDL;
        return s;
    }

    public static String directory() {
        String s = ApplicationType.P_Directory;
        return s;
    }

    public static String startCommand() {
        String s = ApplicationType.P_StartCommand;
        return s;
    }

    public static String stopCommand() {
        String s = ApplicationType.P_StopCommand;
        return s;
    }

    public static String createdBy() {
        String s = ApplicationType.P_CreatedBy;
        return s;
    }

    public static String directory_copy() {
        String s = ApplicationType.P_Directory_copy;
        return s;
    }
}
 

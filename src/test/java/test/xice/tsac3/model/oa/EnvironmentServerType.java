// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "est",
    displayName = "Environment Server Type"
)
@OATable(
    indexes = {
        @OAIndex(name = "EnvironmentServerTypeEnvironment", columns = { @OAIndexColumn(name = "EnvironmentId") })
    }
)
public class EnvironmentServerType extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
     
     
    public static final String PROPERTY_Environment = "Environment";
    public static final String P_Environment = "Environment";
    public static final String PROPERTY_ServerType = "ServerType";
    public static final String P_ServerType = "ServerType";
    public static final String PROPERTY_ServerTypeVersion = "ServerTypeVersion";
    public static final String P_ServerTypeVersion = "ServerTypeVersion";
     
    protected int id;
     
    // Links to other objects.
    protected transient Environment environment;
    protected transient ServerType serverType;
    protected transient ServerTypeVersion serverTypeVersion;
     
    public EnvironmentServerType() {
    }
     
    public EnvironmentServerType(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAOne(
        reverseName = Environment.P_EnvironmentServerTypes, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EnvironmentId"})
    public Environment getEnvironment() {
        if (environment == null) {
            environment = (Environment) getObject(P_Environment);
        }
        return environment;
    }
    
    public void setEnvironment(Environment newValue) {
        fireBeforePropertyChange(P_Environment, this.environment, newValue);
        Environment old = this.environment;
        this.environment = newValue;
        firePropertyChange(P_Environment, old, this.environment);
    }
    
    @OAOne(
        displayName = "Server Type", 
        reverseName = ServerType.P_EnvironmentServerTypes, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerTypeId"})
    public ServerType getServerType() {
        if (serverType == null) {
            serverType = (ServerType) getObject(P_ServerType);
        }
        return serverType;
    }
    
    public void setServerType(ServerType newValue) {
        fireBeforePropertyChange(P_ServerType, this.serverType, newValue);
        ServerType old = this.serverType;
        this.serverType = newValue;
        firePropertyChange(P_ServerType, old, this.serverType);
    }
    
    @OAOne(
        displayName = "Version", 
        reverseName = ServerTypeVersion.P_EnvironmentServerTypes, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerTypeVersionId"})
    public ServerTypeVersion getServerTypeVersion() {
        if (serverTypeVersion == null) {
            serverTypeVersion = (ServerTypeVersion) getObject(P_ServerTypeVersion);
        }
        return serverTypeVersion;
    }
    
    public void setServerTypeVersion(ServerTypeVersion newValue) {
        fireBeforePropertyChange(P_ServerTypeVersion, this.serverTypeVersion, newValue);
        ServerTypeVersion old = this.serverTypeVersion;
        this.serverTypeVersion = newValue;
        firePropertyChange(P_ServerTypeVersion, old, this.serverTypeVersion);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        int environmentFkey = rs.getInt(2);
        if (!rs.wasNull() && environmentFkey > 0) {
            setProperty(P_Environment, new OAObjectKey(environmentFkey));
        }
        int serverTypeFkey = rs.getInt(3);
        if (!rs.wasNull() && serverTypeFkey > 0) {
            setProperty(P_ServerType, new OAObjectKey(serverTypeFkey));
        }
        int serverTypeVersionFkey = rs.getInt(4);
        if (!rs.wasNull() && serverTypeVersionFkey > 0) {
            setProperty(P_ServerTypeVersion, new OAObjectKey(serverTypeVersionFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;
 
/**
  used by remote clients that then connect to other TS servers to gather 
    information and update the OAModel.
*/
@OAClass(
    shortName = "rc",
    displayName = "Remote Client",
    description = "used by remote clients that then connect to other TS servers to gather      information and update the OAModel.",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name",
    sortProperty = "type"
)
@OATable(
)
public class RemoteClient extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Type = "Type";
    public static final String P_Type = "Type";
    public static final String PROPERTY_TypeAsString = "TypeAsString";
    public static final String P_TypeAsString = "TypeAsString";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_Status = "Status";
    public static final String P_Status = "Status";
    public static final String PROPERTY_StatusAsString = "StatusAsString";
    public static final String P_StatusAsString = "StatusAsString";
     
     
    public static final String PROPERTY_RemoteMessages = "RemoteMessages";
    public static final String P_RemoteMessages = "RemoteMessages";
     
    protected int id;
    protected String name;
    protected int type;
    public static final int TYPE_GSMRClient = 0;
    public static final int TYPE_LLADClient = 1;
    public static final int TYPE_MRADClient = 2;
    public static final int TYPE_RCClient = 3;
    public static final int TYPE_AdminServer = 4;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("GSMR Remote Client");
        hubType.addElement("LLAD Remote Client");
        hubType.addElement("MRAD Remote Client");
        hubType.addElement("RC Client");
        hubType.addElement("Admin Server");
    }
    protected OADateTime started;
    protected int status;
    public static final int STATUS_Disconnected = 0;
    public static final int STATUS_Connected = 1;
    public static final Hub<String> hubStatus;
    static {
        hubStatus = new Hub<String>(String.class);
        hubStatus.addElement("Disconnected");
        hubStatus.addElement("Connected");
    }
     
    // Links to other objects.
    protected transient Hub<RemoteMessage> hubRemoteMessages;
     
    public RemoteClient() {
    }
     
    public RemoteClient(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 35, displayLength = 26, columnLength = 22, isProcessed = true)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayLength = 25, columnLength = 18, isProcessed = true, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    
    public void setType(int newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        int old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
    }
    public String getTypeAsString() {
        if (isNull(P_Type)) return "";
        String s = hubType.getAt(getType());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    
    public void setStarted(OADateTime newValue) {
        fireBeforePropertyChange(P_Started, this.started, newValue);
        OADateTime old = started;
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    @OAProperty(displayLength = 15, columnLength = 13, isProcessed = true, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getStatus() {
        return status;
    }
    
    public void setStatus(int newValue) {
        fireBeforePropertyChange(P_Status, this.status, newValue);
        int old = status;
        this.status = newValue;
        firePropertyChange(P_Status, old, this.status);
    }
    public String getStatusAsString() {
        if (isNull(P_Status)) return "";
        String s = hubStatus.getAt(getStatus());
        if (s == null) s = "";
        return s;
    }
    @OAMany(
        displayName = "Remote Messages", 
        toClass = RemoteMessage.class, 
        reverseName = RemoteMessage.P_RemoteClient, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OALinkTable(name = "RemoteClientRemoteMessage", indexName = "RemoteMessageRemoteClient", columns = {"RemoteClientId"})
    public Hub<RemoteMessage> getRemoteMessages() {
        if (hubRemoteMessages == null) {
            hubRemoteMessages = (Hub<RemoteMessage>) getHub(P_RemoteMessages);
        }
        return hubRemoteMessages;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.type = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RemoteClient.P_Type, true);
        }
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        this.status = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RemoteClient.P_Status, true);
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

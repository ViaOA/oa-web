// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;
 
@OAClass(
    shortName = "si",
    displayName = "Server Install",
    displayProperty = "server"
)
@OATable(
    indexes = {
        @OAIndex(name = "ServerInstallServer", columns = { @OAIndexColumn(name = "ServerId") })
    }
)
public class ServerInstall extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_DownloadedZip = "DownloadedZip";
    public static final String P_DownloadedZip = "DownloadedZip";
    public static final String PROPERTY_Propagated = "Propagated";
    public static final String P_Propagated = "Propagated";
    public static final String PROPERTY_Installed = "Installed";
    public static final String P_Installed = "Installed";
    public static final String PROPERTY_Cancelled = "Cancelled";
    public static final String P_Cancelled = "Cancelled";
    public static final String PROPERTY_Errored = "Errored";
    public static final String P_Errored = "Errored";
    public static final String PROPERTY_ErrorMessage = "ErrorMessage";
    public static final String P_ErrorMessage = "ErrorMessage";
    public static final String PROPERTY_Completed = "Completed";
    public static final String P_Completed = "Completed";
     
     
    public static final String PROPERTY_CalcEnvironment = "CalcEnvironment";
    public static final String P_CalcEnvironment = "CalcEnvironment";
    public static final String PROPERTY_NewServerTypeVersion = "NewServerTypeVersion";
    public static final String P_NewServerTypeVersion = "NewServerTypeVersion";
    public static final String PROPERTY_Server = "Server";
    public static final String P_Server = "Server";
     
    protected int id;
    protected OADateTime created;
    protected OADateTime downloadedZip;
    protected OADateTime propagated;
    protected OADateTime installed;
    protected boolean cancelled;
    protected OADateTime errored;
    protected String errorMessage;
    protected OADateTime completed;
     
    // Links to other objects.
    protected transient ServerTypeVersion newServerTypeVersion;
    protected transient Server server;
     
    public ServerInstall() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public ServerInstall(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Downloaded Zip", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getDownloadedZip() {
        return downloadedZip;
    }
    
    public void setDownloadedZip(OADateTime newValue) {
        fireBeforePropertyChange(P_DownloadedZip, this.downloadedZip, newValue);
        OADateTime old = downloadedZip;
        this.downloadedZip = newValue;
        firePropertyChange(P_DownloadedZip, old, this.downloadedZip);
    }
    @OAProperty(displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getPropagated() {
        return propagated;
    }
    
    public void setPropagated(OADateTime newValue) {
        fireBeforePropertyChange(P_Propagated, this.propagated, newValue);
        OADateTime old = propagated;
        this.propagated = newValue;
        firePropertyChange(P_Propagated, old, this.propagated);
    }
    @OAProperty(displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getInstalled() {
        return installed;
    }
    
    public void setInstalled(OADateTime newValue) {
        fireBeforePropertyChange(P_Installed, this.installed, newValue);
        OADateTime old = installed;
        this.installed = newValue;
        firePropertyChange(P_Installed, old, this.installed);
    }
    @OAProperty(displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getCancelled() {
        return cancelled;
    }
    
    public void setCancelled(boolean newValue) {
        fireBeforePropertyChange(P_Cancelled, this.cancelled, newValue);
        boolean old = cancelled;
        this.cancelled = newValue;
        firePropertyChange(P_Cancelled, old, this.cancelled);
    }
    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getErrored() {
        return errored;
    }
    
    public void setErrored(OADateTime newValue) {
        fireBeforePropertyChange(P_Errored, this.errored, newValue);
        OADateTime old = errored;
        this.errored = newValue;
        firePropertyChange(P_Errored, old, this.errored);
    }
    @OAProperty(displayName = "Error Message", maxLength = 250, displayLength = 35, columnLength = 22, isProcessed = true)
    @OAColumn(maxLength = 250)
    public String getErrorMessage() {
        return errorMessage;
    }
    
    public void setErrorMessage(String newValue) {
        fireBeforePropertyChange(P_ErrorMessage, this.errorMessage, newValue);
        String old = errorMessage;
        this.errorMessage = newValue;
        firePropertyChange(P_ErrorMessage, old, this.errorMessage);
    }
    @OAProperty(displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCompleted() {
        return completed;
    }
    
    public void setCompleted(OADateTime newValue) {
        fireBeforePropertyChange(P_Completed, this.completed, newValue);
        OADateTime old = completed;
        this.completed = newValue;
        firePropertyChange(P_Completed, old, this.completed);
    }
    @OAOne(
        displayName = "Calc Environment", 
        isCalculated = true, 
        reverseName = Environment.P_ActiveServerInstalls, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Environment getCalcEnvironment() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "New Server Type Version", 
        reverseName = ServerTypeVersion.P_ServerInstalls, 
        required = true
    )
    @OAFkey(columns = {"NewServerTypeVersionId"})
    public ServerTypeVersion getNewServerTypeVersion() {
        if (newServerTypeVersion == null) {
            newServerTypeVersion = (ServerTypeVersion) getObject(P_NewServerTypeVersion);
        }
        return newServerTypeVersion;
    }
    
    public void setNewServerTypeVersion(ServerTypeVersion newValue) {
        fireBeforePropertyChange(P_NewServerTypeVersion, this.newServerTypeVersion, newValue);
        ServerTypeVersion old = this.newServerTypeVersion;
        this.newServerTypeVersion = newValue;
        firePropertyChange(P_NewServerTypeVersion, old, this.newServerTypeVersion);
    }
    
    @OAOne(
        reverseName = Server.P_ServerInstalls, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerId"})
    public Server getServer() {
        if (server == null) {
            server = (Server) getObject(P_Server);
        }
        return server;
    }
    
    public void setServer(Server newValue) {
        fireBeforePropertyChange(P_Server, this.server, newValue);
        Server old = this.server;
        this.server = newValue;
        firePropertyChange(P_Server, old, this.server);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.downloadedZip = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.propagated = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(5);
        if (timestamp != null) this.installed = new OADateTime(timestamp);
        this.cancelled = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerInstall.P_Cancelled, true);
        }
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.errored = new OADateTime(timestamp);
        this.errorMessage = rs.getString(8);
        timestamp = rs.getTimestamp(9);
        if (timestamp != null) this.completed = new OADateTime(timestamp);
        int newServerTypeVersionFkey = rs.getInt(10);
        if (!rs.wasNull() && newServerTypeVersionFkey > 0) {
            setProperty(P_NewServerTypeVersion, new OAObjectKey(newServerTypeVersionFkey));
        }
        int serverFkey = rs.getInt(11);
        if (!rs.wasNull() && serverFkey > 0) {
            setProperty(P_Server, new OAObjectKey(serverFkey));
        }
        if (rs.getMetaData().getColumnCount() != 11) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "st",
    displayName = "Server Type",
    isLookup = true,
    displayProperty = "code"
)
@OATable(
)
public class ServerType extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_ServerTypeId = "ServerTypeId";
    public static final String P_ServerTypeId = "ServerTypeId";
    public static final String PROPERTY_UsesCron = "UsesCron";
    public static final String P_UsesCron = "UsesCron";
    public static final String PROPERTY_UsesPool = "UsesPool";
    public static final String P_UsesPool = "UsesPool";
    public static final String PROPERTY_UsesDns = "UsesDns";
    public static final String P_UsesDns = "UsesDns";
    public static final String PROPERTY_DnsName = "DnsName";
    public static final String P_DnsName = "DnsName";
    public static final String PROPERTY_DNSShortName = "DNSShortName";
    public static final String P_DNSShortName = "DNSShortName";
    public static final String PROPERTY_ClientPort = "ClientPort";
    public static final String P_ClientPort = "ClientPort";
    public static final String PROPERTY_WebPort = "WebPort";
    public static final String P_WebPort = "WebPort";
    public static final String PROPERTY_SslPort = "SslPort";
    public static final String P_SslPort = "SslPort";
    public static final String PROPERTY_VIPClientPort = "VIPClientPort";
    public static final String P_VIPClientPort = "VIPClientPort";
    public static final String PROPERTY_VIPWebPort = "VIPWebPort";
    public static final String P_VIPWebPort = "VIPWebPort";
    public static final String PROPERTY_VIPSSLPort = "VIPSSLPort";
    public static final String P_VIPSSLPort = "VIPSSLPort";
    public static final String PROPERTY_HasClient = "HasClient";
    public static final String P_HasClient = "HasClient";
    public static final String PROPERTY_SudoUser = "SudoUser";
    public static final String P_SudoUser = "SudoUser";
    public static final String PROPERTY_UsesIDL = "UsesIDL";
    public static final String P_UsesIDL = "UsesIDL";
    public static final String PROPERTY_PackageName = "PackageName";
    public static final String P_PackageName = "PackageName";
    public static final String PROPERTY_PomGroupId = "PomGroupId";
    public static final String P_PomGroupId = "PomGroupId";
    public static final String PROPERTY_PomArtifactId = "PomArtifactId";
    public static final String P_PomArtifactId = "PomArtifactId";
    public static final String PROPERTY_PomClientArtifactId = "PomClientArtifactId";
    public static final String P_PomClientArtifactId = "PomClientArtifactId";
     
     
    public static final String PROPERTY_EnvironmentServerTypes = "EnvironmentServerTypes";
    public static final String P_EnvironmentServerTypes = "EnvironmentServerTypes";
    public static final String PROPERTY_Servers = "Servers";
    public static final String P_Servers = "Servers";
    public static final String PROPERTY_ServerTypeClients = "ServerTypeClients";
    public static final String P_ServerTypeClients = "ServerTypeClients";
    public static final String PROPERTY_ServerTypeClients2 = "ServerTypeClients2";
    public static final String P_ServerTypeClients2 = "ServerTypeClients2";
    public static final String PROPERTY_ServerTypeVersions = "ServerTypeVersions";
    public static final String P_ServerTypeVersions = "ServerTypeVersions";
    public static final String PROPERTY_SiloServerInfos = "SiloServerInfos";
    public static final String P_SiloServerInfos = "SiloServerInfos";
    public static final String PROPERTY_SiloTypes = "SiloTypes";
    public static final String P_SiloTypes = "SiloTypes";
     
    protected int id;
    protected String code;
    protected String name;
    protected String description;
    protected int serverTypeId;
    protected boolean usesCron;
    protected boolean usesPool;
    protected boolean usesDns;
    protected String dnsName;
    protected String dnsShortName;
    protected int clientPort;
    protected int webPort;
    protected int sslPort;
    protected int vipClientPort;
    protected int vipWebPort;
    protected int vipSSLPort;
    protected boolean hasClient;
    protected String sudoUser;
    protected boolean usesIDL;
    protected String packageName;
    protected String pomGroupId;
    protected String pomArtifactId;
    protected String pomClientArtifactId;
     
    // Links to other objects.
    protected transient Hub<ServerTypeClient> hubServerTypeClients;
    protected transient Hub<ServerTypeClient> hubServerTypeClients2;
    protected transient Hub<ServerTypeVersion> hubServerTypeVersions;
    protected transient Hub<SiloType> hubSiloTypes;
     
    public ServerType() {
    }
     
    public ServerType(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 12, displayLength = 8, columnLength = 6, isProcessed = true, isUnique=true)
    @OAColumn(maxLength = 12)
    public String getCode() {
        return code;
    }
    
    public void setCode(String newValue) {
        fireBeforePropertyChange(P_Code, this.code, newValue);
        String old = code;
        this.code = newValue;
        firePropertyChange(P_Code, old, this.code);
    }
    @OAProperty(maxLength = 35, displayLength = 18, columnLength = 10)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 250, displayLength = 40, columnLength = 22)
    @OAColumn(maxLength = 250)
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String newValue) {
        fireBeforePropertyChange(P_Description, this.description, newValue);
        String old = description;
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(displayName = "Server Type Id", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getServerTypeId() {
        return serverTypeId;
    }
    
    public void setServerTypeId(int newValue) {
        fireBeforePropertyChange(P_ServerTypeId, this.serverTypeId, newValue);
        int old = serverTypeId;
        this.serverTypeId = newValue;
        firePropertyChange(P_ServerTypeId, old, this.serverTypeId);
    }
    @OAProperty(displayName = "Uses Cron", description = "Is cron used to start this server?", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      Is cron used to start this server?
    */
    public boolean getUsesCron() {
        return usesCron;
    }
    
    public void setUsesCron(boolean newValue) {
        fireBeforePropertyChange(P_UsesCron, this.usesCron, newValue);
        boolean old = usesCron;
        this.usesCron = newValue;
        firePropertyChange(P_UsesCron, old, this.usesCron);
    }
    @OAProperty(displayName = "Uses Pool", description = "is there a pool of servers", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      is there a pool of servers
    */
    public boolean getUsesPool() {
        return usesPool;
    }
    
    public void setUsesPool(boolean newValue) {
        fireBeforePropertyChange(P_UsesPool, this.usesPool, newValue);
        boolean old = usesPool;
        this.usesPool = newValue;
        firePropertyChange(P_UsesPool, old, this.usesPool);
    }
    @OAProperty(displayName = "Uses Dns", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesDns() {
        return usesDns;
    }
    
    public void setUsesDns(boolean newValue) {
        fireBeforePropertyChange(P_UsesDns, this.usesDns, newValue);
        boolean old = usesDns;
        this.usesDns = newValue;
        firePropertyChange(P_UsesDns, old, this.usesDns);
    }
    @OAProperty(displayName = "DNS Long Name", maxLength = 75, displayLength = 40, columnLength = 16)
    @OAColumn(maxLength = 75)
    public String getDnsName() {
        return dnsName;
    }
    
    public void setDnsName(String newValue) {
        fireBeforePropertyChange(P_DnsName, this.dnsName, newValue);
        String old = dnsName;
        this.dnsName = newValue;
        firePropertyChange(P_DnsName, old, this.dnsName);
    }
    @OAProperty(displayName = "DNS Short Name", description = "template used to describe DNS name for this server", maxLength = 75, displayLength = 20, columnLength = 16)
    @OAColumn(maxLength = 75)
    /**
      template used to describe DNS name for this server
    */
    public String getDNSShortName() {
        return dnsShortName;
    }
    
    public void setDNSShortName(String newValue) {
        fireBeforePropertyChange(P_DNSShortName, this.dnsShortName, newValue);
        String old = dnsShortName;
        this.dnsShortName = newValue;
        firePropertyChange(P_DNSShortName, old, this.dnsShortName);
    }
    @OAProperty(displayName = "Client Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getClientPort() {
        return clientPort;
    }
    
    public void setClientPort(int newValue) {
        fireBeforePropertyChange(P_ClientPort, this.clientPort, newValue);
        int old = clientPort;
        this.clientPort = newValue;
        firePropertyChange(P_ClientPort, old, this.clientPort);
    }
    @OAProperty(displayName = "Web Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getWebPort() {
        return webPort;
    }
    
    public void setWebPort(int newValue) {
        fireBeforePropertyChange(P_WebPort, this.webPort, newValue);
        int old = webPort;
        this.webPort = newValue;
        firePropertyChange(P_WebPort, old, this.webPort);
    }
    @OAProperty(displayName = "SSL Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSslPort() {
        return sslPort;
    }
    
    public void setSslPort(int newValue) {
        fireBeforePropertyChange(P_SslPort, this.sslPort, newValue);
        int old = sslPort;
        this.sslPort = newValue;
        firePropertyChange(P_SslPort, old, this.sslPort);
    }
    @OAProperty(displayName = "VIP Client Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getVIPClientPort() {
        return vipClientPort;
    }
    
    public void setVIPClientPort(int newValue) {
        fireBeforePropertyChange(P_VIPClientPort, this.vipClientPort, newValue);
        int old = vipClientPort;
        this.vipClientPort = newValue;
        firePropertyChange(P_VIPClientPort, old, this.vipClientPort);
    }
    @OAProperty(displayName = "VIP Web Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getVIPWebPort() {
        return vipWebPort;
    }
    
    public void setVIPWebPort(int newValue) {
        fireBeforePropertyChange(P_VIPWebPort, this.vipWebPort, newValue);
        int old = vipWebPort;
        this.vipWebPort = newValue;
        firePropertyChange(P_VIPWebPort, old, this.vipWebPort);
    }
    @OAProperty(displayName = "VIP SSL Port", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getVIPSSLPort() {
        return vipSSLPort;
    }
    
    public void setVIPSSLPort(int newValue) {
        fireBeforePropertyChange(P_VIPSSLPort, this.vipSSLPort, newValue);
        int old = vipSSLPort;
        this.vipSSLPort = newValue;
        firePropertyChange(P_VIPSSLPort, old, this.vipSSLPort);
    }
    @OAProperty(displayName = "Has Client", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getHasClient() {
        return hasClient;
    }
    
    public void setHasClient(boolean newValue) {
        fireBeforePropertyChange(P_HasClient, this.hasClient, newValue);
        boolean old = hasClient;
        this.hasClient = newValue;
        firePropertyChange(P_HasClient, old, this.hasClient);
    }
    @OAProperty(displayName = "Sudo User", maxLength = 25, displayLength = 14, columnLength = 10)
    @OAColumn(maxLength = 25)
    public String getSudoUser() {
        return sudoUser;
    }
    
    public void setSudoUser(String newValue) {
        fireBeforePropertyChange(P_SudoUser, this.sudoUser, newValue);
        String old = sudoUser;
        this.sudoUser = newValue;
        firePropertyChange(P_SudoUser, old, this.sudoUser);
    }
    @OAProperty(displayName = "Uses IDL", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesIDL() {
        return usesIDL;
    }
    
    public void setUsesIDL(boolean newValue) {
        fireBeforePropertyChange(P_UsesIDL, this.usesIDL, newValue);
        boolean old = usesIDL;
        this.usesIDL = newValue;
        firePropertyChange(P_UsesIDL, old, this.usesIDL);
    }
    @OAProperty(displayName = "Package Name", maxLength = 55, displayLength = 40, columnLength = 12, isProcessed = true)
    @OAColumn(maxLength = 55)
    public String getPackageName() {
        return packageName;
    }
    
    public void setPackageName(String newValue) {
        fireBeforePropertyChange(P_PackageName, this.packageName, newValue);
        String old = packageName;
        this.packageName = newValue;
        firePropertyChange(P_PackageName, old, this.packageName);
    }
    @OAProperty(displayName = "Pom Group Id", maxLength = 55, displayLength = 40, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getPomGroupId() {
        return pomGroupId;
    }
    
    public void setPomGroupId(String newValue) {
        fireBeforePropertyChange(P_PomGroupId, this.pomGroupId, newValue);
        String old = pomGroupId;
        this.pomGroupId = newValue;
        firePropertyChange(P_PomGroupId, old, this.pomGroupId);
    }
    @OAProperty(displayName = "Pom Artifact Id", maxLength = 25, displayLength = 14, columnLength = 8)
    @OAColumn(maxLength = 25)
    public String getPomArtifactId() {
        return pomArtifactId;
    }
    
    public void setPomArtifactId(String newValue) {
        fireBeforePropertyChange(P_PomArtifactId, this.pomArtifactId, newValue);
        String old = pomArtifactId;
        this.pomArtifactId = newValue;
        firePropertyChange(P_PomArtifactId, old, this.pomArtifactId);
    }
    @OAProperty(displayName = "Pom Client Artifact Id", maxLength = 25, displayLength = 25, columnLength = 8)
    @OAColumn(name = "PomArtifactId", maxLength = 25)
    public String getPomClientArtifactId() {
        return pomClientArtifactId;
    }
    
    public void setPomClientArtifactId(String newValue) {
        fireBeforePropertyChange(P_PomClientArtifactId, this.pomClientArtifactId, newValue);
        String old = pomClientArtifactId;
        this.pomClientArtifactId = newValue;
        firePropertyChange(P_PomClientArtifactId, old, this.pomClientArtifactId);
    }
    @OAMany(
        displayName = "Environment Server Types", 
        toClass = EnvironmentServerType.class, 
        reverseName = EnvironmentServerType.P_ServerType, 
        createMethod = false
    )
    private Hub<EnvironmentServerType> getEnvironmentServerTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        toClass = Server.class, 
        reverseName = Server.P_ServerType, 
        createMethod = false
    )
    private Hub<Server> getServers() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Server Type Clients", 
        toClass = ServerTypeClient.class, 
        owner = true, 
        reverseName = ServerTypeClient.P_ServerType, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true, 
        uniqueProperty = ServerTypeClient.P_ToServerType
    )
    public Hub<ServerTypeClient> getServerTypeClients() {
        if (hubServerTypeClients == null) {
            hubServerTypeClients = (Hub<ServerTypeClient>) getHub(P_ServerTypeClients);
        }
        return hubServerTypeClients;
    }
    
    @OAMany(
        displayName = "Server Type Clients", 
        toClass = ServerTypeClient.class, 
        reverseName = ServerTypeClient.P_ToServerType, 
        mustBeEmptyForDelete = true
    )
    public Hub<ServerTypeClient> getServerTypeClients2() {
        if (hubServerTypeClients2 == null) {
            hubServerTypeClients2 = (Hub<ServerTypeClient>) getHub(P_ServerTypeClients2);
        }
        return hubServerTypeClients2;
    }
    
    @OAMany(
        displayName = "Server Type Versions", 
        toClass = ServerTypeVersion.class, 
        owner = true, 
        reverseName = ServerTypeVersion.P_ServerType, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<ServerTypeVersion> getServerTypeVersions() {
        if (hubServerTypeVersions == null) {
            hubServerTypeVersions = (Hub<ServerTypeVersion>) getHub(P_ServerTypeVersions);
        }
        return hubServerTypeVersions;
    }
    
    @OAMany(
        displayName = "Silo Server Infos", 
        toClass = SiloServerInfo.class, 
        reverseName = SiloServerInfo.P_ServerType, 
        createMethod = false
    )
    private Hub<SiloServerInfo> getSiloServerInfos() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Silo Types", 
        toClass = SiloType.class, 
        reverseName = SiloType.P_ServerTypes
    )
    @OALinkTable(name = "SiloTypeServerType", indexName = "SiloTypeServerType", columns = {"ServerTypeId"})
    public Hub<SiloType> getSiloTypes() {
        if (hubSiloTypes == null) {
            hubSiloTypes = (Hub<SiloType>) getHub(P_SiloTypes);
        }
        return hubSiloTypes;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.code = rs.getString(2);
        this.name = rs.getString(3);
        this.description = rs.getString(4);
        this.serverTypeId = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_ServerTypeId, true);
        }
        this.usesCron = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_UsesCron, true);
        }
        this.usesPool = rs.getBoolean(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_UsesPool, true);
        }
        this.usesDns = rs.getBoolean(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_UsesDns, true);
        }
        this.dnsName = rs.getString(9);
        this.dnsShortName = rs.getString(10);
        this.clientPort = (int) rs.getInt(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_ClientPort, true);
        }
        this.webPort = (int) rs.getInt(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_WebPort, true);
        }
        this.sslPort = (int) rs.getInt(13);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_SslPort, true);
        }
        this.vipClientPort = (int) rs.getInt(14);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_VIPClientPort, true);
        }
        this.vipWebPort = (int) rs.getInt(15);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_VIPWebPort, true);
        }
        this.vipSSLPort = (int) rs.getInt(16);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_VIPSSLPort, true);
        }
        this.hasClient = rs.getBoolean(17);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_HasClient, true);
        }
        this.sudoUser = rs.getString(18);
        this.usesIDL = rs.getBoolean(19);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerType.P_UsesIDL, true);
        }
        this.packageName = rs.getString(20);
        this.pomGroupId = rs.getString(21);
        this.pomArtifactId = rs.getString(22);
        this.pomClientArtifactId = rs.getString(23);
        if (rs.getMetaData().getColumnCount() != 23) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

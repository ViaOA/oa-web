// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "stc",
    displayName = "Server Type Client",
    displayProperty = "toServerType"
)
@OATable(
    indexes = {
        @OAIndex(name = "ServerTypeClientServerType", columns = { @OAIndexColumn(name = "ServerTypeId") }), 
        @OAIndex(name = "ServerTypeClientToServerType", columns = { @OAIndexColumn(name = "ToServerTypeId") })
    }
)
public class ServerTypeClient extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_VerifiedInRepo = "VerifiedInRepo";
    public static final String P_VerifiedInRepo = "VerifiedInRepo";
     
     
    public static final String PROPERTY_ServerType = "ServerType";
    public static final String P_ServerType = "ServerType";
    public static final String PROPERTY_ToServerType = "ToServerType";
    public static final String P_ToServerType = "ToServerType";
     
    protected int id;
    protected boolean verifiedInRepo;
     
    // Links to other objects.
    protected transient ServerType serverType;
    protected transient ServerType toServerType;
     
    public ServerTypeClient() {
    }
     
    public ServerTypeClient(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Verified In Repo", displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getVerifiedInRepo() {
        return verifiedInRepo;
    }
    
    public void setVerifiedInRepo(boolean newValue) {
        fireBeforePropertyChange(P_VerifiedInRepo, this.verifiedInRepo, newValue);
        boolean old = verifiedInRepo;
        this.verifiedInRepo = newValue;
        firePropertyChange(P_VerifiedInRepo, old, this.verifiedInRepo);
    }
    @OAOne(
        displayName = "Server Type", 
        reverseName = ServerType.P_ServerTypeClients, 
        required = true, 
        allowCreateNew = false, 
        mustBeEmptyForDelete = true
    )
    @OAFkey(columns = {"ServerTypeId"})
    public ServerType getServerType() {
        if (serverType == null) {
            serverType = (ServerType) getObject(P_ServerType);
        }
        return serverType;
    }
    
    public void setServerType(ServerType newValue) {
        fireBeforePropertyChange(P_ServerType, this.serverType, newValue);
        ServerType old = this.serverType;
        this.serverType = newValue;
        firePropertyChange(P_ServerType, old, this.serverType);
    }
    
    @OAOne(
        displayName = "Server Type", 
        reverseName = ServerType.P_ServerTypeClients2, 
        required = true, 
        allowCreateNew = false, 
        mustBeEmptyForDelete = true
    )
    @OAFkey(columns = {"ToServerTypeId"})
    public ServerType getToServerType() {
        if (toServerType == null) {
            toServerType = (ServerType) getObject(P_ToServerType);
        }
        return toServerType;
    }
    
    public void setToServerType(ServerType newValue) {
        fireBeforePropertyChange(P_ToServerType, this.toServerType, newValue);
        ServerType old = this.toServerType;
        this.toServerType = newValue;
        firePropertyChange(P_ToServerType, old, this.toServerType);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.verifiedInRepo = rs.getBoolean(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ServerTypeClient.P_VerifiedInRepo, true);
        }
        int serverTypeFkey = rs.getInt(3);
        if (!rs.wasNull() && serverTypeFkey > 0) {
            setProperty(P_ServerType, new OAObjectKey(serverTypeFkey));
        }
        int toServerTypeFkey = rs.getInt(4);
        if (!rs.wasNull() && toServerTypeFkey > 0) {
            setProperty(P_ToServerType, new OAObjectKey(toServerTypeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "sil",
    displayName = "Silo",
    displayProperty = "siloType",
    rootTreePropertyPaths = {
        "[Site]."+Site.P_Environments+"."+Environment.P_Silos
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "SiloEnvironment", columns = { @OAIndexColumn(name = "EnvironmentId") })
    }
)
public class Silo extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_NetworkMask = "NetworkMask";
    public static final String P_NetworkMask = "NetworkMask";
     
     
    public static final String PROPERTY_Environment = "Environment";
    public static final String P_Environment = "Environment";
    public static final String PROPERTY_GSMRServers = "GSMRServers";
    public static final String P_GSMRServers = "GSMRServers";
    public static final String PROPERTY_LLADServer = "LLADServer";
    public static final String P_LLADServer = "LLADServer";
    public static final String PROPERTY_MRADServer = "MRADServer";
    public static final String P_MRADServer = "MRADServer";
    public static final String PROPERTY_ServerGroups = "ServerGroups";
    public static final String P_ServerGroups = "ServerGroups";
    public static final String PROPERTY_Servers = "Servers";
    public static final String P_Servers = "Servers";
    public static final String PROPERTY_SiloServerInfos = "SiloServerInfos";
    public static final String P_SiloServerInfos = "SiloServerInfos";
    public static final String PROPERTY_SiloType = "SiloType";
    public static final String P_SiloType = "SiloType";
     
    protected int id;
    protected String networkMask;
     
    // Links to other objects.
    protected transient Environment environment;
    protected transient Hub<GSMRServer> hubGSMRServers;
    protected transient LLADServer lladServer;
    protected transient MRADServer mradServer;
    protected transient Hub<ServerGroup> hubServerGroups;
    // protected transient Hub<Server> hubServers;
    protected transient Hub<SiloServerInfo> hubSiloServerInfos;
    protected transient SiloType siloType;
     
    public Silo() {
    }
     
    public Silo(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Network Mask", maxLength = 25, displayLength = 16, columnLength = 15)
    @OAColumn(maxLength = 25)
    public String getNetworkMask() {
        return networkMask;
    }
    
    public void setNetworkMask(String newValue) {
        fireBeforePropertyChange(P_NetworkMask, this.networkMask, newValue);
        String old = networkMask;
        this.networkMask = newValue;
        firePropertyChange(P_NetworkMask, old, this.networkMask);
    }
    @OAOne(
        reverseName = Environment.P_Silos, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EnvironmentId"})
    public Environment getEnvironment() {
        if (environment == null) {
            environment = (Environment) getObject(P_Environment);
        }
        return environment;
    }
    
    public void setEnvironment(Environment newValue) {
        fireBeforePropertyChange(P_Environment, this.environment, newValue);
        Environment old = this.environment;
        this.environment = newValue;
        firePropertyChange(P_Environment, old, this.environment);
    }
    
    @OAMany(
        toClass = GSMRServer.class, 
        reverseName = GSMRServer.P_Silo
    )
    public Hub<GSMRServer> getGSMRServers() {
        if (hubGSMRServers == null) {
            hubGSMRServers = (Hub<GSMRServer>) getHub(P_GSMRServers);
        }
        return hubGSMRServers;
    }
    
    @OAOne(
        reverseName = LLADServer.P_Silo, 
        allowAddExisting = false
    )
    public LLADServer getLLADServer() {
        if (lladServer == null) {
            lladServer = (LLADServer) getObject(P_LLADServer);
        }
        return lladServer;
    }
    
    public void setLLADServer(LLADServer newValue) {
        fireBeforePropertyChange(P_LLADServer, this.lladServer, newValue);
        LLADServer old = this.lladServer;
        this.lladServer = newValue;
        firePropertyChange(P_LLADServer, old, this.lladServer);
    }
    
    @OAOne(
        reverseName = MRADServer.P_Silo, 
        allowAddExisting = false
    )
    public MRADServer getMRADServer() {
        if (mradServer == null) {
            mradServer = (MRADServer) getObject(P_MRADServer);
        }
        return mradServer;
    }
    
    public void setMRADServer(MRADServer newValue) {
        fireBeforePropertyChange(P_MRADServer, this.mradServer, newValue);
        MRADServer old = this.mradServer;
        this.mradServer = newValue;
        firePropertyChange(P_MRADServer, old, this.mradServer);
    }
    
    @OAMany(
        displayName = "Server Groups", 
        toClass = ServerGroup.class, 
        owner = true, 
        reverseName = ServerGroup.P_Silo, 
        cascadeSave = true, 
        cascadeDelete = true, 
        seqProperty = ServerGroup.P_Seq, 
        sortProperty = ServerGroup.P_Seq
    )
    public Hub<ServerGroup> getServerGroups() {
        if (hubServerGroups == null) {
            hubServerGroups = (Hub<ServerGroup>) getHub(P_ServerGroups);
        }
        return hubServerGroups;
    }
    
    @OAMany(
        toClass = Server.class, 
        owner = true, 
        cacheSize = 25, 
        reverseName = Server.P_Silo, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Server> getServers() {
        Hub<Server> hubServers;
        {
            hubServers = (Hub<Server>) getHub(P_Servers);
        }
        return hubServers;
    }
    
    @OAMany(
        displayName = "Silo Config", 
        toClass = SiloServerInfo.class, 
        reverseName = SiloServerInfo.P_Silo, 
        matchHub = (Silo.P_SiloType+"."+SiloType.P_ServerTypes), 
        matchProperty = SiloServerInfo.P_ServerType
    )
    public Hub<SiloServerInfo> getSiloServerInfos() {
        if (hubSiloServerInfos == null) {
            hubSiloServerInfos = (Hub<SiloServerInfo>) getHub(P_SiloServerInfos);
        }
        return hubSiloServerInfos;
    }
    
    @OAOne(
        displayName = "Silo Type", 
        reverseName = SiloType.P_Silos, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SiloTypeId"})
    public SiloType getSiloType() {
        if (siloType == null) {
            siloType = (SiloType) getObject(P_SiloType);
        }
        return siloType;
    }
    
    public void setSiloType(SiloType newValue) {
        fireBeforePropertyChange(P_SiloType, this.siloType, newValue);
        SiloType old = this.siloType;
        this.siloType = newValue;
        firePropertyChange(P_SiloType, old, this.siloType);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.networkMask = rs.getString(2);
        int environmentFkey = rs.getInt(3);
        if (!rs.wasNull() && environmentFkey > 0) {
            setProperty(P_Environment, new OAObjectKey(environmentFkey));
        }
        int siloTypeFkey = rs.getInt(4);
        if (!rs.wasNull() && siloTypeFkey > 0) {
            setProperty(P_SiloType, new OAObjectKey(siloTypeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac3.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsac3.model.oa.*;
 
public class LLADServerPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private UserPPx calcLoginUsers;
    private LLADClientPPx lladClients;
    private RemoteMessagePPx remoteMessages;
    private ServerPPx server;
    private SiloPPx silo;
    private UserPPx users;
     
    public LLADServerPPx(String name) {
        this(null, name);
    }

    public LLADServerPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public UserPPx calcLoginUsers() {
        if (calcLoginUsers == null) calcLoginUsers = new UserPPx(this, LLADServer.P_CalcLoginUsers);
        return calcLoginUsers;
    }

    public LLADClientPPx lladClients() {
        if (lladClients == null) lladClients = new LLADClientPPx(this, LLADServer.P_LLADClients);
        return lladClients;
    }

    public RemoteMessagePPx remoteMessages() {
        if (remoteMessages == null) remoteMessages = new RemoteMessagePPx(this, LLADServer.P_RemoteMessages);
        return remoteMessages;
    }

    public ServerPPx server() {
        if (server == null) server = new ServerPPx(this, LLADServer.P_Server);
        return server;
    }

    public SiloPPx silo() {
        if (silo == null) silo = new SiloPPx(this, LLADServer.P_Silo);
        return silo;
    }

    public UserPPx users() {
        if (users == null) users = new UserPPx(this, LLADServer.P_Users);
        return users;
    }

    public String id() {
        return pp + "." + LLADServer.P_Id;
    }

    public String remoteStarted() {
        return pp + "." + LLADServer.P_RemoteStarted;
    }

    public String connected() {
        return pp + "." + LLADServer.P_Connected;
    }

    public String enableLLADCommands() {
        return pp + "." + LLADServer.P_EnableLLADCommands;
    }

    public String refreshUserCache() {
        return pp + ".refreshUserCache";
    }

    public String reloadAllUsers() {
        return pp + ".reloadAllUsers";
    }

    public String connect() {
        return pp + ".connect";
    }

    public String disconnect() {
        return pp + ".disconnect";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

// Generated by OABuilder
package test.xice.tsac3.model.oa.search;

import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.*;

import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class LLADClientSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    public static final String P_ServerName = "ServerName";
    public static final String P_ServerHostName = "ServerHostName";
    public static final String P_ServerIpAddress = "ServerIpAddress";
    public static final String P_ServerServerId = "ServerServerId";
    public static final String P_UserLoginUser = "UserLoginUser";
    public static final String P_ServerServerType = "ServerServerType";

    protected String serverName;
    protected String serverHostName;
    protected String serverIpAddress;
    protected int serverServerId;
    protected User userLoginUser;
    protected ServerType serverServerType;

    public String getServerName() {
        return serverName;
    }
    
    public void setServerName(String newValue) {
        fireBeforePropertyChange(P_ServerName, this.serverName, newValue);
        String old = serverName;
        this.serverName = newValue;
        firePropertyChange(P_ServerName, old, this.serverName);
    }
      

    public String getServerHostName() {
        return serverHostName;
    }
    
    public void setServerHostName(String newValue) {
        fireBeforePropertyChange(P_ServerHostName, this.serverHostName, newValue);
        String old = serverHostName;
        this.serverHostName = newValue;
        firePropertyChange(P_ServerHostName, old, this.serverHostName);
    }
      

    public String getServerIpAddress() {
        return serverIpAddress;
    }
    
    public void setServerIpAddress(String newValue) {
        fireBeforePropertyChange(P_ServerIpAddress, this.serverIpAddress, newValue);
        String old = serverIpAddress;
        this.serverIpAddress = newValue;
        firePropertyChange(P_ServerIpAddress, old, this.serverIpAddress);
    }
      

    public int getServerServerId() {
        return serverServerId;
    }
    
    public void setServerServerId(int newValue) {
        fireBeforePropertyChange(P_ServerServerId, this.serverServerId, newValue);
        int old = serverServerId;
        this.serverServerId = newValue;
        firePropertyChange(P_ServerServerId, old, this.serverServerId);
    }
      

    @OAOne
    public User getUserLoginUser() {
        if (userLoginUser == null) {
            userLoginUser = (User) getObject(P_UserLoginUser);
        }
        return userLoginUser;
    }
    public void setUserLoginUser(User newValue) {
        User old = this.userLoginUser;
        this.userLoginUser = newValue;
        firePropertyChange(P_UserLoginUser, old, this.userLoginUser);
    }

    @OAOne
    public ServerType getServerServerType() {
        if (serverServerType == null) {
            serverServerType = (ServerType) getObject(P_ServerServerType);
        }
        return serverServerType;
    }
    public void setServerServerType(ServerType newValue) {
        ServerType old = this.serverServerType;
        this.serverServerType = newValue;
        firePropertyChange(P_ServerServerType, old, this.serverServerType);
    }

    public void reset() {
        setServerName(null);
        setServerHostName(null);
        setServerIpAddress(null);
        setServerServerId(0);
        setNull(P_ServerServerId);
        setUserLoginUser(null);
        setServerServerType(null);
    }

    public boolean isDataEntered() {
        if (getServerName() != null) return true;
        if (getServerHostName() != null) return true;
        if (getServerIpAddress() != null) return true;
        if (!isNull(P_ServerServerId)) return true;
        if (getUserLoginUser() != null) return true;
        if (getServerServerType() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<LLADClient> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<LLADClient> f = new OAQueryFilter<LLADClient>(LLADClient.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<LLADClient> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<LLADClient> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<LLADClient> getSelect() {
        String sql = "";
        String sortOrder = "";
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!OAString.isEmpty(this.serverName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += OAString.cpp(LLADClient.P_Server, Server.P_Name) + " LIKE ?";
            }
            else {
                sql += OAString.cpp(LLADClient.P_Server, Server.P_Name) + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.serverHostName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverHostName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += OAString.cpp(LLADClient.P_Server, Server.P_HostName) + " LIKE ?";
            }
            else {
                sql += OAString.cpp(LLADClient.P_Server, Server.P_HostName) + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.serverIpAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverIpAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += OAString.cpp(LLADClient.P_Server, Server.P_IpAddress) + " LIKE ?";
            }
            else {
                sql += OAString.cpp(LLADClient.P_Server, Server.P_IpAddress) + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_ServerServerId)) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(LLADClient.P_Server, Server.P_ServerId) + " = ?";
            args = OAArray.add(Object.class, args, this.serverServerId);
        }
        if (getUserLoginUser() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(LLADClient.P_UserLogins, UserLogin.P_User) + " = ?";
            args = OAArray.add(Object.class, args, getUserLoginUser());
            String cpp = OAString.cpp(User.P_UserLogins, UserLogin.P_LLADClient);
            finder = new OAFinder<User, LLADClient>(getUserLoginUser(), cpp);
        }
        if (getServerServerType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(LLADClient.P_Server, Server.P_ServerType) + " = ?";
            args = OAArray.add(Object.class, args, getServerServerType());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<LLADClient> sel = new OASelect<LLADClient>(LLADClient.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        sel.setFinder(finder);
        return sel;
    }

    private OAFilter<LLADClient> filterDataSourceFilter;
    public OAFilter<LLADClient> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<LLADClient>() {
            @Override
            public boolean isUsed(LLADClient lladClient) {
                return LLADClientSearch.this.isUsedForDataSourceFilter(lladClient);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<LLADClient> filterCustomFilter;
    public OAFilter<LLADClient> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<LLADClient>() {
            @Override
            public boolean isUsed(LLADClient lladClient) {
                boolean b = LLADClientSearch.this.isUsedForCustomFilter(lladClient);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(lladClient);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(LLADClient lladClient) {
        if (serverName != null) {
            String s = getServerName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(lladClient.getProperty(OAString.cpp(LLADClient.P_Server, Server.P_Name)), s)) return false;
        }
        if (serverHostName != null) {
            String s = getServerHostName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(lladClient.getProperty(OAString.cpp(LLADClient.P_Server, Server.P_HostName)), s)) return false;
        }
        if (serverIpAddress != null) {
            String s = getServerIpAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(lladClient.getProperty(OAString.cpp(LLADClient.P_Server, Server.P_IpAddress)), s)) return false;
        }
        if (!isNull(P_ServerServerId)) {
            if (!OACompare.isEqual(lladClient.getProperty(OAString.cpp(LLADClient.P_Server, Server.P_ServerId)), serverServerId)) return false;
        }
        if (userLoginUser != null) {
            String cpp = OAString.cpp(LLADClient.P_UserLogins, UserLogin.P_User);
            OAFinder<LLADClient, User> finder = new OAFinder<LLADClient, User>(cpp);
             if (userLoginUser != null) {
                finder.addEqualFilter(null, getUserLoginUser());
            }
            if (finder.findFirst(lladClient) == null) return false;
        }
        if (serverServerType != null) {
            if (!OACompare.isEqual(lladClient.getProperty(OAString.cpp(LLADClient.P_Server, Server.P_ServerType)), serverServerType)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(LLADClient lladClient) {
        return true;
    }
}

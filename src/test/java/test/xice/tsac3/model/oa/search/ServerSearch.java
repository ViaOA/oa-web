// Generated by OABuilder
package test.xice.tsac3.model.oa.search;

import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.*;

import com.viaoa.filter.OAQueryFilter;

@OAClass(useDataSource=false, localOnly=true)
public class ServerSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    public static final String P_Name = "Name";
    public static final String P_HostName = "HostName";
    public static final String P_IpAddress = "IpAddress";
    public static final String P_ServerId = "ServerId";
    public static final String P_Silo = "Silo";
    public static final String P_ServerStatus = "ServerStatus";

    protected String name;
    protected String hostName;
    protected String ipAddress;
    protected int serverId;
    protected Silo silo;
    protected ServerStatus serverStatus;

    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      

    public String getHostName() {
        return hostName;
    }
    
    public void setHostName(String newValue) {
        fireBeforePropertyChange(P_HostName, this.hostName, newValue);
        String old = hostName;
        this.hostName = newValue;
        firePropertyChange(P_HostName, old, this.hostName);
    }
      

    public String getIpAddress() {
        return ipAddress;
    }
    
    public void setIpAddress(String newValue) {
        fireBeforePropertyChange(P_IpAddress, this.ipAddress, newValue);
        String old = ipAddress;
        this.ipAddress = newValue;
        firePropertyChange(P_IpAddress, old, this.ipAddress);
    }
      

    public int getServerId() {
        return serverId;
    }
    
    public void setServerId(int newValue) {
        fireBeforePropertyChange(P_ServerId, this.serverId, newValue);
        int old = serverId;
        this.serverId = newValue;
        firePropertyChange(P_ServerId, old, this.serverId);
    }
      

    @OAOne
    public Silo getSilo() {
        if (silo == null) {
            silo = (Silo) getObject(P_Silo);
        }
        return silo;
    }
    public void setSilo(Silo newValue) {
        Silo old = this.silo;
        this.silo = newValue;
        firePropertyChange(P_Silo, old, this.silo);
    }

    @OAOne
    public ServerStatus getServerStatus() {
        if (serverStatus == null) {
            serverStatus = (ServerStatus) getObject(P_ServerStatus);
        }
        return serverStatus;
    }
    public void setServerStatus(ServerStatus newValue) {
        ServerStatus old = this.serverStatus;
        this.serverStatus = newValue;
        firePropertyChange(P_ServerStatus, old, this.serverStatus);
    }

    public void reset() {
        setName(null);
        setHostName(null);
        setIpAddress(null);
        setServerId(0);
        setNull(P_ServerId);
        setSilo(null);
        setServerStatus(null);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getHostName() != null) return true;
        if (getIpAddress() != null) return true;
        if (!isNull(P_ServerId)) return true;
        if (getSilo() != null) return true;
        if (getServerStatus() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Server> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Server> f = new OAQueryFilter<Server>(Server.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Server> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Server> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Server> getSelect() {
        String sql = "";
        String sortOrder = Server.P_DisplayName;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Server.P_Name + " LIKE ?";
            }
            else {
                sql += Server.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.hostName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = hostName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Server.P_HostName + " LIKE ?";
            }
            else {
                sql += Server.P_HostName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!OAString.isEmpty(this.ipAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = ipAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Server.P_IpAddress + " LIKE ?";
            }
            else {
                sql += Server.P_IpAddress + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_ServerId)) {
            if (sql.length() > 0) sql += " AND ";
            sql += Server.P_ServerId + " = ?";
            args = OAArray.add(Object.class, args, this.serverId);
        }
        if (getSilo() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(Server.P_Silo) + " = ?";
            args = OAArray.add(Object.class, args, getSilo());
            finder = new OAFinder<Silo, Server>(getSilo(), Silo.P_Servers);
        }
        if (getServerStatus() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(Server.P_ServerStatus) + " = ?";
            args = OAArray.add(Object.class, args, getServerStatus());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Server> sel = new OASelect<Server>(Server.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        sel.setFinder(finder);
        return sel;
    }

    private OAFilter<Server> filterDataSourceFilter;
    public OAFilter<Server> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Server>() {
            @Override
            public boolean isUsed(Server server) {
                return ServerSearch.this.isUsedForDataSourceFilter(server);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Server> filterCustomFilter;
    public OAFilter<Server> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Server>() {
            @Override
            public boolean isUsed(Server server) {
                boolean b = ServerSearch.this.isUsedForCustomFilter(server);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(server);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Server server) {
        if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(server.getName(), s)) return false;
        }
        if (hostName != null) {
            String s = getHostName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(server.getHostName(), s)) return false;
        }
        if (ipAddress != null) {
            String s = getIpAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(server.getIpAddress(), s)) return false;
        }
        if (!isNull(P_ServerId)) {
            if (!OACompare.isEqual(server.getServerId(), serverId)) return false;
        }
        if (silo != null) {
            if (!OACompare.isEqual(server.getSilo(), silo)) return false;
        }
        if (serverStatus != null) {
            if (!OACompare.isEqual(server.getServerStatus(), serverStatus)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Server server) {
        return true;
    }
}

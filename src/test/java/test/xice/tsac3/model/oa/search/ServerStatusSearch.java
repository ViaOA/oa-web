// Generated by OABuilder
package test.xice.tsac3.model.oa.search;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.OAQueryFilter;

import test.xice.tsac3.model.oa.*;

import com.viaoa.ds.*;

@OAClass(useDataSource=false, localOnly=true)
public class ServerStatusSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_Type = "Type";
    public static final String P_Type2 = "Type2";

    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected int type;
    protected int type2;

    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public int getType() {
        return type;
    }
    
    public void setType(int newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        int old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        if (isLoading()) return;
        if (type > type2) setType2(this.type);
    } 
    public int getType2() {
        return type2;
    }
    
    public void setType2(int newValue) {
        fireBeforePropertyChange(P_Type2, this.type2, newValue);
        int old = type2;
        this.type2 = newValue;
        firePropertyChange(P_Type2, old, this.type2);
        if (isLoading()) return;
        if (type > type2) setType(this.type2);
    }

    public void reset() {
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setType(0);
        setNull(P_Type);
        setType2(0);
        setNull(P_Type2);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;

        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<ServerStatus> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<ServerStatus> f = new OAQueryFilter<ServerStatus>(ServerStatus.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<ServerStatus> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<ServerStatus> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<ServerStatus> getSelect() {
        String sql = "";
        String sortOrder = ServerStatus.P_Type;
        Object[] args = new Object[0];
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ServerStatus.P_Name + " = null";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ServerStatus.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += ServerStatus.P_Name + " LIKE ?";
            }
            else {
                sql += ServerStatus.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (!isNull(P_Type)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Type2) && type != type2) {
                sql += ServerStatus.P_Type + " >= ?";
                args = OAArray.add(Object.class, args, getType());
                sql += " AND " + ServerStatus.P_Type + " <= ?";
                args = OAArray.add(Object.class, args, getType2());
            }
            else {
                sql += ServerStatus.P_Type + " = ?";
                args = OAArray.add(Object.class, args, getType());
            }
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<ServerStatus> sel = new OASelect<ServerStatus>(ServerStatus.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        return sel;
    }

    private OAFilter<ServerStatus> filterDataSourceFilter;
    public OAFilter<ServerStatus> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<ServerStatus>() {
            @Override
            public boolean isUsed(ServerStatus serverStatus) {
                return ServerStatusSearch.this.isUsedForDataSourceFilter(serverStatus);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<ServerStatus> filterCustomFilter;
    public OAFilter<ServerStatus> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<ServerStatus>() {
            @Override
            public boolean isUsed(ServerStatus serverStatus) {
                boolean b = ServerStatusSearch.this.isUsedForCustomFilter(serverStatus);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(serverStatus);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(ServerStatus serverStatus) {
        if (nameUseNull) {
            if (!OACompare.isEmpty(serverStatus.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(serverStatus.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(serverStatus.getName(), s)) return false;
        }
        if (!isNull(P_Type2)) {
            if (!OACompare.isEqualOrBetween(serverStatus.getType(), type, type2)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(ServerStatus serverStatus) {
        return true;
    }
}

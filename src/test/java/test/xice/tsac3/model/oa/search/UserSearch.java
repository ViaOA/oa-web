// Generated by OABuilder
package test.xice.tsac3.model.oa.search;

import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.filter.OAQueryFilter;

import test.xice.tsac3.model.oa.*;

import com.viaoa.ds.*;

@OAClass(useDataSource=false, localOnly=true)
public class UserSearch extends OAObject {
    private static final long serialVersionUID = 1L;

    public static final String P_UserId = "UserId";
    public static final String P_FirstName = "FirstName";
    public static final String P_FirstNameUseNull = "FirstNameUseNull";
    public static final String P_FirstNameUseNotNull = "FirstNameUseNotNull";
    public static final String P_LastName = "LastName";
    public static final String P_LastNameUseNull = "LastNameUseNull";
    public static final String P_LastNameUseNotNull = "LastNameUseNotNull";
    public static final String P_IsLoggedIn = "IsLoggedIn";
    public static final String P_Company = "Company";
    public static final String P_CompanyUseNull = "CompanyUseNull";
    public static final String P_LLADClientServer = "LLADClientServer";

    protected String userId;
    protected String firstName;
    protected boolean firstNameUseNull;
    protected boolean firstNameUseNotNull;
    protected String lastName;
    protected boolean lastNameUseNull;
    protected boolean lastNameUseNotNull;
    protected boolean isLoggedIn;
    protected Company company;
    protected boolean companyUseNull;
    protected Server lladClientServer;

    public String getUserId() {
        return userId;
    }
    
    public void setUserId(String newValue) {
        fireBeforePropertyChange(P_UserId, this.userId, newValue);
        String old = userId;
        this.userId = newValue;
        firePropertyChange(P_UserId, old, this.userId);
    }
      

    public String getFirstName() {
        return firstName;
    }
    
    public void setFirstName(String newValue) {
        fireBeforePropertyChange(P_FirstName, this.firstName, newValue);
        String old = firstName;
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
      
    public boolean getFirstNameUseNull() {
        return firstNameUseNull;
    }
    public void setFirstNameUseNull(boolean newValue) {
        boolean old = this.firstNameUseNull;
        this.firstNameUseNull = newValue;
        firePropertyChange(P_FirstNameUseNull, old, this.firstNameUseNull);
    }
    public boolean getFirstNameUseNotNull() {
        return firstNameUseNotNull;
    }
    public void setFirstNameUseNotNull(boolean newValue) {
        boolean old = this.firstNameUseNotNull;
        this.firstNameUseNotNull = newValue;
        firePropertyChange(P_FirstNameUseNotNull, old, this.firstNameUseNotNull);
    }

    public String getLastName() {
        return lastName;
    }
    
    public void setLastName(String newValue) {
        fireBeforePropertyChange(P_LastName, this.lastName, newValue);
        String old = lastName;
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
      
    public boolean getLastNameUseNull() {
        return lastNameUseNull;
    }
    public void setLastNameUseNull(boolean newValue) {
        boolean old = this.lastNameUseNull;
        this.lastNameUseNull = newValue;
        firePropertyChange(P_LastNameUseNull, old, this.lastNameUseNull);
    }
    public boolean getLastNameUseNotNull() {
        return lastNameUseNotNull;
    }
    public void setLastNameUseNotNull(boolean newValue) {
        boolean old = this.lastNameUseNotNull;
        this.lastNameUseNotNull = newValue;
        firePropertyChange(P_LastNameUseNotNull, old, this.lastNameUseNotNull);
    }

    public boolean getIsLoggedIn() {
        return isLoggedIn;
    }
    
    public void setIsLoggedIn(boolean newValue) {
        fireBeforePropertyChange(P_IsLoggedIn, this.isLoggedIn, newValue);
        boolean old = isLoggedIn;
        this.isLoggedIn = newValue;
        firePropertyChange(P_IsLoggedIn, old, this.isLoggedIn);
    }
      

    @OAOne
    public Company getCompany() {
        if (company == null) {
            company = (Company) getObject(P_Company);
        }
        return company;
    }
    public void setCompany(Company newValue) {
        Company old = this.company;
        this.company = newValue;
        firePropertyChange(P_Company, old, this.company);
    }
    public boolean getCompanyUseNull() {
        return companyUseNull;
    }
    public void setCompanyUseNull(boolean newValue) {
        boolean old = this.companyUseNull;
        this.companyUseNull = newValue;
        firePropertyChange(P_CompanyUseNull, old, this.companyUseNull);
    }

    @OAOne
    public Server getLLADClientServer() {
        if (lladClientServer == null) {
            lladClientServer = (Server) getObject(P_LLADClientServer);
        }
        return lladClientServer;
    }
    public void setLLADClientServer(Server newValue) {
        Server old = this.lladClientServer;
        this.lladClientServer = newValue;
        firePropertyChange(P_LLADClientServer, old, this.lladClientServer);
    }

    public void reset() {
        setUserId(null);
        setFirstName(null);
        setFirstNameUseNull(false);
        setFirstNameUseNotNull(false);
        setLastName(null);
        setLastNameUseNull(false);
        setLastNameUseNotNull(false);
        setIsLoggedIn(false);
        setNull(P_IsLoggedIn);
        setCompany(null);
        setCompanyUseNull(false);
        setLLADClientServer(null);
    }

    public boolean isDataEntered() {
        if (getUserId() != null) return true;
        if (getFirstName() != null) return true;
        if (getFirstNameUseNull()) return true;if (getFirstNameUseNotNull()) return true;
        if (getFirstNameUseNull()) return true;
        if (getFirstNameUseNotNull()) return true;
        if (getLastName() != null) return true;
        if (getLastNameUseNull()) return true;if (getLastNameUseNotNull()) return true;
        if (getLastNameUseNull()) return true;
        if (getLastNameUseNotNull()) return true;
        if (!isNull(P_IsLoggedIn)) return true;
        if (getCompany() != null) return true;
        if (getCompanyUseNull()) return true;
        if (getLLADClientServer() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<User> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<User> f = new OAQueryFilter<User>(User.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<User> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<User> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<User> getSelect() {
        String sql = "";
        String sortOrder = User.P_LastName;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (!OAString.isEmpty(this.userId)) {
            if (sql.length() > 0) sql += " AND ";
            String value = userId.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += User.P_UserId + " LIKE ?";
            }
            else {
                sql += User.P_UserId + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (firstNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_FirstName + " = null";
        }
        else if (firstNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_FirstName + " != null";
        }
        else if (!OAString.isEmpty(this.firstName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = firstName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += User.P_FirstName + " LIKE ?";
            }
            else {
                sql += User.P_FirstName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (lastNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_LastName + " = null";
        }
        else if (lastNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += User.P_LastName + " != null";
        }
        else if (!OAString.isEmpty(this.lastName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = lastName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += User.P_LastName + " LIKE ?";
            }
            else {
                sql += User.P_LastName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (companyUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(User.P_Company) + " = null";
        }
        else if (getCompany() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(User.P_Company) + " = ?";
            args = OAArray.add(Object.class, args, getCompany());
            finder = new OAFinder<Company, User>(getCompany(), Company.P_Users);
        }
        if (getLLADClientServer() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += OAString.cpp(User.P_UserLogins, UserLogin.P_LLADClient, LLADClient.P_Server) + " = ?";
            args = OAArray.add(Object.class, args, getLLADClientServer());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<User> sel = new OASelect<User>(User.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        sel.setFinder(finder);
        return sel;
    }

    private OAFilter<User> filterDataSourceFilter;
    public OAFilter<User> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<User>() {
            @Override
            public boolean isUsed(User user) {
                return UserSearch.this.isUsedForDataSourceFilter(user);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<User> filterCustomFilter;
    public OAFilter<User> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<User>() {
            @Override
            public boolean isUsed(User user) {
                boolean b = UserSearch.this.isUsedForCustomFilter(user);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(user);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(User user) {
        if (userId != null) {
            String s = getUserId();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(user.getUserId(), s)) return false;
        }
        if (firstNameUseNull) {
            if (!OACompare.isEmpty(user.getFirstName())) return false;
        }
        else if (firstNameUseNotNull) {
            if (OACompare.isEmpty(user.getFirstName())) return false;
        }
        else if (firstName != null) {
            String s = getFirstName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(user.getFirstName(), s)) return false;
        }
        if (lastNameUseNull) {
            if (!OACompare.isEmpty(user.getLastName())) return false;
        }
        else if (lastNameUseNotNull) {
            if (OACompare.isEmpty(user.getLastName())) return false;
        }
        else if (lastName != null) {
            String s = getLastName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(user.getLastName(), s)) return false;
        }
        if (companyUseNull) {
            if (!OACompare.isEmpty(user.getCompany())) return false;
        }
        else if (company != null) {
            if (!OACompare.isEqual(user.getCompany(), company)) return false;
        }
        if (lladClientServer != null) {
            String cpp = OAString.cpp(User.P_UserLogins, UserLogin.P_LLADClient, LLADClient.P_Server);
            OAFinder<User, Server> finder = new OAFinder<User, Server>(cpp);
             if (lladClientServer != null) {
                finder.addEqualFilter(null, getLLADClientServer());
            }
            if (finder.findFirst(user) == null) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(User user) {
        if (!isNull(P_IsLoggedIn)) {
            if (!OACompare.isEqual(user.getIsLoggedIn(), isLoggedIn)) return false;
        }
        return true;
    }
}

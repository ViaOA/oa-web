// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.ApplicationTypeCommand;
import test.xice.tsam.model.oa.Command;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
 
@OAClass(
    shortName = "atc",
    displayName = "Application Type Command",
    displayProperty = "command"
)
@OATable(
    indexes = {
        @OAIndex(name = "ApplicationTypeCommandApplicationType", columns = { @OAIndexColumn(name = "ApplicationTypeId") })
    }
)
public class ApplicationTypeCommand extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ApplicationTypeCommand.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_CommandLine = "CommandLine";
    public static final String P_CommandLine = "CommandLine";
    public static final String PROPERTY_NotSupported = "NotSupported";
    public static final String P_NotSupported = "NotSupported";
     
     
    public static final String PROPERTY_ApplicationType = "ApplicationType";
    public static final String P_ApplicationType = "ApplicationType";
    public static final String PROPERTY_Command = "Command";
    public static final String P_Command = "Command";
     
    protected int id;
    protected OADate created;
    protected String commandLine;
    protected boolean notSupported;
     
    // Links to other objects.
    protected transient ApplicationType applicationType;
    protected transient Command command;
     
    public ApplicationTypeCommand() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public ApplicationTypeCommand(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
    @OAProperty(displayName = "Command Line", maxLength = 254, displayLength = 18, columnLength = 15)
    @OAColumn(maxLength = 254)
    public String getCommandLine() {
        return commandLine;
    }
    public void setCommandLine(String newValue) {
        fireBeforePropertyChange(P_CommandLine, this.commandLine, newValue);
        String old = commandLine;
        this.commandLine = newValue;
        firePropertyChange(P_CommandLine, old, this.commandLine);
    }
    
    @OAProperty(displayName = "Not Supported", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getNotSupported() {
        return notSupported;
    }
    public void setNotSupported(boolean newValue) {
        fireBeforePropertyChange(P_NotSupported, this.notSupported, newValue);
        boolean old = notSupported;
        this.notSupported = newValue;
        firePropertyChange(P_NotSupported, old, this.notSupported);
    }
    
    @OAOne(
        displayName = "Application Type", 
        reverseName = ApplicationType.P_ApplicationTypeCommands, 
        required = true, 
        allowCreateNew = false, 
        isImportMatch = true
    )
    @OAFkey(columns = {"ApplicationTypeId"})
    public ApplicationType getApplicationType() {
        if (applicationType == null) {
            applicationType = (ApplicationType) getObject(P_ApplicationType);
        }
        return applicationType;
    }
    
    public void setApplicationType(ApplicationType newValue) {
        fireBeforePropertyChange(P_ApplicationType, this.applicationType, newValue);
        ApplicationType old = this.applicationType;
        this.applicationType = newValue;
        firePropertyChange(P_ApplicationType, old, this.applicationType);
    }
    
    @OAOne(
        reverseName = Command.P_ApplicationTypeCommands, 
        required = true, 
        allowCreateNew = false, 
        isImportMatch = true
    )
    @OAFkey(columns = {"CommandId"})
    public Command getCommand() {
        if (command == null) {
            command = (Command) getObject(P_Command);
        }
        return command;
    }
    
    public void setCommand(Command newValue) {
        fireBeforePropertyChange(P_Command, this.command, newValue);
        Command old = this.command;
        this.command = newValue;
        firePropertyChange(P_Command, old, this.command);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.commandLine = rs.getString(3);
        this.notSupported = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ApplicationTypeCommand.P_NotSupported, true);
        }
        int applicationTypeFkey = rs.getInt(5);
        if (!rs.wasNull() && applicationTypeFkey > 0) {
            setProperty(P_ApplicationType, new OAObjectKey(applicationTypeFkey));
        }
        int commandFkey = rs.getInt(6);
        if (!rs.wasNull() && commandFkey > 0) {
            setProperty(P_Command, new OAObjectKey(commandFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.Developer;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
 
@OAClass(
    shortName = "dev",
    displayName = "Developer",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "fullName",
    sortProperty = "lastName"
)
@OATable(
)
public class Developer extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Developer.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_FirstName = "FirstName";
    public static final String P_FirstName = "FirstName";
    public static final String PROPERTY_LastName = "LastName";
    public static final String P_LastName = "LastName";
    public static final String PROPERTY_InactiveDate = "InactiveDate";
    public static final String P_InactiveDate = "InactiveDate";
     
    public static final String PROPERTY_FullName = "FullName";
    public static final String P_FullName = "FullName";
     
    public static final String PROPERTY_ApplicationTypes = "ApplicationTypes";
    public static final String P_ApplicationTypes = "ApplicationTypes";
     
    protected int id;
    protected OADate created;
    protected String firstName;
    protected String lastName;
    protected OADate inactiveDate;
     
    // Links to other objects.
    protected transient Hub<ApplicationType> hubApplicationTypes;
     
    public Developer() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Developer(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
    @OAProperty(displayName = "First Name", maxLength = 35, isImportMatch = true, displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 35)
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String newValue) {
        fireBeforePropertyChange(P_FirstName, this.firstName, newValue);
        String old = firstName;
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
    
    @OAProperty(displayName = "Last Name", maxLength = 55, isImportMatch = true, displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 55)
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String newValue) {
        fireBeforePropertyChange(P_LastName, this.lastName, newValue);
        String old = lastName;
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
    
    @OAProperty(displayName = "Inactive Date", displayLength = 12, columnLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInactiveDate() {
        return inactiveDate;
    }
    public void setInactiveDate(OADate newValue) {
        fireBeforePropertyChange(P_InactiveDate, this.inactiveDate, newValue);
        OADate old = inactiveDate;
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
    
    @OACalculatedProperty(displayName = "Full Name", displayLength = 15, columnLength = 14, properties = {P_FirstName, P_LastName})
    public String getFullName() {
        String fullName = "";
        firstName = this.getFirstName();
        if (firstName != null) {
            if (fullName.length() > 0) fullName += " ";
            fullName += firstName;
        }
    
        // lastName
        lastName = this.getLastName();
        if (lastName != null) {
            if (fullName.length() > 0) fullName += " ";
            fullName += lastName;
        }
        return fullName;
    }
    
     
    @OAMany(
        displayName = "Application Types", 
        toClass = ApplicationType.class, 
        reverseName = ApplicationType.P_Developers
    )
    @OALinkTable(name = "DeveloperApplicationType", indexName = "ApplicationTypeDeveloper", columns = {"DeveloperId"})
    public Hub<ApplicationType> getApplicationTypes() {
        if (hubApplicationTypes == null) {
            hubApplicationTypes = (Hub<ApplicationType>) getHub(P_ApplicationTypes);
        }
        return hubApplicationTypes;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.firstName = rs.getString(3);
        this.lastName = rs.getString(4);
        date = rs.getDate(5);
        if (date != null) this.inactiveDate = new OADate(date);
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

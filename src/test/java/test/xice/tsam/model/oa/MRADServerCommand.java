// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import test.xice.tsam.model.oa.AdminUser;
import test.xice.tsam.model.oa.Command;
import test.xice.tsam.model.oa.MRADClientCommand;
import test.xice.tsam.model.oa.MRADServer;
import test.xice.tsam.model.oa.MRADServerCommand;
import test.xice.tsam.model.oa.SSHExecute;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsam.delegate.RemoteDelegate;
import test.xice.tsam.delegate.ServerModelDelegate;
import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
 
@OAClass(
    shortName = "mradsc",
    displayName = "MRAD Server Command",
    displayProperty = "command"
)
@OATable(
    indexes = {
        @OAIndex(name = "MRADServerCommandMradServer", columns = { @OAIndexColumn(name = "MradServerId") })
    }
)
public class MRADServerCommand extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MRADServerCommand.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_Console = "Console";
    public static final String P_Console = "Console";
    public static final String PROPERTY_Param = "Param";
    public static final String P_Param = "Param";
    public static final String PROPERTY_ParamInteger = "ParamInteger";
    public static final String P_ParamInteger = "ParamInteger";
     
     
    public static final String PROPERTY_AdminUser = "AdminUser";
    public static final String P_AdminUser = "AdminUser";
    public static final String PROPERTY_Command = "Command";
    public static final String P_Command = "Command";
    public static final String PROPERTY_MRADClientCommands = "MRADClientCommands";
    public static final String P_MRADClientCommands = "MRADClientCommands";
    public static final String PROPERTY_MRADServer = "MRADServer";
    public static final String P_MRADServer = "MRADServer";
    public static final String PROPERTY_SSHExecutes = "SSHExecutes";
    public static final String P_SSHExecutes = "SSHExecutes";
     
    public static final String METHOD_RunOnServer = "RunOnServer";
    public static final String M_RunOnServer = "RunOnServer";
    protected int id;
    protected OADateTime created;
    protected OADateTime started;
    protected String error;
    protected String console;
    protected String param;
    protected int paramInteger;
     
    // Links to other objects.
    protected transient AdminUser adminUser;
    protected transient Command command;
    protected transient Hub<MRADClientCommand> hubMRADClientCommands;
    protected transient MRADServer mradServer;
    protected transient Hub<SSHExecute> hubSSHExecutes;
     
    public MRADServerCommand() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public MRADServerCommand(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 12, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
    @OAProperty(displayLength = 12)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        fireBeforePropertyChange(P_Started, this.started, newValue);
        OADateTime old = started;
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    
    @OAProperty(maxLength = 75, displayLength = 18, columnLength = 12)
    @OAColumn(maxLength = 75)
    public String getError() {
        return error;
    }
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    
    @OAProperty(maxLength = 255, displayLength = 18, columnLength = 12)
    public String getConsole() {
        return console;
    }
    public void setConsole(String newValue) {
        fireBeforePropertyChange(P_Console, this.console, newValue);
        String old = console;
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    
    @OAProperty(maxLength = 200, displayLength = 15, columnLength = 10)
    @OAColumn(maxLength = 200)
    public String getParam() {
        return param;
    }
    public void setParam(String newValue) {
        fireBeforePropertyChange(P_Param, this.param, newValue);
        String old = param;
        this.param = newValue;
        firePropertyChange(P_Param, old, this.param);
    }
    
    @OAProperty(displayName = "Param Integer", displayLength = 3)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getParamInteger() {
        return paramInteger;
    }
    public void setParamInteger(int newValue) {
        fireBeforePropertyChange(P_ParamInteger, this.paramInteger, newValue);
        int old = paramInteger;
        this.paramInteger = newValue;
        firePropertyChange(P_ParamInteger, old, this.paramInteger);
    }
    
    @OAOne(
        displayName = "Admin User", 
        reverseName = AdminUser.P_MRADServerCommands, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"AdminUserId"})
    public AdminUser getAdminUser() {
        if (adminUser == null) {
            adminUser = (AdminUser) getObject(P_AdminUser);
        }
        return adminUser;
    }
    
    public void setAdminUser(AdminUser newValue) {
        fireBeforePropertyChange(P_AdminUser, this.adminUser, newValue);
        AdminUser old = this.adminUser;
        this.adminUser = newValue;
        firePropertyChange(P_AdminUser, old, this.adminUser);
    }
    
    @OAOne(
        reverseName = Command.P_MRADServerCommands, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CommandId"})
    public Command getCommand() {
        if (command == null) {
            command = (Command) getObject(P_Command);
        }
        return command;
    }
    
    public void setCommand(Command newValue) {
        fireBeforePropertyChange(P_Command, this.command, newValue);
        Command old = this.command;
        this.command = newValue;
        firePropertyChange(P_Command, old, this.command);
    }
    
    @OAMany(
        displayName = "MRAD Client Commands", 
        toClass = MRADClientCommand.class, 
        owner = true, 
        reverseName = MRADClientCommand.P_MRADServerCommand, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<MRADClientCommand> getMRADClientCommands() {
        if (hubMRADClientCommands == null) {
            hubMRADClientCommands = (Hub<MRADClientCommand>) getHub(P_MRADClientCommands);
        }
        return hubMRADClientCommands;
    }
    
    @OAOne(
        displayName = "MRAD Server", 
        reverseName = MRADServer.P_MRADServerCommands, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MradServerId"})
    public MRADServer getMRADServer() {
        if (mradServer == null) {
            mradServer = (MRADServer) getObject(P_MRADServer);
        }
        return mradServer;
    }
    
    public void setMRADServer(MRADServer newValue) {
        fireBeforePropertyChange(P_MRADServer, this.mradServer, newValue);
        MRADServer old = this.mradServer;
        this.mradServer = newValue;
        firePropertyChange(P_MRADServer, old, this.mradServer);
    }
    
    @OAMany(
        displayName = "SSH Executes", 
        toClass = SSHExecute.class, 
        reverseName = SSHExecute.P_MRADServerCommand
    )
    public Hub<SSHExecute> getSSHExecutes() {
        if (hubSSHExecutes == null) {
            hubSSHExecutes = (Hub<SSHExecute>) getHub(P_SSHExecutes);
        }
        return hubSSHExecutes;
    }
    
    // runOnServer - run command
    public void runOnServer() throws Exception {
        MRADServerCommandDelegate.runOnServer(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        this.error = rs.getString(4);
        this.param = rs.getString(5);
        this.paramInteger = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MRADServerCommand.P_ParamInteger, true);
        }
        int adminUserFkey = rs.getInt(7);
        if (!rs.wasNull() && adminUserFkey > 0) {
            setProperty(P_AdminUser, new OAObjectKey(adminUserFkey));
        }
        int commandFkey = rs.getInt(8);
        if (!rs.wasNull() && commandFkey > 0) {
            setProperty(P_Command, new OAObjectKey(commandFkey));
        }
        int mradServerFkey = rs.getInt(9);
        if (!rs.wasNull() && mradServerFkey > 0) {
            setProperty(P_MRADServer, new OAObjectKey(mradServerFkey));
        }
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

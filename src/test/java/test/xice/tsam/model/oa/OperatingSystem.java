// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;

import test.xice.tsam.model.oa.OSVersion;
import test.xice.tsam.model.oa.OperatingSystem;
import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "os",
    displayName = "Operating System",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name"
)
@OATable(
)
public class OperatingSystem extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(OperatingSystem.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Type = "Type";
    public static final String P_Type = "Type";
    public static final String PROPERTY_TypeAsString = "TypeAsString";
    public static final String P_TypeAsString = "TypeAsString";
    public static final String PROPERTY_UserId = "UserId";
    public static final String P_UserId = "UserId";
     
     
    public static final String PROPERTY_OSVersions = "OSVersions";
    public static final String P_OSVersions = "OSVersions";
     
    protected int id;
    protected String name;
    protected int type;
    public static final int TYPE_Unknown = 0;
    public static final int TYPE_Solaris = 1;
    public static final int TYPE_Linux = 2;
    public static final int TYPE_Windows = 3;
    public static final int TYPE_Other = 4;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Unknown");
        hubType.addElement("Solaris");
        hubType.addElement("Linux");
        hubType.addElement("Windows");
        hubType.addElement("Other");
    }
    protected String userId;
     
    // Links to other objects.
    protected transient Hub<OSVersion> hubOSVersions;
     
    public OperatingSystem() {
    }
     
    public OperatingSystem(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(maxLength = 35, displayLength = 15, columnLength = 10)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
    @OAProperty(isImportMatch = true, displayLength = 12, columnLength = 7, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        int old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
    }
    
    public String getTypeAsString() {
        if (isNull(P_Type)) return "";
        String s = hubType.getAt(getType());
        if (s == null) s = "";
        return s;
    }
     
    @OAProperty(displayName = "User Id", maxLength = 12, displayLength = 10)
    @OAColumn(maxLength = 12)
    public String getUserId() {
        return userId;
    }
    public void setUserId(String newValue) {
        fireBeforePropertyChange(P_UserId, this.userId, newValue);
        String old = userId;
        this.userId = newValue;
        firePropertyChange(P_UserId, old, this.userId);
    }
    
    @OAMany(
        displayName = "OS Versions", 
        toClass = OSVersion.class, 
        owner = true, 
        reverseName = OSVersion.P_OperatingSystem, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<OSVersion> getOSVersions() {
        if (hubOSVersions == null) {
            hubOSVersions = (Hub<OSVersion>) getHub(P_OSVersions);
        }
        return hubOSVersions;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.type = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, OperatingSystem.P_Type, true);
        }
        this.userId = rs.getString(4);
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

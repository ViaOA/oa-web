// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.*;
import java.sql.*;

import com.viaoa.object.*;
import com.viaoa.remote.OARemoteThread;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
import test.xice.tsam.model.oa.Application;
import test.xice.tsam.model.oa.Environment;
import test.xice.tsam.model.oa.OSVersion;
import test.xice.tsam.model.oa.Server;
import test.xice.tsam.model.oa.Silo;
import test.xice.tsam.model.oa.Site;

import com.viaoa.annotation.*;

 
@OAClass(
    shortName = "ser",
    displayName = "Server",
    displayProperty = "displayName",
    sortProperty = "displayName",
    rootTreePropertyPaths = {
        "[Site]."+Site.P_Environments+"."+Environment.P_Silos+"."+Silo.P_Servers
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "ServerSilo", columns = { @OAIndexColumn(name = "SiloId") })
    }
)
public class Server extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Server.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_HostName = "HostName";
    public static final String P_HostName = "HostName";
    public static final String PROPERTY_IpAddress = "IpAddress";
    public static final String P_IpAddress = "IpAddress";
    public static final String PROPERTY_DnsName = "DnsName";
    public static final String P_DnsName = "DnsName";
    public static final String PROPERTY_ShortDnsName = "ShortDnsName";
    public static final String P_ShortDnsName = "ShortDnsName";
    public static final String PROPERTY_UserId = "UserId";
    public static final String P_UserId = "UserId";
    public static final String P_SyncCnt = "SyncCnt";
    public static final String P_MiscCnt = "MiscCnt";
     
    public static final String PROPERTY_DisplayName = "DisplayName";
    public static final String P_DisplayName = "DisplayName";
     
    public static final String PROPERTY_Applications = "Applications";
    public static final String P_Applications = "Applications";
    public static final String PROPERTY_OSVersion = "OSVersion";
    public static final String P_OSVersion = "OSVersion";
    public static final String PROPERTY_Silo = "Silo";
    public static final String P_Silo = "Silo";
     
    protected int id;
    protected OADateTime created;
    protected volatile String name;
    protected String hostName;
    protected String ipAddress;
    protected String dnsName;
    protected String shortDnsName;
    protected String userId;
    protected volatile int syncCnt;
    protected volatile int miscCnt;
     
    // Links to other objects.
    protected transient Hub<Application> hubApplications;
    protected transient OSVersion osVersion;
    protected transient Silo silo;
     
    public Server() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public Server(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 12)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
    @OAProperty(maxLength = 55, displayLength = 12, columnLength = 10)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }

    
    transient static final AtomicInteger aiCnt = new AtomicInteger();
    
    transient static AtomicLong alChecksum = new AtomicLong();
    
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        if (newValue != null) {
            alChecksum.addAndGet(newValue.hashCode());
        }
        
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
    public long getNameChecksum() {
        return alChecksum.get();
    }
    
    @OAProperty(displayName = "Host Name", maxLength = 35, displayLength = 12, columnLength = 22)
    @OAColumn(maxLength = 35)
    public String getHostName() {
        return hostName;
    }
    public void setHostName(String newValue) {
        fireBeforePropertyChange(P_HostName, this.hostName, newValue);
        String old = hostName;
        this.hostName = newValue;
        firePropertyChange(P_HostName, old, this.hostName);
    }
    
    @OAProperty(displayName = "IP Address", maxLength = 24, displayLength = 14, columnLength = 12)
    @OAColumn(maxLength = 24)
    public String getIpAddress() {
        return ipAddress;
    }
    public void setIpAddress(String newValue) {
        fireBeforePropertyChange(P_IpAddress, this.ipAddress, newValue);
        String old = ipAddress;
        this.ipAddress = newValue;
        firePropertyChange(P_IpAddress, old, this.ipAddress);
    }
    
    @OAProperty(displayName = "DNS Name", maxLength = 50, displayLength = 10)
    @OAColumn(maxLength = 50)
    public String getDnsName() {
        return dnsName;
    }
    public void setDnsName(String newValue) {
        fireBeforePropertyChange(P_DnsName, this.dnsName, newValue);
        String old = dnsName;
        this.dnsName = newValue;
        firePropertyChange(P_DnsName, old, this.dnsName);
    }
    
    @OAProperty(displayName = "Short DNS Name", maxLength = 25, displayLength = 10, columnLength = 6)
    @OAColumn(maxLength = 25)
    public String getShortDnsName() {
        return shortDnsName;
    }
    public void setShortDnsName(String newValue) {
        fireBeforePropertyChange(P_ShortDnsName, this.shortDnsName, newValue);
        String old = shortDnsName;
        this.shortDnsName = newValue;
        firePropertyChange(P_ShortDnsName, old, this.shortDnsName);
    }
    
    @OAProperty(displayName = "User Id", maxLength = 25, displayLength = 12, columnLength = 10)
    @OAColumn(maxLength = 25)
    public String getUserId() {
        return userId;
    }
    public void setUserId(String newValue) {
        fireBeforePropertyChange(P_UserId, this.userId, newValue);
        String old = userId;
        this.userId = newValue;
        firePropertyChange(P_UserId, old, this.userId);
    }
    
    @OACalculatedProperty(displayName = "Display Name", displayLength = 15, properties = {P_Name, P_HostName, P_IpAddress})
    public String getDisplayName() {
        String displayName = "";
        if (!OAString.isEmpty(hostName)) {
            if (displayName.length() > 0) displayName += " ";
            displayName += hostName;
        }
        else if (!OAString.isEmpty(name)) {
            if (displayName.length() > 0) displayName += " ";
            displayName += name;
        }
        else if (!OAString.isEmpty(dnsName)) {
            if (displayName.length() > 0) displayName += " ";
            displayName += dnsName;
        }
        else if (!OAString.isEmpty(shortDnsName)) {
            if (displayName.length() > 0) displayName += " ";
            displayName += shortDnsName;
        }
        else if (!OAString.isEmpty(ipAddress)) {
            if (displayName.length() > 0) displayName += " ";
            displayName += ipAddress;
        }
        return displayName;
    }
     
    @OAMany(
        toClass = Application.class, 
        owner = true, 
        reverseName = Application.P_Server, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Application> getApplications() {
        if (hubApplications == null) {
            hubApplications = (Hub<Application>) getHub(P_Applications);
        }
        return hubApplications;
    }
    
    @OAOne(
        displayName = "OS Version", 
        reverseName = OSVersion.P_Servers, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"OSVersionId"})
    public OSVersion getOSVersion() {
        if (osVersion == null) {
            osVersion = (OSVersion) getObject(P_OSVersion);
        }
        return osVersion;
    }
    
    public void setOSVersion(OSVersion newValue) {
        fireBeforePropertyChange(P_OSVersion, this.osVersion, newValue);
        OSVersion old = this.osVersion;
        this.osVersion = newValue;
        firePropertyChange(P_OSVersion, old, this.osVersion);
    }
    
    @OAOne(
        reverseName = Silo.P_Servers, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SiloId"})
    public Silo getSilo() {
        if (silo == null) {
            silo = (Silo) getObject(P_Silo);
        }
        return silo;
    }
    
    public void setSilo(Silo newValue) {
        fireBeforePropertyChange(P_Silo, this.silo, newValue);
        Silo old = this.silo;
        this.silo = newValue;
        firePropertyChange(P_Silo, old, this.silo);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.name = rs.getString(3);
        this.hostName = rs.getString(4);
        this.ipAddress = rs.getString(5);
        this.dnsName = rs.getString(6);
        this.shortDnsName = rs.getString(7);
        this.userId = rs.getString(8);
        int osVersionFkey = rs.getInt(9);
        if (!rs.wasNull() && osVersionFkey > 0) {
            setProperty(P_OSVersion, new OAObjectKey(osVersionFkey));
        }
        int siloFkey = rs.getInt(10);
        if (!rs.wasNull() && siloFkey > 0) {
            setProperty(P_Silo, new OAObjectKey(siloFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
    
    
    @OAProperty(displayName = "SyncCnt", maxLength = 7, displayLength = 5, columnLength = 5)
    public int getSyncCnt() {
        return syncCnt;
    }
    public void setSyncCnt(int newValue) {
        fireBeforePropertyChange(P_SyncCnt, this.syncCnt, newValue);
        int old = syncCnt;
        if (newValue != this.syncCnt+1) {  
            throw new RuntimeException("expected "+(old+1)+", received="+newValue);
        }
        this.syncCnt = newValue;
        firePropertyChange(P_SyncCnt, old, this.syncCnt);
    }

    @OAProperty(displayName = "MiscCnt", maxLength = 7, displayLength = 5, columnLength = 5)
    public int getMiscCnt() {
        return miscCnt;
    }
    public void setMiscCnt(int newValue) {
        fireBeforePropertyChange(P_MiscCnt, this.miscCnt, newValue);
        int old = miscCnt;
        this.miscCnt = newValue;
        firePropertyChange(P_MiscCnt, old, this.miscCnt);
    }
}
 

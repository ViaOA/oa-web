// Generated by OABuilder
package test.xice.tsam.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsam.model.oa.SSHExecute;
import test.xice.tsam.model.oa.propertypath.MRADClientCommandPPx;
import test.xice.tsam.model.oa.propertypath.MRADServerCommandPPx;
import test.xice.tsam.model.oa.propertypath.PPxInterface;

import test.xice.tsam.model.oa.*;
 
public class SSHExecutePPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public SSHExecutePPx(String name) {
        this(null, name);
    }

    public SSHExecutePPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public MRADClientCommandPPx mradClientCommand() {
        MRADClientCommandPPx ppx = new MRADClientCommandPPx(this, SSHExecute.P_MRADClientCommand);
        return ppx;
    }

    public MRADServerCommandPPx mradServerCommand() {
        MRADServerCommandPPx ppx = new MRADServerCommandPPx(this, SSHExecute.P_MRADServerCommand);
        return ppx;
    }

    public String id() {
        return pp + "." + SSHExecute.P_Id;
    }

    public String created() {
        return pp + "." + SSHExecute.P_Created;
    }

    public String hostName() {
        return pp + "." + SSHExecute.P_HostName;
    }

    public String userId() {
        return pp + "." + SSHExecute.P_UserId;
    }

    public String sshKeyFile() {
        return pp + "." + SSHExecute.P_SSHKeyFile;
    }

    public String commandLine() {
        return pp + "." + SSHExecute.P_CommandLine;
    }

    public String started() {
        return pp + "." + SSHExecute.P_Started;
    }

    public String connected() {
        return pp + "." + SSHExecute.P_Connected;
    }

    public String authenticated() {
        return pp + "." + SSHExecute.P_Authenticated;
    }

    public String completed() {
        return pp + "." + SSHExecute.P_Completed;
    }

    public String successful() {
        return pp + "." + SSHExecute.P_Successful;
    }

    public String output() {
        return pp + "." + SSHExecute.P_Output;
    }

    public String error() {
        return pp + "." + SSHExecute.P_Error;
    }

    public String console() {
        return pp + "." + SSHExecute.P_Console;
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

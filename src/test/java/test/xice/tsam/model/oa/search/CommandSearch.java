// Generated by OABuilder
package test.xice.tsam.model.oa.search;

import java.util.logging.*;

import test.xice.tsam.model.oa.Command;
import test.xice.tsam.model.oa.search.CommandSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.propertypath.*;

@OAClass(useDataSource=false, localOnly=true)
public class CommandSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(CommandSearch.class.getName());
    public static final String P_Type = "Type";
    public static final String P_Type2 = "Type2";
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_CommandLine = "CommandLine";
    public static final String P_CommandLineUseNull = "CommandLineUseNull";
    public static final String P_CommandLineUseNotNull = "CommandLineUseNotNull";

    protected int type;
    protected int type2;
    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String commandLine;
    protected boolean commandLineUseNull;
    protected boolean commandLineUseNotNull;

    public int getType() {
        return type;
    }
    public void setType(int newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        int old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
        if (isLoading()) return;
        if (type > type2) setType2(this.type);
    } 
    public int getType2() {
        return type2;
    }
    public void setType2(int newValue) {
        fireBeforePropertyChange(P_Type2, this.type2, newValue);
        int old = type2;
        this.type2 = newValue;
        firePropertyChange(P_Type2, old, this.type2);
        if (isLoading()) return;
        if (type > type2) setType(this.type2);
    }

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getCommandLine() {
        return commandLine;
    }
    public void setCommandLine(String newValue) {
        fireBeforePropertyChange(P_CommandLine, this.commandLine, newValue);
        String old = commandLine;
        this.commandLine = newValue;
        firePropertyChange(P_CommandLine, old, this.commandLine);
    }
    
      
    public boolean getCommandLineUseNull() {
        return commandLineUseNull;
    }
    public void setCommandLineUseNull(boolean newValue) {
        boolean old = this.commandLineUseNull;
        this.commandLineUseNull = newValue;
        firePropertyChange(P_CommandLineUseNull, old, this.commandLineUseNull);
    }
    public boolean getCommandLineUseNotNull() {
        return commandLineUseNotNull;
    }
    public void setCommandLineUseNotNull(boolean newValue) {
        boolean old = this.commandLineUseNotNull;
        this.commandLineUseNotNull = newValue;
        firePropertyChange(P_CommandLineUseNotNull, old, this.commandLineUseNotNull);
    }

    public void reset() {
        setType(0);
        setNull(P_Type);
        setType2(0);
        setNull(P_Type2);
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setCommandLine(null);
        setCommandLineUseNull(false);
        setCommandLineUseNotNull(false);
    }

    public boolean isDataEntered() {

        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getCommandLine() != null) return true;
        if (getCommandLineUseNull()) return true;if (getCommandLineUseNotNull()) return true;
        if (getCommandLineUseNull()) return true;
        if (getCommandLineUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Command> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Command> f = new OAQueryFilter<Command>(Command.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Command> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Command> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Command> getSelect() {
        String sql = "";
        String sortOrder = "";
        Object[] args = new Object[0];
        if (!isNull(P_Type)) {
            if (sql.length() > 0) sql += " AND ";
            if (!isNull(P_Type2) && type != type2) {
                sql += Command.P_Type + " >= ?";
                args = OAArray.add(Object.class, args, getType());
                sql += " AND " + Command.P_Type + " <= ?";
                args = OAArray.add(Object.class, args, getType2());
            }
            else {
                sql += Command.P_Type + " = ?";
                args = OAArray.add(Object.class, args, getType());
            }
        }
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Command.P_Name + " = null";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Command.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Command.P_Name + " LIKE ?";
            }
            else {
                sql += Command.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (commandLineUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Command.P_CommandLine + " = null";
        }
        else if (commandLineUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Command.P_CommandLine + " != null";
        }
        else if (!OAString.isEmpty(this.commandLine)) {
            if (sql.length() > 0) sql += " AND ";
            String value = commandLine.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Command.P_CommandLine + " LIKE ?";
            }
            else {
                sql += Command.P_CommandLine + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Command> sel = new OASelect<Command>(Command.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        return sel;
    }

    private OAFilter<Command> filterDataSourceFilter;
    public OAFilter<Command> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Command>() {
            @Override
            public boolean isUsed(Command command) {
                return CommandSearch.this.isUsedForDataSourceFilter(command);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Command> filterCustomFilter;
    public OAFilter<Command> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Command>() {
            @Override
            public boolean isUsed(Command command) {
                boolean b = CommandSearch.this.isUsedForCustomFilter(command);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(command);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Command command) {
        if (!isNull(P_Type2)) {
            if (!OACompare.isEqualOrBetween(command.getType(), type, type2)) return false;
        }
        if (nameUseNull) {
            if (!OACompare.isEmpty(command.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(command.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(command.getName(), s)) return false;
        }
        if (commandLineUseNull) {
            if (!OACompare.isEmpty(command.getCommandLine())) return false;
        }
        else if (commandLineUseNotNull) {
            if (OACompare.isEmpty(command.getCommandLine())) return false;
        }
        else if (commandLine != null) {
            String s = getCommandLine();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(command.getCommandLine(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Command command) {
        return true;
    }
}

// Generated by OABuilder
package test.xice.tsam.model.oa.search;

import java.util.logging.*;

import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.Developer;
import test.xice.tsam.model.oa.propertypath.DeveloperPP;
import test.xice.tsam.model.oa.search.DeveloperSearch;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.util.OADate;
import com.viaoa.filter.OAQueryFilter;

import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.propertypath.*;

@OAClass(useDataSource=false, localOnly=true)
public class DeveloperSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(DeveloperSearch.class.getName());
    public static final String P_Created = "Created";
    public static final String P_CreatedUseNull = "CreatedUseNull";
    public static final String P_CreatedUseNotNull = "CreatedUseNotNull";
    public static final String P_FirstName = "FirstName";
    public static final String P_FirstNameUseNull = "FirstNameUseNull";
    public static final String P_FirstNameUseNotNull = "FirstNameUseNotNull";
    public static final String P_LastName = "LastName";
    public static final String P_LastNameUseNull = "LastNameUseNull";
    public static final String P_LastNameUseNotNull = "LastNameUseNotNull";
    public static final String P_InactiveDate = "InactiveDate";
    public static final String P_InactiveDateUseNull = "InactiveDateUseNull";
    public static final String P_InactiveDateUseNotNull = "InactiveDateUseNotNull";
    public static final String P_ApplicationTypes = "ApplicationTypes";

    protected OADate created;
    protected boolean createdUseNull;
    protected boolean createdUseNotNull;
    protected String firstName;
    protected boolean firstNameUseNull;
    protected boolean firstNameUseNotNull;
    protected String lastName;
    protected boolean lastNameUseNull;
    protected boolean lastNameUseNotNull;
    protected OADate inactiveDate;
    protected boolean inactiveDateUseNull;
    protected boolean inactiveDateUseNotNull;
    protected ApplicationType applicationTypes;

    public OADate getCreated() {
        return created;
    }
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
      
    public boolean getCreatedUseNull() {
        return createdUseNull;
    }
    public void setCreatedUseNull(boolean newValue) {
        boolean old = this.createdUseNull;
        this.createdUseNull = newValue;
        firePropertyChange(P_CreatedUseNull, old, this.createdUseNull);
    }
    public boolean getCreatedUseNotNull() {
        return createdUseNotNull;
    }
    public void setCreatedUseNotNull(boolean newValue) {
        boolean old = this.createdUseNotNull;
        this.createdUseNotNull = newValue;
        firePropertyChange(P_CreatedUseNotNull, old, this.createdUseNotNull);
    }

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String newValue) {
        fireBeforePropertyChange(P_FirstName, this.firstName, newValue);
        String old = firstName;
        this.firstName = newValue;
        firePropertyChange(P_FirstName, old, this.firstName);
    }
    
      
    public boolean getFirstNameUseNull() {
        return firstNameUseNull;
    }
    public void setFirstNameUseNull(boolean newValue) {
        boolean old = this.firstNameUseNull;
        this.firstNameUseNull = newValue;
        firePropertyChange(P_FirstNameUseNull, old, this.firstNameUseNull);
    }
    public boolean getFirstNameUseNotNull() {
        return firstNameUseNotNull;
    }
    public void setFirstNameUseNotNull(boolean newValue) {
        boolean old = this.firstNameUseNotNull;
        this.firstNameUseNotNull = newValue;
        firePropertyChange(P_FirstNameUseNotNull, old, this.firstNameUseNotNull);
    }

    public String getLastName() {
        return lastName;
    }
    public void setLastName(String newValue) {
        fireBeforePropertyChange(P_LastName, this.lastName, newValue);
        String old = lastName;
        this.lastName = newValue;
        firePropertyChange(P_LastName, old, this.lastName);
    }
    
      
    public boolean getLastNameUseNull() {
        return lastNameUseNull;
    }
    public void setLastNameUseNull(boolean newValue) {
        boolean old = this.lastNameUseNull;
        this.lastNameUseNull = newValue;
        firePropertyChange(P_LastNameUseNull, old, this.lastNameUseNull);
    }
    public boolean getLastNameUseNotNull() {
        return lastNameUseNotNull;
    }
    public void setLastNameUseNotNull(boolean newValue) {
        boolean old = this.lastNameUseNotNull;
        this.lastNameUseNotNull = newValue;
        firePropertyChange(P_LastNameUseNotNull, old, this.lastNameUseNotNull);
    }

    public OADate getInactiveDate() {
        return inactiveDate;
    }
    public void setInactiveDate(OADate newValue) {
        fireBeforePropertyChange(P_InactiveDate, this.inactiveDate, newValue);
        OADate old = inactiveDate;
        this.inactiveDate = newValue;
        firePropertyChange(P_InactiveDate, old, this.inactiveDate);
    }
    
      
    public boolean getInactiveDateUseNull() {
        return inactiveDateUseNull;
    }
    public void setInactiveDateUseNull(boolean newValue) {
        boolean old = this.inactiveDateUseNull;
        this.inactiveDateUseNull = newValue;
        firePropertyChange(P_InactiveDateUseNull, old, this.inactiveDateUseNull);
    }
    public boolean getInactiveDateUseNotNull() {
        return inactiveDateUseNotNull;
    }
    public void setInactiveDateUseNotNull(boolean newValue) {
        boolean old = this.inactiveDateUseNotNull;
        this.inactiveDateUseNotNull = newValue;
        firePropertyChange(P_InactiveDateUseNotNull, old, this.inactiveDateUseNotNull);
    }

    @OAOne
    public ApplicationType getApplicationTypes() {
        if (applicationTypes == null) {
            applicationTypes = (ApplicationType) getObject(P_ApplicationTypes);
        }
        return applicationTypes;
    }
    public void setApplicationTypes(ApplicationType newValue) {
        ApplicationType old = this.applicationTypes;
        this.applicationTypes = newValue;
        firePropertyChange(P_ApplicationTypes, old, this.applicationTypes);
    }

    public void reset() {
        setCreated(null);
        setCreatedUseNull(false);
        setCreatedUseNotNull(false);
        setFirstName(null);
        setFirstNameUseNull(false);
        setFirstNameUseNotNull(false);
        setLastName(null);
        setLastNameUseNull(false);
        setLastNameUseNotNull(false);
        setInactiveDate(null);
        setInactiveDateUseNull(false);
        setInactiveDateUseNotNull(false);
        setApplicationTypes(null);
    }

    public boolean isDataEntered() {
        if (getCreated() != null) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNull()) return true;
        if (getCreatedUseNotNull()) return true;
        if (getFirstName() != null) return true;
        if (getFirstNameUseNull()) return true;if (getFirstNameUseNotNull()) return true;
        if (getFirstNameUseNull()) return true;
        if (getFirstNameUseNotNull()) return true;
        if (getLastName() != null) return true;
        if (getLastNameUseNull()) return true;if (getLastNameUseNotNull()) return true;
        if (getLastNameUseNull()) return true;
        if (getLastNameUseNotNull()) return true;
        if (getInactiveDate() != null) return true;
        if (getInactiveDateUseNull()) return true;
        if (getInactiveDateUseNull()) return true;
        if (getInactiveDateUseNull()) return true;
        if (getInactiveDateUseNotNull()) return true;
        if (getApplicationTypes() != null) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Developer> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Developer> f = new OAQueryFilter<Developer>(Developer.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Developer> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Developer> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Developer> getSelect() {
        String sql = "";
        String sortOrder = Developer.P_LastName;
        Object[] args = new Object[0];
        OAFinder finder = null;
        if (createdUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_Created + " = null";
        }
        else if (createdUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_Created + " != null";
        }
        else if (created != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_Created + " = ?";
            args = OAArray.add(Object.class, args, this.created);
        }
        if (firstNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_FirstName + " = null";
        }
        else if (firstNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_FirstName + " != null";
        }
        else if (!OAString.isEmpty(this.firstName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = firstName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Developer.P_FirstName + " LIKE ?";
            }
            else {
                sql += Developer.P_FirstName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (lastNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_LastName + " = null";
        }
        else if (lastNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_LastName + " != null";
        }
        else if (!OAString.isEmpty(this.lastName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = lastName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Developer.P_LastName + " LIKE ?";
            }
            else {
                sql += Developer.P_LastName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (inactiveDateUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_InactiveDate + " = null";
        }
        else if (inactiveDateUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_InactiveDate + " != null";
        }
        else if (inactiveDate != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += Developer.P_InactiveDate + " = ?";
            args = OAArray.add(Object.class, args, this.inactiveDate);
        }
        if (getApplicationTypes() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += DeveloperPP.applicationTypes().pp + " = ?";
            args = OAArray.add(Object.class, args, getApplicationTypes());
            finder = new OAFinder<ApplicationType, Developer>(getApplicationTypes(), ApplicationType.P_Developers);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Developer> sel = new OASelect<Developer>(Developer.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        sel.setFinder(finder);
        return sel;
    }

    private OAFilter<Developer> filterDataSourceFilter;
    public OAFilter<Developer> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Developer>() {
            @Override
            public boolean isUsed(Developer developer) {
                return DeveloperSearch.this.isUsedForDataSourceFilter(developer);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Developer> filterCustomFilter;
    public OAFilter<Developer> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Developer>() {
            @Override
            public boolean isUsed(Developer developer) {
                boolean b = DeveloperSearch.this.isUsedForCustomFilter(developer);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(developer);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Developer developer) {
        if (createdUseNull) {
            if (!OACompare.isEmpty(developer.getCreated())) return false;
        }
        else if (createdUseNotNull) {
            if (OACompare.isEmpty(developer.getCreated())) return false;
        }
        else if (created != null) {
            if (!OACompare.isEqual(developer.getCreated(), created)) return false;
        }
        if (firstNameUseNull) {
            if (!OACompare.isEmpty(developer.getFirstName())) return false;
        }
        else if (firstNameUseNotNull) {
            if (OACompare.isEmpty(developer.getFirstName())) return false;
        }
        else if (firstName != null) {
            String s = getFirstName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(developer.getFirstName(), s)) return false;
        }
        if (lastNameUseNull) {
            if (!OACompare.isEmpty(developer.getLastName())) return false;
        }
        else if (lastNameUseNotNull) {
            if (OACompare.isEmpty(developer.getLastName())) return false;
        }
        else if (lastName != null) {
            String s = getLastName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(developer.getLastName(), s)) return false;
        }
        if (inactiveDateUseNull) {
            if (!OACompare.isEmpty(developer.getInactiveDate())) return false;
        }
        else if (inactiveDateUseNotNull) {
            if (OACompare.isEmpty(developer.getInactiveDate())) return false;
        }
        else if (inactiveDate != null) {
            if (!OACompare.isEqual(developer.getInactiveDate(), inactiveDate)) return false;
        }
        if (applicationTypes != null) {
            if (!OACompare.isIn(applicationTypes, developer.getApplicationTypes())) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Developer developer) {
        return true;
    }
}

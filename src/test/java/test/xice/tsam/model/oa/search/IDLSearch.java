// Generated by OABuilder
package test.xice.tsam.model.oa.search;

import java.util.logging.*;

import test.xice.tsam.model.oa.IDL;
import test.xice.tsam.model.oa.search.IDLSearch;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;

import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.propertypath.*;

@OAClass(useDataSource=false, localOnly=true)
public class IDLSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(IDLSearch.class.getName());
    public static final String P_Version = "Version";
    public static final String P_VersionUseNull = "VersionUseNull";
    public static final String P_VersionUseNotNull = "VersionUseNotNull";

    protected String version;
    protected boolean versionUseNull;
    protected boolean versionUseNotNull;

    public String getVersion() {
        return version;
    }
    public void setVersion(String newValue) {
        fireBeforePropertyChange(P_Version, this.version, newValue);
        String old = version;
        this.version = newValue;
        firePropertyChange(P_Version, old, this.version);
    }
    
      
    public boolean getVersionUseNull() {
        return versionUseNull;
    }
    public void setVersionUseNull(boolean newValue) {
        boolean old = this.versionUseNull;
        this.versionUseNull = newValue;
        firePropertyChange(P_VersionUseNull, old, this.versionUseNull);
    }
    public boolean getVersionUseNotNull() {
        return versionUseNotNull;
    }
    public void setVersionUseNotNull(boolean newValue) {
        boolean old = this.versionUseNotNull;
        this.versionUseNotNull = newValue;
        firePropertyChange(P_VersionUseNotNull, old, this.versionUseNotNull);
    }

    public void reset() {
        setVersion(null);
        setVersionUseNull(false);
        setVersionUseNotNull(false);
    }

    public boolean isDataEntered() {
        if (getVersion() != null) return true;
        if (getVersionUseNull()) return true;if (getVersionUseNotNull()) return true;
        if (getVersionUseNull()) return true;
        if (getVersionUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<IDL> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<IDL> f = new OAQueryFilter<IDL>(IDL.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<IDL> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<IDL> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<IDL> getSelect() {
        String sql = "";
        String sortOrder = IDL.P_Seq;
        Object[] args = new Object[0];
        if (versionUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += IDL.P_Version + " = null";
        }
        else if (versionUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += IDL.P_Version + " != null";
        }
        else if (!OAString.isEmpty(this.version)) {
            if (sql.length() > 0) sql += " AND ";
            String value = version.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += IDL.P_Version + " LIKE ?";
            }
            else {
                sql += IDL.P_Version + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<IDL> sel = new OASelect<IDL>(IDL.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        return sel;
    }

    private OAFilter<IDL> filterDataSourceFilter;
    public OAFilter<IDL> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<IDL>() {
            @Override
            public boolean isUsed(IDL idL) {
                return IDLSearch.this.isUsedForDataSourceFilter(idL);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<IDL> filterCustomFilter;
    public OAFilter<IDL> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<IDL>() {
            @Override
            public boolean isUsed(IDL idL) {
                boolean b = IDLSearch.this.isUsedForCustomFilter(idL);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(idL);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(IDL idL) {
        if (versionUseNull) {
            if (!OACompare.isEmpty(idL.getVersion())) return false;
        }
        else if (versionUseNotNull) {
            if (OACompare.isEmpty(idL.getVersion())) return false;
        }
        else if (version != null) {
            String s = getVersion();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(idL.getVersion(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(IDL idL) {
        return true;
    }
}

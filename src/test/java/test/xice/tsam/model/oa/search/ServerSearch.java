// Generated by OABuilder
package test.xice.tsam.model.oa.search;

import java.util.logging.*;

import test.xice.tsam.model.oa.Server;
import test.xice.tsam.model.oa.search.ServerSearch;
import com.viaoa.annotation.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.ds.*;
import com.viaoa.util.filter.OAQueryFilter;

import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.propertypath.*;


@OAClass(useDataSource=false, localOnly=true)
public class ServerSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ServerSearch.class.getName());
    public static final String P_HostName = "HostName";
    public static final String P_HostNameUseNull = "HostNameUseNull";
    public static final String P_IpAddress = "IpAddress";
    public static final String P_IpAddressUseNull = "IpAddressUseNull";

    protected String hostName;
    protected boolean hostNameUseNull;
    protected String ipAddress;
    protected boolean ipAddressUseNull;

    public String getHostName() {
        return hostName;
    }
    public void setHostName(String newValue) {
        fireBeforePropertyChange(P_HostName, this.hostName, newValue);
        String old = hostName;
        this.hostName = newValue;
        firePropertyChange(P_HostName, old, this.hostName);
    }
    
      
    public boolean getHostNameUseNull() {
        return hostNameUseNull;
    }
    public void setHostNameUseNull(boolean newValue) {
        boolean old = this.hostNameUseNull;
        this.hostNameUseNull = newValue;
        firePropertyChange(P_HostNameUseNull, old, this.hostNameUseNull);
    }

    public String getIpAddress() {
        return ipAddress;
    }
    public void setIpAddress(String newValue) {
        fireBeforePropertyChange(P_IpAddress, this.ipAddress, newValue);
        String old = ipAddress;
        this.ipAddress = newValue;
        firePropertyChange(P_IpAddress, old, this.ipAddress);
    }
    
      
    public boolean getIpAddressUseNull() {
        return ipAddressUseNull;
    }
    public void setIpAddressUseNull(boolean newValue) {
        boolean old = this.ipAddressUseNull;
        this.ipAddressUseNull = newValue;
        firePropertyChange(P_IpAddressUseNull, old, this.ipAddressUseNull);
    }

    public void reset() {
        setHostName(null);
        setHostNameUseNull(false);
        setIpAddress(null);
        setIpAddressUseNull(false);
    }

    public boolean isDataEntered() {
        if (getHostName() != null) return true;
        if (getHostNameUseNull()) return true;
        if (getHostNameUseNull()) return true;
        if (getIpAddress() != null) return true;
        if (getIpAddressUseNull()) return true;
        if (getIpAddressUseNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Server> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Server> f = new OAQueryFilter<Server>(Server.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Server> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Server> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Server> getSelect() {
        String sql = "";
        String sortOrder = Server.P_DisplayName;
        Object[] args = new Object[0];
        if (hostNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Server.P_HostName + " = null";
        }
        else if (!OAString.isEmpty(this.hostName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = hostName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Server.P_HostName + " LIKE ?";
            }
            else {
                sql += Server.P_HostName + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (ipAddressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Server.P_IpAddress + " = null";
        }
        else if (!OAString.isEmpty(this.ipAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = ipAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Server.P_IpAddress + " LIKE ?";
            }
            else {
                sql += Server.P_IpAddress + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Server> sel = new OASelect<Server>(Server.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        return sel;
    }

    private OAFilter<Server> filterDataSourceFilter;
    public OAFilter<Server> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Server>() {
            @Override
            public boolean isUsed(Server server) {
                return ServerSearch.this.isUsedForDataSourceFilter(server);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Server> filterCustomFilter;
    public OAFilter<Server> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Server>() {
            @Override
            public boolean isUsed(Server server) {
                boolean b = ServerSearch.this.isUsedForCustomFilter(server);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(server);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Server server) {
        if (hostNameUseNull) {
            if (!OACompare.isEmpty(server.getHostName())) return false;
        }
        else if (hostName != null) {
            String s = getHostName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(server.getHostName(), s)) return false;
        }
        if (ipAddressUseNull) {
            if (!OACompare.isEmpty(server.getIpAddress())) return false;
        }
        else if (ipAddress != null) {
            String s = getIpAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(server.getIpAddress(), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Server server) {
        return true;
    }
}

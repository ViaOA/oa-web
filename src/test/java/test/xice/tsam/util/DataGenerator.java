// Generated by OABuilder
package test.xice.tsam.util;
 
import com.viaoa.object.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import java.lang.reflect.Field;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

import com.viaoa.ds.*;
import com.viaoa.util.*;
 
import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.cs.ServerRoot;
import test.xice.tsam.delegate.*;
 
public class DataGenerator {
    OASelect sel;
    Hub hub;
    int x;
    private static ServerRoot serverRoot;
    
    
    public static ServerRoot getServerRoot() throws Exception {
        if (serverRoot == null) {
            serverRoot = readSerializeFromFile();
        }
        return serverRoot;
    }
    public static void clearServerRoot() {
        serverRoot = null;
    }
    
    public static ServerRoot readSerializeFromFile() throws Exception {
        File file = new File(OAFile.convertFileName("runtime/test/tsam.bin"));
        if (!file.exists()) {
            return new ServerRoot();
        }
        FileInputStream fis = new FileInputStream(file);
    
        Inflater inflater = new Inflater();
        InflaterInputStream inflaterInputStream = new InflaterInputStream(fis, inflater, 1024*3);
        
        ObjectInputStream ois = new ObjectInputStream(inflaterInputStream) {
            @Override
            protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException {
                ObjectStreamClass cd = super.readClassDescriptor();
                try {
                    Field f = cd.getClass().getDeclaredField("name");
                    f.setAccessible(true);
                    String name = (String) f.get(cd);
                    //String name2 = OAString.convert(name, ".tsac.", ".tsac2.");
                    if (name.indexOf("com.xice.tsam.") == 0) {
                        name = OAString.convert(name, "com.xice.tsam.", "test.xice.tsam.");
                        f.set(cd, name);
                    }
                } 
                catch (Exception e) {
                    throw new RuntimeException(e);
                }
                return cd;
            }
        };

        OAObjectSerializer.bReadId = false;
        OAObjectSerializer wrap = (OAObjectSerializer) ois.readObject(); 
        serverRoot = (ServerRoot) wrap.getObject();
        String version = (String) ois.readObject();
        
        ois.close();
        fis.close();
        OAObjectSerializer.bReadId = false;

        return serverRoot;
    }
    
    
    
    public void populate(ServerRoot root) {
        
        Site site = createSite();
        populate(site);
//qqqqqqqqq todo:        
    }
    
    
    public AdminUser createAdminUser() {
        AdminUser adminUser = new AdminUser();
        return adminUser;
    }
    
    public void populate(AdminUser obj) {
        // id is auto assigned
        // created has a default value
        obj.setLoginId(OAString.getRandomString(0, 25));
        obj.setPassword(OAString.getRandomString(0, 75));
        obj.setFirstName(OAString.getRandomString(0, 25));
        obj.setLastName(OAString.getRandomString(0, 35));
        obj.setTitle(OAString.getRandomString(0, 35));
        obj.setPrefixName(OAString.getRandomString(0, 20));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() + 1000)));
        obj.setInactiveReason(OAString.getRandomString(0, 125));
        obj.setLoggedIn(Math.random() < .5 ? true : false);
        obj.setAdmin(Math.random() < .5 ? true : false);
        obj.setEditProcessed(Math.random() < .5 ? true : false);
        obj.setEnableLLADCommands(Math.random() < .5 ? true : false);
        obj.setEnableGSMR(Math.random() < .5 ? true : false);
        obj.setEnableMRAD(Math.random() < .5 ? true : false);
        obj.setMiscPassword(OAString.getRandomString(0, 75));
    }
    
    public AdminUserCategory createAdminUserCategory() {
        AdminUserCategory adminUserCategory = new AdminUserCategory();
        return adminUserCategory;
    }
    
    public void populate(AdminUserCategory obj) {
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 25));
        // adminUserCategories
        if (Math.random() < .50) {
            sel = new OASelect(AdminUserCategory.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getAdminUserCategories().add((AdminUserCategory) sel.next());
        }
        else {
            AdminUserCategory adminUserCategories = createAdminUserCategory();
            populate(adminUserCategories);
            obj.getAdminUserCategories().add(adminUserCategories);
        }
        // parentAdminUserCategory
        if (Math.random() < .50) {
            sel = new OASelect(AdminUserCategory.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setParentAdminUserCategory((AdminUserCategory) sel.next());
        }
        else {
            AdminUserCategory parentAdminUserCategory = createAdminUserCategory();
            populate(parentAdminUserCategory);
            obj.setParentAdminUserCategory(parentAdminUserCategory);
        }
    }
    
    public Application createApplication() {
        Application application = new Application();
        return application;
    }
    
    public void populate(Application obj) {
        // id is auto assigned
        obj.setInstanceNumber((int) (Math.random() * 900));
        obj.setTradingSystemId((int) (Math.random() * 900));
        obj.setName(OAString.getRandomString(0, 55));
        obj.setUserId(OAString.getRandomString(0, 25));
        // showInMRAD has a default value
        // applicationStatus
        hub = ModelDelegate.getApplicationStatuses();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setApplicationStatus((ApplicationStatus) hub.getAt(x));
        }
        // applicationType
        hub = ModelDelegate.getApplicationTypes();
        x = (int) (Math.random()*hub.getSize());
        obj.setApplicationType((ApplicationType) hub.getAt(x));
        // applicationVersions
        ApplicationVersion applicationVersions = createApplicationVersion();
        populate(applicationVersions);
        obj.getApplicationVersions().add(applicationVersions);
        // server
    }
    
    public ApplicationGroup createApplicationGroup() {
        ApplicationGroup applicationGroup = new ApplicationGroup();
        return applicationGroup;
    }
    
    public void populate(ApplicationGroup obj) {
        // id is auto assigned
        obj.setCode(OAString.getRandomString(0, 15));
        obj.setName(OAString.getRandomString(0, 55));
        // seq is auto sequence
        // excludeApplications
        sel = new OASelect(Application.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.getExcludeApplications().add((Application) sel.next());
        // excludeApplicationTypes
        hub = ModelDelegate.getApplicationTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getExcludeApplicationTypes().add((ApplicationType) hub.getAt(x));
        }
        // includeApplications
        sel = new OASelect(Application.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.getIncludeApplications().add((Application) sel.next());
        // includeApplicationTypes
        hub = ModelDelegate.getApplicationTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getIncludeApplicationTypes().add((ApplicationType) hub.getAt(x));
        }
        // selectedApplications
        sel = new OASelect(Application.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.getSelectedApplications().add((Application) sel.next());
        // silo
    }
    
    public ApplicationStatus createApplicationStatus() {
        ApplicationStatus applicationStatus = new ApplicationStatus();
        return applicationStatus;
    }
    
    public void populate(ApplicationStatus obj) {
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 35));
        obj.setType((int) (Math.random() * 6));
        obj.setColor(Color.red);
    }
    
    public ApplicationType createApplicationType() {
        ApplicationType applicationType = new ApplicationType();
        return applicationType;
    }
    
    public void populate(ApplicationType obj) {
        // id is auto assigned
        obj.setCode(OAString.getRandomString(0, 32));
        obj.setDescription(OAString.getRandomString(0, 250));
        obj.setServerTypeId((int) (Math.random() * 900));
        obj.setRegistered(Math.random() < .5 ? true : false);
        obj.setDefaultHostName(OAString.getRandomString(0, 18));
        obj.setUsesCron(Math.random() < .5 ? true : false);
        obj.setUsesPool(Math.random() < .5 ? true : false);
        obj.setUsesDns(Math.random() < .5 ? true : false);
        obj.setDnsName(OAString.getRandomString(0, 75));
        obj.setDnsShortName(OAString.getRandomString(0, 75));
        obj.setClientPort((int) (Math.random() * 900));
        obj.setWebPort((int) (Math.random() * 900));
        obj.setSslPort((int) (Math.random() * 900));
        obj.setVIPClientPort((int) (Math.random() * 900));
        obj.setVIPWebPort((int) (Math.random() * 900));
        obj.setVIPSSLPort((int) (Math.random() * 900));
        obj.setF5Port((int) (Math.random() * 900));
        obj.setHasClient(Math.random() < .5 ? true : false);
        obj.setUserId(OAString.getRandomString(0, 25));
        obj.setUsesIDL(Math.random() < .5 ? true : false);
        obj.setDirectory(OAString.getRandomString(0, 254));
        obj.setJarDirectoryName(OAString.getRandomString(0, 45));
        obj.setStartCommand(OAString.getRandomString(0, 254));
        obj.setSnapshotStartCommand(OAString.getRandomString(0, 254));
        obj.setStopCommand(OAString.getRandomString(0, 254));
        // connectsToMRAD has a default value
        // showInMRAD has a default value
        // showInDeploy has a default value
        // applicationTypeCommands
        ApplicationTypeCommand applicationTypeCommands = createApplicationTypeCommand();
        populate(applicationTypeCommands);
        hub = ModelDelegate.getCommands();
        x = (int) (Math.random()*hub.getSize());
        applicationTypeCommands.setCommand((Command) hub.getAt(x));
        obj.getApplicationTypeCommands().add((ApplicationTypeCommand) applicationTypeCommands);
        // developers
        hub = ModelDelegate.getDevelopers();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getDevelopers().add((Developer) hub.getAt(x));
        }
        // packageTypes
        hub = ModelDelegate.getPackageTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getPackageTypes().add((PackageType) hub.getAt(x));
        }
        // siloTypes
        hub = ModelDelegate.getSiloTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getSiloTypes().add((SiloType) hub.getAt(x));
        }
    }
    
    public ApplicationTypeCommand createApplicationTypeCommand() {
        ApplicationTypeCommand applicationTypeCommand = new ApplicationTypeCommand();
        return applicationTypeCommand;
    }
    
    public void populate(ApplicationTypeCommand obj) {
        // id is auto assigned
        // created has a default value
        obj.setCommandLine(OAString.getRandomString(0, 254));
        obj.setNotSupported(Math.random() < .5 ? true : false);
        // applicationType
        // command
        hub = ModelDelegate.getCommands();
        x = (int) (Math.random()*hub.getSize());
        obj.setCommand((Command) hub.getAt(x));
    }
    
    public ApplicationVersion createApplicationVersion() {
        ApplicationVersion applicationVersion = new ApplicationVersion();
        return applicationVersion;
    }
    
    public void populate(ApplicationVersion obj) {
        // id is auto assigned
        obj.setCurrentVersion(OAString.getRandomString(0, 55));
        // application
        // currentPackageVersion
        hub = (Hub) obj.getProperty(OAString.cpp(ApplicationVersion.P_PackageType, PackageType.P_PackageVersions));
        x = (int) (Math.random()*hub.getSize());
        obj.setCurrentPackageVersion((PackageVersion) hub.getAt(x));
        // newPackageVersion
        // packageType
        hub = ModelDelegate.getPackageTypes();
        x = (int) (Math.random()*hub.getSize());
        obj.setPackageType((PackageType) hub.getAt(x));
    }
    
    public Command createCommand() {
        Command command = new Command();
        return command;
    }
    
    public void populate(Command obj) {
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        obj.setName(OAString.getRandomString(0, 35));
        obj.setDescription(OAString.getRandomString(0, 135));
        obj.setCommandLine(OAString.getRandomString(0, 400));
        obj.setType((int) (Math.random() * 13));
        obj.setInAPI(Math.random() < .5 ? true : false);
    }
    
    public Developer createDeveloper() {
        Developer developer = new Developer();
        return developer;
    }
    
    public void populate(Developer obj) {
        // id is auto assigned
        // created has a default value
        obj.setFirstName(OAString.getRandomString(0, 35));
        obj.setLastName(OAString.getRandomString(0, 55));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() + 1000)));
        // applicationTypes
        hub = ModelDelegate.getApplicationTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getApplicationTypes().add((ApplicationType) hub.getAt(x));
        }
    }
    
    public Environment createEnvironment() {
        Environment environment = new Environment();
        return environment;
    }
    
    public void populate(Environment obj) {
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 35));
        obj.setAbbrevName(OAString.getRandomString(0, 15));
        obj.setTEAbbrevName(OAString.getRandomString(0, 15));
        obj.setCEAbbrevName(OAString.getRandomString(0, 15));
        obj.setUsesDNS(Math.random() < .5 ? true : false);
        obj.setUsesFirewall(Math.random() < .5 ? true : false);
        obj.setUsesVip(Math.random() < .5 ? true : false);
        obj.setColorCode(Color.red);
        // environmentType
        hub = ModelDelegate.getEnvironmentTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setEnvironmentType((EnvironmentType) hub.getAt(x));
        }
        // idL
        hub = ModelDelegate.getIDLs();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setIDL((IDL) hub.getAt(x));
        }
        // silos
        Silo silos = createSilo();
        populate(silos);
        hub = ModelDelegate.getSiloTypes();
        x = (int) (Math.random()*hub.getSize());
        silos.setSiloType((SiloType) hub.getAt(x));
        obj.getSilos().add((Silo) silos);
        // site
    }
    
    public EnvironmentType createEnvironmentType() {
        EnvironmentType environmentType = new EnvironmentType();
        return environmentType;
    }
    
    public void populate(EnvironmentType obj) {
        // id is auto assigned
        obj.setType((int) (Math.random() * 41));
        obj.setName(OAString.getRandomString(0, 35));
    }
    
    public HostInfo createHostInfo() {
        HostInfo hostInfo = new HostInfo();
        return hostInfo;
    }
    
    public void populate(HostInfo obj) {
        // id is auto assigned
        obj.setLastSSHCheck((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setSSHError(OAString.getRandomString(0, 200));
        obj.setHostDate(OAString.getRandomString(0, 35));
        obj.setHostName(OAString.getRandomString(0, 35));
        obj.setUnixName(OAString.getRandomString(0, 35));
        obj.setCronTab(OAString.getRandomString(0, 500));
        obj.setJarDirectory(OAString.getRandomString(0, 500));
        obj.setTsamTelnet(OAString.getRandomString(0, 400));
        obj.setInstallVersion(OAString.getRandomString(0, 35));
        // mradClient
    }
    
    public IDL createIDL() {
        IDL idL = new IDL();
        return idL;
    }
    
    public void populate(IDL obj) {
        // id is auto assigned
        // created has a default value
        obj.setVersion(OAString.getRandomString(0, 25));
        obj.setReleaseDate((OADate)(new OADate()).addDays((int) (Math.random() + 1000)));
        // seq is auto sequence
        // environments
        if (Math.random() < .50) {
            sel = new OASelect(Environment.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getEnvironments().add((Environment) sel.next());
        }
        else {
            Environment environments = createEnvironment();
            populate(environments);
            obj.getEnvironments().add(environments);
        }
    }
    
    public MRADClient createMRADClient() {
        MRADClient mradClient = new MRADClient();
        return mradClient;
    }
    
    public void populate(MRADClient obj) {
        // id is auto assigned
        // created has a default value
        obj.setHostName(OAString.getRandomString(0, 35));
        obj.setIpAddress(OAString.getRandomString(0, 15));
        obj.setName(OAString.getRandomString(0, 35));
        obj.setDescription(OAString.getRandomString(0, 75));
        obj.setRouterAbsolutePath(OAString.getRandomString(0, 254));
        obj.setStartScript(OAString.getRandomString(0, 254));
        obj.setStopScript(OAString.getRandomString(0, 254));
        obj.setSnapshotStartScript(OAString.getRandomString(0, 254));
        obj.setDirectory(OAString.getRandomString(0, 75));
        obj.setVersion(OAString.getRandomString(0, 35));
        obj.setRemoteSocketAddress(OAString.getRandomString(0, 55));
        obj.setApplicationStatus(OAString.getRandomString(0, 35));
        obj.setStarted((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setReady((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setServerTypeId((int) (Math.random() * 900));
        obj.setApplicationTypeCode(OAString.getRandomString(0, 20));
        obj.setDtConnected((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setDtDisconnected((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setTotalMemory((long) (Math.random() * 900));
        obj.setFreeMemory((long) (Math.random() * 900));
        obj.setJavaVendor(OAString.getRandomString(0, 35));
        obj.setJavaVersion(OAString.getRandomString(0, 35));
        obj.setOsArch(OAString.getRandomString(0, 25));
        obj.setOsName(OAString.getRandomString(0, 25));
        obj.setOsVersion(OAString.getRandomString(0, 55));
        obj.setProcessId(OAString.getRandomString(0, 12));
        obj.setInstalledVersion(OAString.getRandomString(0, 32));
        obj.setDtInstall((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setDtLastUpdated((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setLastConnectionId((int) (Math.random() * 900));
        obj.setMRADClientVersion(OAString.getRandomString(0, 17));
        // application
        sel = new OASelect(Application.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setApplication((Application) sel.next());
        // hostInfo
        populate(obj.getHostInfo());
        // lastMRADClientCommand
        // lastMRADClientMessage
        // mradClientCommands
        MRADClientCommand mradClientCommands = createMRADClientCommand();
        populate(mradClientCommands);
        obj.getMRADClientCommands().add(mradClientCommands);
        // mradClientMessages
        MRADClientMessage mradClientMessages = createMRADClientMessage();
        populate(mradClientMessages);
        obj.getMRADClientMessages().add(mradClientMessages);
        // mradServer
    }
    
    public MRADClientCommand createMRADClientCommand() {
        MRADClientCommand mradClientCommand = new MRADClientCommand();
        return mradClientCommand;
    }
    
    public void populate(MRADClientCommand obj) {
        // id is auto assigned
        // created has a default value
        obj.setStarted((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setEnded((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setError(OAString.getRandomString(0, 175));
        // mradClient
        sel = new OASelect(MRADClient.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setMRADClient((MRADClient) sel.next());
        // mradClient2
        if (Math.random() < .50) {
            sel = new OASelect(MRADClient.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setMRADClient2((MRADClient) sel.next());
        }
        else {
            MRADClient mradClient2 = createMRADClient();
            populate(mradClient2);
            obj.setMRADClient2(mradClient2);
        }
        // mradServerCommand
        // sshExecute
        if (Math.random() < .50) {
            sel = new OASelect(SSHExecute.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setSSHExecute((SSHExecute) sel.next());
        }
        else {
            SSHExecute sshExecute = createSSHExecute();
            populate(sshExecute);
            obj.setSSHExecute(sshExecute);
        }
    }
    
    public MRADClientMessage createMRADClientMessage() {
        MRADClientMessage mradClientMessage = new MRADClientMessage();
        return mradClientMessage;
    }
    
    public void populate(MRADClientMessage obj) {
        // id is auto assigned
        // created has a default value
        obj.setText(OAString.getRandomString(0, 254));
        obj.setType((int) (Math.random() * 3));
        // mradClient
        // mradClient2
        if (Math.random() < .50) {
            sel = new OASelect(MRADClient.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setMRADClient2((MRADClient) sel.next());
        }
        else {
            MRADClient mradClient2 = createMRADClient();
            populate(mradClient2);
            obj.setMRADClient2(mradClient2);
        }
    }
    
    public MRADServer createMRADServer() {
        MRADServer mradServer = new MRADServer();
        return mradServer;
    }
    
    public void populate(MRADServer obj) {
        // id is auto assigned
        obj.setConsole(OAString.getRandomString(0, 155));
        obj.setTEConsole(OAString.getRandomString(0, 50));
        obj.setCEConsole(OAString.getRandomString(0, 50));
        // mradClients
        MRADClient mradClients = createMRADClient();
        populate(mradClients);
        obj.getMRADClients().add(mradClients);
        // mradServerCommands
        MRADServerCommand mradServerCommands = createMRADServerCommand();
        populate(mradServerCommands);
        obj.getMRADServerCommands().add(mradServerCommands);
        // silo
    }
    
    public MRADServerCommand createMRADServerCommand() {
        MRADServerCommand mradServerCommand = new MRADServerCommand();
        return mradServerCommand;
    }
    
    public void populate(MRADServerCommand obj) {
        // id is auto assigned
        // created has a default value
        obj.setStarted((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setError(OAString.getRandomString(0, 75));
        obj.setConsole(OAString.getRandomString(0, 255));
        obj.setParam(OAString.getRandomString(0, 200));
        obj.setParamInteger((int) (Math.random() * 900));
        // adminUser
        // command
        // mradClientCommands
        MRADClientCommand mradClientCommands = createMRADClientCommand();
        populate(mradClientCommands);
        sel = new OASelect(MRADClient.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        mradClientCommands.setMRADClient((MRADClient) sel.next());
        obj.getMRADClientCommands().add((MRADClientCommand) mradClientCommands);
        // mradServer
        // sshExecutes
        if (Math.random() < .50) {
            sel = new OASelect(SSHExecute.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getSSHExecutes().add((SSHExecute) sel.next());
        }
        else {
            SSHExecute sshExecutes = createSSHExecute();
            populate(sshExecutes);
            obj.getSSHExecutes().add(sshExecutes);
        }
    }
    
    public OperatingSystem createOperatingSystem() {
        OperatingSystem operatingSystem = new OperatingSystem();
        return operatingSystem;
    }
    
    public void populate(OperatingSystem obj) {
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 35));
        obj.setType((int) (Math.random() * 5));
        obj.setUserId(OAString.getRandomString(0, 12));
        // osVersions
        OSVersion osVersions = createOSVersion();
        populate(osVersions);
        obj.getOSVersions().add(osVersions);
    }
    
    public OSVersion createOSVersion() {
        OSVersion osVersion = new OSVersion();
        return osVersion;
    }
    
    public void populate(OSVersion obj) {
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 35));
        // operatingSystem
    }
    
    public PackageType createPackageType() {
        PackageType packageType = new PackageType();
        return packageType;
    }
    
    public void populate(PackageType obj) {
        // id is auto assigned
        obj.setCode(OAString.getRandomString(0, 14));
        obj.setPackageName(OAString.getRandomString(0, 55));
        obj.setPomGroupId(OAString.getRandomString(0, 55));
        obj.setPomArtifactId(OAString.getRandomString(0, 25));
        // applicationTypes
        hub = ModelDelegate.getApplicationTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getApplicationTypes().add((ApplicationType) hub.getAt(x));
        }
        // packageVersions
        PackageVersion packageVersions = createPackageVersion();
        populate(packageVersions);
        obj.getPackageVersions().add(packageVersions);
    }
    
    public PackageVersion createPackageVersion() {
        PackageVersion packageVersion = new PackageVersion();
        return packageVersion;
    }
    
    public void populate(PackageVersion obj) {
        // id is auto assigned
        // created has a default value
        obj.setVersion(OAString.getRandomString(0, 25));
        obj.setBuildDate((OADate)(new OADate()).addDays((int) (Math.random() + 1000)));
        obj.setFileSize((int) (Math.random() * 900));
        obj.setFileName(OAString.getRandomString(0, 55));
        // idL
        // packageType
    }
    
    public Server createServer() {
        Server server = new Server();
        return server;
    }
    
    public void populate(Server obj) {
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 55));
        obj.setHostName(OAString.getRandomString(0, 35));
        obj.setIpAddress(OAString.getRandomString(0, 24));
        obj.setDnsName(OAString.getRandomString(0, 50));
        obj.setShortDnsName(OAString.getRandomString(0, 25));
        obj.setUserId(OAString.getRandomString(0, 25));
        // applications
        Application applications = createApplication();
        populate(applications);
        hub = ModelDelegate.getApplicationTypes();
        x = (int) (Math.random()*hub.getSize());
        applications.setApplicationType((ApplicationType) hub.getAt(x));
        obj.getApplications().add((Application) applications);
        // osVersion
        // silo
    }
    
    public Silo createSilo() {
        Silo silo = new Silo();
        return silo;
    }
    
    public void populate(Silo obj) {
        // id is auto assigned
        obj.setNetworkMask(OAString.getRandomString(0, 25));
        obj.setCurrentTime((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setSchedulerMessage(OAString.getRandomString(0, 200));
        // applicationGroups
        ApplicationGroup applicationGroups = createApplicationGroup();
        populate(applicationGroups);
        obj.getApplicationGroups().add(applicationGroups);
        // environment
        // mradServer
        populate(obj.getMRADServer());
        // servers
        Server servers = createServer();
        populate(servers);
        obj.getServers().add(servers);
        // siloConfigs
        if (Math.random() < .50) {
            sel = new OASelect(SiloConfig.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getSiloConfigs().add((SiloConfig) sel.next());
        }
        else {
            SiloConfig siloConfigs = createSiloConfig();
            populate(siloConfigs);
            obj.getSiloConfigs().add(siloConfigs);
        }
        // siloType
        hub = ModelDelegate.getSiloTypes();
        x = (int) (Math.random()*hub.getSize());
        obj.setSiloType((SiloType) hub.getAt(x));
    }
    
    public SiloConfig createSiloConfig() {
        SiloConfig siloConfig = new SiloConfig();
        return siloConfig;
    }
    
    public void populate(SiloConfig obj) {
        // id is auto assigned
        obj.setMinCount((int) (Math.random() * 900));
        obj.setMaxCount((int) (Math.random() * 900));
        // applicationType
        hub = ModelDelegate.getApplicationTypes();
        x = (int) (Math.random()*hub.getSize());
        obj.setApplicationType((ApplicationType) hub.getAt(x));
        // silo
        if (Math.random() < .50) {
            sel = new OASelect(Silo.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setSilo((Silo) sel.next());
        }
        else {
            Silo silo = createSilo();
            populate(silo);
            obj.setSilo(silo);
        }
        // siloConfigVersioins
        SiloConfigVersioin siloConfigVersioins = createSiloConfigVersioin();
        populate(siloConfigVersioins);
        obj.getSiloConfigVersioins().add(siloConfigVersioins);
    }
    
    public SiloConfigVersioin createSiloConfigVersioin() {
        SiloConfigVersioin siloConfigVersioin = new SiloConfigVersioin();
        return siloConfigVersioin;
    }
    
    public void populate(SiloConfigVersioin obj) {
        // id is auto assigned
        // packageType
        hub = ModelDelegate.getPackageTypes();
        x = (int) (Math.random()*hub.getSize());
        obj.setPackageType((PackageType) hub.getAt(x));
        // packageVersion
        // siloConfig
    }
    
    public SiloType createSiloType() {
        SiloType siloType = new SiloType();
        return siloType;
    }
    
    public void populate(SiloType obj) {
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        obj.setType((int) (Math.random() * 3));
        // applicationTypes
        hub = ModelDelegate.getApplicationTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getApplicationTypes().add((ApplicationType) hub.getAt(x));
        }
    }
    
    public Site createSite() {
        Site site = new Site();
        return site;
    }
    
    public void populate(Site obj) {
        // id is auto assigned
        obj.setAbbrevName(OAString.getRandomString(0, 6));
        obj.setName(OAString.getRandomString(0, 25));
        obj.setProduction(Math.random() < .5 ? true : false);
        // environments
        Environment environments = createEnvironment();
        populate(environments);
        obj.getEnvironments().add(environments);
        // timezone
    }
    
    public SSHExecute createSSHExecute() {
        SSHExecute sshExecute = new SSHExecute();
        return sshExecute;
    }
    
    public void populate(SSHExecute obj) {
        // id is auto assigned
        // created has a default value
        obj.setHostName(OAString.getRandomString(0, 55));
        obj.setUserId(OAString.getRandomString(0, 35));
        obj.setSSHKeyFile(OAString.getRandomString(0, 135));
        obj.setCommandLine(OAString.getRandomString(0, 500));
        obj.setStarted((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setConnected((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setAuthenticated((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setCompleted((new OADateTime()).addDays((int) (Math.random() + 1000)));
        obj.setSuccessful(Math.random() < .5 ? true : false);
        obj.setOutput(OAString.getRandomString(0, 500));
        obj.setError(OAString.getRandomString(0, 500));
        obj.setConsole(OAString.getRandomString(0, 800));
        // mradServerCommand
    }
    
    public Timezone createTimezone() {
        Timezone timezone = new Timezone();
        return timezone;
    }
    
    public void populate(Timezone obj) {
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        obj.setUTCOffset((int) (Math.random() * 900));
        // sites
        hub = ModelDelegate.getSites();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.getSites().add((Site) hub.getAt(x));
        }
    }
}
 

// Generated by OABuilder
package test.hifive;
 
import com.viaoa.object.*;
import com.viaoa.datasource.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
 
import test.hifive.model.oa.*;
import test.hifive.delegate.*;
 
public class DataGenerator {
    OASelect sel;
    Hub hub;
    
    public AddOnItem createAddOnItem() {
        AddOnItem addOnItem = new AddOnItem();
        return addOnItem;
    }
    
    public void populate(AddOnItem obj) {
        populate(obj, 0);
    }
    public void populate(AddOnItem obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setValue((Math.random() * 100));
        // item
        sel = new OASelect(Item.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setItem((Item) sel.next());
        // location
        if (Math.random() < .50) {
            sel = new OASelect(Location.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setLocation((Location) sel.next());
        }
        else {
            Location location = createLocation();
            populate(location);
            obj.setLocation(location);
        }
    }
    
    public Address createAddress() {
        Address address = new Address();
        return address;
    }
    
    public void populate(Address obj) {
        populate(obj, 0);
    }
    public void populate(Address obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setAddress1(OAString.getRandomString(0, 75));
        obj.setAddress2(OAString.getRandomString(0, 75));
        obj.setAddress3(OAString.getRandomString(0, 75));
        obj.setAddress4(OAString.getRandomString(0, 75));
        obj.setCity(OAString.getRandomString(0, 55));
        obj.setState(OAString.getRandomString(0, 45));
        obj.setZip(OAString.getRandomString(0, 12));
        obj.setCountry(OAString.getRandomString(0, 45));
        // addressType
        hub = ModelDelegate.getAddressTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setAddressType((AddressType) hub.getAt(x));
        }
        // employee
        //    owned
    }
    
    public AddressType createAddressType() {
        AddressType addressType = new AddressType();
        return addressType;
    }
    
    public void populate(AddressType obj) {
        populate(obj, 0);
    }
    public void populate(AddressType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 45));
        obj.setType((int) (Math.random() * 5));
    }
    
    public AwardCardOrder createAwardCardOrder() {
        AwardCardOrder awardCardOrder = new AwardCardOrder();
        return awardCardOrder;
    }
    
    public void populate(AwardCardOrder obj) {
        populate(obj, 0);
    }
    public void populate(AwardCardOrder obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setValue((Math.random() * 100));
        obj.setSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setShippingInfo(OAString.getRandomString(0, 150));
        obj.setCardType((int) (Math.random() * 3));
        obj.setLastStatusDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setLastStatus(OAString.getRandomString(0, 75));
        obj.setCompletedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInvoiceNumber(OAString.getRandomString(0, 5));
        obj.setInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setVendorInvoiced(Math.random() < .5 ? true : false);
        // card
        sel = new OASelect(Card.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setCard((Card) sel.next());
        // cashstarOrder
        if (Math.random() < .50) {
            sel = new OASelect(CashstarOrder.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setCashstarOrder((CashstarOrder) sel.next());
        }
        else {
            CashstarOrder cashstarOrder = createCashstarOrder();
            populate(cashstarOrder);
            obj.setCashstarOrder(cashstarOrder);
        }
        // employeeAward
        //    owned
        // inspireOrder
        //    owned
        // inspireValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getValues();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getInspireValues().add((Value) hub.getAt(x));
            }
        }
    }
    
    public AwardType createAwardType() {
        AwardType awardType = new AwardType();
        return awardType;
    }
    
    public void populate(AwardType obj) {
        populate(obj, 0);
    }
    public void populate(AwardType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 75));
        obj.setDescripton(OAString.getRandomString(0, 254));
        obj.setUsesGiftCards(Math.random() < .5 ? true : false);
        obj.setValue((Math.random() * 100));
        obj.setUsesItems(Math.random() < .5 ? true : false);
        obj.setUseHifiveApprovedItems(Math.random() < .5 ? true : false);
        obj.setMinimumItemPrice((Math.random() * 100));
        obj.setMaximumItemPrice((Math.random() * 100));
        obj.setServiceAward(Math.random() < .5 ? true : false);
        obj.setYearsService((int) (Math.random() * 900));
        obj.setBillCardPrice((Math.random() * 100));
        obj.setBillOnItemPrice(Math.random() < .5 ? true : false);
        obj.setBillItemPrice((Math.random() * 100));
        obj.setUsesHelpingHands(Math.random() < .5 ? true : false);
        obj.setUsesCash(Math.random() < .5 ? true : false);
        obj.setUsesInternationalVisa(Math.random() < .5 ? true : false);
        obj.setUsesCharity(Math.random() < .5 ? true : false);
        obj.setUsesImagineCard(Math.random() < .5 ? true : false);
        obj.setPackageName(OAString.getRandomString(0, 35));
        obj.setPackageInstruction(OAString.getRandomString(0, 500));
        obj.setPackageBillPrice((Math.random() * 100));
        obj.setAwardBillCost((Math.random() * 100));
        obj.setCashBillPrice((Math.random() * 100));
        obj.setImagineBillPrice((Math.random() * 100));
        obj.setInternationalVisaBillPrice((Math.random() * 100));
        // addOnItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AddOnItem addOnItems = createAddOnItem();
            obj.getAddOnItems().add(addOnItems);
            populate(addOnItems);
        }
        // announcementDocument
        ProgramDocument announcementDocument = createProgramDocument();
        populate(announcementDocument);
        obj.setAnnouncementDocument(announcementDocument);
        // availableCards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Card.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getAvailableCards().add((Card) sel.next());
            }
            else {
                Card availableCards = createCard();
                obj.getAvailableCards().add(availableCards);
                populate(availableCards);
            }
        }
        // availableCharities
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getCharities();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getAvailableCharities().add((Charity) hub.getAt(x));
            }
        }
        // availableHelpingHandItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // availableItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Item.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getAvailableItems().add((Item) sel.next());
            }
            else {
                Item availableItems = createItem();
                obj.getAvailableItems().add(availableItems);
                populate(availableItems);
            }
        }
        // calcAnnouncementDocument
        ProgramDocument calcAnnouncementDocument = createProgramDocument();
        populate(calcAnnouncementDocument);
        obj.setCalcAnnouncementDocument(calcAnnouncementDocument);
        // calcCeoImageStore
        ImageStore calcCeoImageStore = createImageStore();
        populate(calcCeoImageStore);
        obj.setCalcCeoImageStore(calcCeoImageStore);
        // calcCeoSignatureImageStore
        ImageStore calcCeoSignatureImageStore = createImageStore();
        populate(calcCeoSignatureImageStore);
        obj.setCalcCeoSignatureImageStore(calcCeoSignatureImageStore);
        // calcImagineCard
        if (Math.random() < .50) {
            sel = new OASelect(Card.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            //obj.setCalcImagineCard((Card) sel.next());
        }
        else {
            Card calcImagineCard = createCard();
            populate(calcImagineCard);
            //obj.setCalcImagineCard(calcImagineCard);
        }
        // ceoImageStore
        ImageStore ceoImageStore = createImageStore();
        populate(ceoImageStore);
        obj.setCeoImageStore(ceoImageStore);
        // ceoSignatureImageStore
        ImageStore ceoSignatureImageStore = createImageStore();
        populate(ceoSignatureImageStore);
        obj.setCeoSignatureImageStore(ceoSignatureImageStore);
        // excludeItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Item.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getExcludeItems().add((Item) sel.next());
        }
        // imagineCard
        sel = new OASelect(Card.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setImagineCard((Card) sel.next());
        // includeItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Item.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getIncludeItems().add((Item) sel.next());
        }
        // inspireLocation
        //    owned
        // inspireProgram
        //    owned
        // itemTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getItemTypes();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getItemTypes().add((ItemType) hub.getAt(x));
            }
        }
        // location
        //    owned
        // packageProducts
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Product.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPackageProducts().add((Product) sel.next());
            }
            else {
                Product packageProducts = createProduct();
                obj.getPackageProducts().add(packageProducts);
                populate(packageProducts);
            }
        }
        // program
        //    owned
        // section
        sel = new OASelect(Section.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setSection((Section) sel.next());
    }
    
    public Card createCard() {
        Card card = new Card();
        return card;
    }
    
    public void populate(Card obj) {
        populate(obj, 0);
    }
    public void populate(Card obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        obj.setActiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setDigitalCard(Math.random() < .5 ? true : false);
        obj.setTraditionalCard(Math.random() < .5 ? true : false);
        obj.setCelebrateCard(Math.random() < .5 ? true : false);
        obj.setText(OAString.getRandomString(0, 500));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setRangeLow((int) (Math.random() * 900));
        obj.setRangeHigh((int) (Math.random() * 900));
        obj.setRangeIncrement((int) (Math.random() * 900));
        obj.setMerchantCode(OAString.getRandomString(0, 25));
        // cardVendor
        //    owned
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // merchants
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Merchant.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getMerchants().add((Merchant) sel.next());
        }
        // values
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getValues();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getValues().add((Value) hub.getAt(x));
            }
        }
    }
    
    public CardVendor createCardVendor() {
        CardVendor cardVendor = new CardVendor();
        return cardVendor;
    }
    
    public void populate(CardVendor obj) {
        populate(obj, 0);
    }
    public void populate(CardVendor obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        obj.setDigitalCard(Math.random() < .5 ? true : false);
        obj.setTraditionalCard(Math.random() < .5 ? true : false);
        obj.setCelebrateCard(Math.random() < .5 ? true : false);
        // cards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Card cards = createCard();
            obj.getCards().add(cards);
            populate(cards);
        }
    }
    
    public CashstarOrder createCashstarOrder() {
        CashstarOrder cashstarOrder = new CashstarOrder();
        return cashstarOrder;
    }
    
    public void populate(CashstarOrder obj) {
        populate(obj, 0);
    }
    public void populate(CashstarOrder obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setOrderNumber(OAString.getRandomString(0, 25));
        obj.setCardStatus(OAString.getRandomString(0, 25));
        obj.setEgcCode(OAString.getRandomString(0, 25));
        obj.setEgcNumber(OAString.getRandomString(0, 50));
        obj.setCardUrl(OAString.getRandomString(0, 200));
        obj.setBalanaceLastUpdated((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setChallengeType(OAString.getRandomString(0, 25));
        obj.setCurrency(OAString.getRandomString(0, 20));
        obj.setActive(Math.random() < .5 ? true : false);
        obj.setFaceplateCode(OAString.getRandomString(0, 15));
        obj.setViewed(Math.random() < .5 ? true : false);
        obj.setChallengeDescription(OAString.getRandomString(0, 80));
        obj.setChallenge(OAString.getRandomString(0, 50));
        obj.setFirstViewed((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setAuditNumber(OAString.getRandomString(0, 50));
        obj.setTransactionId(OAString.getRandomString(0, 25));
        obj.setInitialBalance((Math.random() * 100));
        obj.setCurrentBalance((Math.random() * 100));
        // awardCardOrder
        if (Math.random() < .50) {
            sel = new OASelect(AwardCardOrder.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setAwardCardOrder((AwardCardOrder) sel.next());
        }
        else {
            AwardCardOrder awardCardOrder = createAwardCardOrder();
            populate(awardCardOrder);
            obj.setAwardCardOrder(awardCardOrder);
        }
    }
    
    public Catalog createCatalog() {
        Catalog catalog = new Catalog();
        return catalog;
    }
    
    public void populate(Catalog obj) {
        populate(obj, 0);
    }
    public void populate(Catalog obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        // sections
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Section sections = createSection();
            obj.getSections().add(sections);
            populate(sections);
        }
    }
    
    public Charity createCharity() {
        Charity charity = new Charity();
        return charity;
    }
    
    public void populate(Charity obj) {
        populate(obj, 0);
    }
    public void populate(Charity obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 120));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setText(OAString.getRandomString(0, 500));
        // seq is auto sequence
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
    }
    
    
    public Company createCompany() {
        Company company = new Company();
        return company;
    }
    
    public void populate(Company obj) {
        populate(obj, 0);
    }
    public void populate(Company obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        // locationTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            LocationType locationTypes = createLocationType();
            obj.getLocationTypes().add(locationTypes);
            populate(locationTypes);
        }
        // programs
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Program.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPrograms().add((Program) sel.next());
            }
            else {
                Program programs = createProgram();
                obj.getPrograms().add(programs);
                populate(programs);
            }
        }
    }
    
    public CountryCode createCountryCode() {
        CountryCode countryCode = new CountryCode();
        return countryCode;
    }
    
    public void populate(CountryCode obj) {
        populate(obj, 0);
    }
    public void populate(CountryCode obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        obj.setCode(OAString.getRandomString(0, 12));
        obj.setStateIsRequired(Math.random() < .5 ? true : false);
        obj.setStateName(OAString.getRandomString(0, 35));
        obj.setZipCodeIsRequired(Math.random() < .5 ? true : false);
        obj.setZipCodeName(OAString.getRandomString(0, 35));
        // currencyType
        /*
        hub = ModelDelegate.getCurrencyTypes();
        x = (int) (Math.random()*hub.getSize());
        obj.setCurrencyType((CurrencyType) hub.getAt(x));
        */
    }
    
    public CurrencyType createCurrencyType() {
        CurrencyType currencyType = new CurrencyType();
        return currencyType;
    }
    
    public void populate(CurrencyType obj) {
        populate(obj, 0);
    }
    public void populate(CurrencyType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 25));
        obj.setAbbreviation(OAString.getRandomString(0, 12));
        obj.setSymbol(OAString.getRandomString(0, 6));
        obj.setExchangeRate((Math.random() * 100));
        // created has a default value
        // countryCodes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getCountryCodes();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getCountryCodes().add((CountryCode) hub.getAt(x));
            }
        }
    }
    
    public CustomData createCustomData() {
        CustomData customData = new CustomData();
        return customData;
    }
    
    public void populate(CustomData obj) {
        populate(obj, 0);
    }
    public void populate(CustomData obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setCode(OAString.getRandomString(0, 6));
        obj.setName(OAString.getRandomString(0, 25));
        obj.setDescription(OAString.getRandomString(0, 125));
        // program
        //    owned
    }
    
    public Ecard createEcard() {
        Ecard ecard = new Ecard();
        return ecard;
    }
    
    public void populate(Ecard obj) {
        populate(obj, 0);
    }
    public void populate(Ecard obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        obj.setText(OAString.getRandomString(0, 500));
        // ecardCategory
        hub = ModelDelegate.getEcardCategories();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setEcardCategory((EcardCategory) hub.getAt(x));
        }
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
    }
    
    public EcardCategory createEcardCategory() {
        EcardCategory ecardCategory = new EcardCategory();
        return ecardCategory;
    }
    
    public void populate(EcardCategory obj) {
        populate(obj, 0);
    }
    public void populate(EcardCategory obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 150));
        // seq is auto sequence
        // ecards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getEcards();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getEcards().add((Ecard) hub.getAt(x));
            }
        }
    }
    
    public Email createEmail() {
        Email email = new Email();
        return email;
    }
    
    public void populate(Email obj) {
        populate(obj, 0);
    }
    public void populate(Email obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setFromEmail(OAString.getRandomString(0, 75));
        obj.setToEmail(OAString.getRandomString(0, 75));
        obj.setCcEmail(OAString.getRandomString(0, 75));
        obj.setSubject(OAString.getRandomString(0, 150));
        obj.setSentDateTime((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setCancelDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setBody(OAString.getRandomString(0, 500));
        obj.setAttachment(new byte[0]);
        obj.setAttachmentName(OAString.getRandomString(0, 35));
        obj.setAttachmentMimeType(OAString.getRandomString(0, 35));
        // programEmailType
        sel = new OASelect(ProgramEmailType.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setProgramEmailType((ProgramEmailType) sel.next());
    }
    
    public EmailType createEmailType() {
        EmailType emailType = new EmailType();
        return emailType;
    }
    
    public void populate(EmailType obj) {
        populate(obj, 0);
    }
    public void populate(EmailType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        obj.setName(OAString.getRandomString(0, 75));
        obj.setType((int) (Math.random() * 47));
        obj.setSubject(OAString.getRandomString(0, 150));
        obj.setText(OAString.getRandomString(0, 500));
        obj.setNote(OAString.getRandomString(0, 500));
    }
    
    public Employee createEmployee() {
        Employee employee = new Employee();
        return employee;
    }
    
    public void populate(Employee obj) {
        populate(obj, 0);
    }
    public void populate(Employee obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setEmployeeCode(OAString.getRandomString(0, 25));
        obj.setTitle(OAString.getRandomString(0, 75));
        obj.setPrefixName(OAString.getRandomString(0, 75));
        obj.setFirstName(OAString.getRandomString(0, 75));
        obj.setMiddleName(OAString.getRandomString(0, 75));
        obj.setLastName(OAString.getRandomString(0, 75));
        obj.setSuffixName(OAString.getRandomString(0, 75));
        obj.setBirthDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setHireDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setLoginId(OAString.getRandomString(0, 75));
        obj.setPassword(OAString.getRandomString(0, 50));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInactiveReason(OAString.getRandomString(0, 150));
        obj.setAdmin(Math.random() < .5 ? true : false);
        obj.setEmail(OAString.getRandomString(0, 200));
        obj.setEmail2(OAString.getRandomString(0, 125));
        obj.setWorkLocation(OAString.getRandomString(0, 50));
        obj.setCostCenter(OAString.getRandomString(0, 45));
        obj.setCostCenterDescription(OAString.getRandomString(0, 100));
        obj.setPasswordAssignedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setTopLevelManager(Math.random() < .5 ? true : false);
        // superApprover has a default value
        obj.setDivision(OAString.getRandomString(0, 100));
        obj.setCompanyCode(OAString.getRandomString(0, 10));
        obj.setCompanyCodeName(OAString.getRandomString(0, 45));
        // maxNomLvl has a default value
        // usesEcards has a default value
        // usesService has a default value
        // usesPoints has a default value
        // isNominator has a default value
        // usesInspire has a default value
        // canGetNominated has a default value
        // usesAwardGallery has a default value
        // canRedeemCodes has a default value
        // canActivateLots has a default value
        // aboutMe
        if (Math.random() < .50) {
        }
        else {
        }
        // activatedLots
        tot = ((int) (Math.random()*8));
        // addresses
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Address addresses = createAddress();
            obj.getAddresses().add(addresses);
            populate(addresses);
        }
        // allEmployees
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                if (Math.random() < .50) {
                    sel = new OASelect(Employee.class);
                    sel.select();
                    x = sel.getCount();
                    x = (int) (Math.random() * x);
                    for (int i=0; i<x; i++) sel.next();
                    obj.getAllEmployees().add((Employee) sel.next());
                }
                else {
                    Employee allEmployees = createEmployee();
                    obj.getAllEmployees().add(allEmployees);
                    populate(allEmployees);
                }
            }
        }
        // approvedInspires
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // approvedPointsRequests
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(PointsRequest.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getApprovedPointsRequests().add((PointsRequest) sel.next());
        }
        // BPEmployees
        if (level < 3) {
        }
        // calcAvailableEcards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getEcards();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getCalcAvailableEcards().add((Ecard) hub.getAt(x));
            }
        }
        // calcAvailableEmployeeAwards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(EmployeeAward.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getCalcAvailableEmployeeAwards().add((EmployeeAward) sel.next());
            }
            else {
                EmployeeAward calcAvailableEmployeeAwards = createEmployeeAward();
                obj.getCalcAvailableEmployeeAwards().add(calcAvailableEmployeeAwards);
                populate(calcAvailableEmployeeAwards);
            }
        }
        // calcAwardTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(AwardType.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getCalcAwardTypes().add((AwardType) sel.next());
            }
            else {
                AwardType calcAwardTypes = createAwardType();
                obj.getCalcAwardTypes().add(calcAwardTypes);
                populate(calcAwardTypes);
            }
        }
        // countryCode
        hub = ModelDelegate.getCountryCodes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setCountryCode((CountryCode) hub.getAt(x));
        }
        // employeeAwards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            EmployeeAward employeeAwards = createEmployeeAward();
            obj.getEmployeeAwards().add(employeeAwards);
            populate(employeeAwards);
        }
        // employeeCustomDatas
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            EmployeeCustomData employeeCustomDatas = createEmployeeCustomData();
            obj.getEmployeeCustomDatas().add(employeeCustomDatas);
            populate(employeeCustomDatas);
        }
        // employeeEcardRecipients
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // employeeEcards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            EmployeeEcard employeeEcards = createEmployeeEcard();
            obj.getEmployeeEcards().add(employeeEcards);
            populate(employeeEcards);
        }
        // employees
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                Employee employees = createEmployee();
                obj.getEmployees().add(employees);
                populate(employees, level+1);
            }
        }
        // employeeType
        hub = ModelDelegate.getEmployeeTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setEmployeeType((EmployeeType) hub.getAt(x));
        }
        // familyMembers
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
            }
            else {
            }
        }
        // HRBPartner
        hub = (Hub) obj.getProperty(OAString.cpp(Employee.P_Program, Program.P_Employees));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setHRBPartner((Employee) hub.getAt(x));
        }
        // inspireApprovals
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // inspireAwardLevelLocationValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(InspireAwardLevelLocationValue.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getInspireAwardLevelLocationValues().add((InspireAwardLevelLocationValue) sel.next());
            }
            else {
                InspireAwardLevelLocationValue inspireAwardLevelLocationValues = createInspireAwardLevelLocationValue();
                obj.getInspireAwardLevelLocationValues().add(inspireAwardLevelLocationValues);
                populate(inspireAwardLevelLocationValues);
            }
        }
        // inspireAwardLevels
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(InspireAwardLevel.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getInspireAwardLevels().add((InspireAwardLevel) sel.next());
            }
            else {
                InspireAwardLevel inspireAwardLevels = createInspireAwardLevel();
                obj.getInspireAwardLevels().add(inspireAwardLevels);
                populate(inspireAwardLevels);
            }
        }
        // inspireAwardType
        sel = new OASelect(AwardType.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        // inspireCoreValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(InspireCoreValue.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getInspireCoreValues().add((InspireCoreValue) sel.next());
            }
            else {
                InspireCoreValue inspireCoreValues = createInspireCoreValue();
                obj.getInspireCoreValues().add(inspireCoreValues);
                populate(inspireCoreValues);
            }
        }
        // inspireImagineCard
        if (Math.random() < .50) {
            sel = new OASelect(Card.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
        }
        else {
            Card inspireImagineCard = createCard();
            populate(inspireImagineCard);
        }
        // inspireOrders
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireOrder inspireOrders = createInspireOrder();
            obj.getInspireOrders().add(inspireOrders);
            populate(inspireOrders);
        }
        // inspireRecipients
        //   will be created by Inspire
        // inspires
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Inspire inspires = createInspire();
            obj.getInspires().add(inspires);
            populate(inspires);
        }
        // lineItems
        // location
        sel = new OASelect(Location.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setLocation((Location) sel.next());
        // parentEmployee
        //    owned
        // phones
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Phone phones = createPhone();
            obj.getPhones().add(phones);
            populate(phones);
        }
        // pointsApprovals
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // pointsFromRecord
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            PointsRecord pointsFromRecord = createPointsRecord();
            obj.getPointsFromRecord().add(pointsFromRecord);
            populate(pointsFromRecord);
        }
        // pointsNextApproval
        hub = (Hub) obj.getProperty(OAString.cpp(Employee.P_Program, Program.P_Employees));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setPointsNextApproval((Employee) hub.getAt(x));
        }
        // pointsPrevApproval
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                hub = (Hub) obj.getProperty(OAString.cpp(Employee.P_Program, Program.P_Employees));
                if (hub != null) {
                    x = (int) (Math.random()*hub.getSize());
                    obj.getPointsPrevApproval().add((Employee) hub.getAt(x));
                }
            }
        }
        // pointsRequest
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsRequest.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPointsRequest().add((PointsRequest) sel.next());
            }
            else {
                PointsRequest pointsRequest = createPointsRequest();
                obj.getPointsRequest().add(pointsRequest);
                populate(pointsRequest);
            }
        }
        // program
        // redeemedCodes
        // requiresMyApproval
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsAwardLevel.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getRequiresMyApproval().add((PointsAwardLevel) sel.next());
            }
            else {
                PointsAwardLevel requiresMyApproval = createPointsAwardLevel();
                obj.getRequiresMyApproval().add(requiresMyApproval);
                populate(requiresMyApproval);
            }
        }
    }
    
    public EmployeeAward createEmployeeAward() {
        EmployeeAward employeeAward = new EmployeeAward();
        return employeeAward;
    }
    
    public void populate(EmployeeAward obj) {
        populate(obj, 0);
    }
    public void populate(EmployeeAward obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // awardDate has a default value
        obj.setApprovedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setPackageSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setPackageTracking(OAString.getRandomString(0, 25));
        obj.setPackageShippingInfo(OAString.getRandomString(0, 150));
        obj.setPackageInvoiceNumber(OAString.getRandomString(0, 25));
        obj.setPackageBillDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setBillDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setPackagePaidDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setPaidDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemSelectedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemShippingInfo(OAString.getRandomString(0, 150));
        obj.setItemTracking(OAString.getRandomString(0, 25));
        obj.setItemBillDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemLastStatusDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemLastStatus(OAString.getRandomString(0, 75));
        obj.setItemInvoiceNumber(OAString.getRandomString(0, 25));
        obj.setItemVendorInvoiced(Math.random() < .5 ? true : false);
        obj.setItemPaidDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCompletedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCancelDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCancelReason(OAString.getRandomString(0, 254));
        obj.setCashSelectedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCashSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaSelectedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaAmount((Math.random() * 100));
        obj.setInternationalVisaSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setAddOnProductSelectedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setMergeId((int) (Math.random() * 900));
        obj.setCashInvoiceNumber(OAString.getRandomString(0, 25));
        obj.setCashinvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaInvoiceNumber(OAString.getRandomString(0, 24));
        obj.setInternationVisaInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaVendorInvoiced(Math.random() < .5 ? true : false);
        // addOnItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(AddOnItem.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getAddOnItems().add((AddOnItem) sel.next());
            }
            else {
                AddOnItem addOnItems = createAddOnItem();
                obj.getAddOnItems().add(addOnItems);
                populate(addOnItems);
            }
        }
        // addOnProduct
        hub = (Hub) obj.getProperty(OAString.cpp(EmployeeAward.P_AddOnItems, AddOnItem.P_Item, Item.P_Products));
        
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setAddOnProduct((Product) hub.getAt(x));
        }
        // awardCardOrders
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AwardCardOrder awardCardOrders = createAwardCardOrder();
            obj.getAwardCardOrders().add(awardCardOrders);
            populate(awardCardOrders);
        }
        // awardType
        hub = (Hub) obj.getProperty(OAString.cpp(EmployeeAward.P_Employee, Employee.P_CalcAwardTypes));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setAwardType((AwardType) hub.getAt(x));
        }
        // calcAnnouncementDocument
        if (Math.random() < .50) {
            sel = new OASelect(ProgramDocument.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setCalcAnnouncementDocument((ProgramDocument) sel.next());
        }
        else {
            ProgramDocument calcAnnouncementDocument = createProgramDocument();
            populate(calcAnnouncementDocument);
            obj.setCalcAnnouncementDocument(calcAnnouncementDocument);
        }
        // calcCeoImageStore
        ImageStore calcCeoImageStore = createImageStore();
        populate(calcCeoImageStore);
        obj.setCalcCeoImageStore(calcCeoImageStore);
        // calcCeoSignatureImageStore
        ImageStore calcCeoSignatureImageStore = createImageStore();
        populate(calcCeoSignatureImageStore);
        obj.setCalcCeoSignatureImageStore(calcCeoSignatureImageStore);
        // confirmEmail
        if (Math.random() < .50) {
            sel = new OASelect(Email.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setConfirmEmail((Email) sel.next());
        }
        else {
            Email confirmEmail = createEmail();
            populate(confirmEmail);
            obj.setConfirmEmail(confirmEmail);
        }
        // employee
        //    owned
        // employeeAwardCharities
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            EmployeeAwardCharity employeeAwardCharities = createEmployeeAwardCharity();
            obj.getEmployeeAwardCharities().add(employeeAwardCharities);
            populate(employeeAwardCharities);
        }
        // hindaOrder
        if (Math.random() < .50) {
            sel = new OASelect(HindaOrder.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setHindaOrder((HindaOrder) sel.next());
        }
        else {
            HindaOrder hindaOrder = createHindaOrder();
            populate(hindaOrder);
            obj.setHindaOrder(hindaOrder);
        }
        // imagineCard
        // lineItemForEmpAwardCash
        // lineItemForEmpAwardIntlVisa
        // lineItems
        // managerNotifyEmail
        // notifyEmail
        if (Math.random() < .50) {
            sel = new OASelect(Email.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setNotifyEmail((Email) sel.next());
        }
        else {
            Email notifyEmail = createEmail();
            populate(notifyEmail);
            obj.setNotifyEmail(notifyEmail);
        }
        // product
        sel = new OASelect(Product.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setProduct((Product) sel.next());
        // shippedEmails
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Email.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getShippedEmails().add((Email) sel.next());
            }
            else {
                Email shippedEmails = createEmail();
                obj.getShippedEmails().add(shippedEmails);
                populate(shippedEmails);
            }
        }
        // shipTo
        populate(obj.getShipTo());
        // values
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getValues();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getValues().add((Value) hub.getAt(x));
            }
        }
    }
    
    public EmployeeAwardCharity createEmployeeAwardCharity() {
        EmployeeAwardCharity employeeAwardCharity = new EmployeeAwardCharity();
        return employeeAwardCharity;
    }
    
    public void populate(EmployeeAwardCharity obj) {
        populate(obj, 0);
    }
    public void populate(EmployeeAwardCharity obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setValue((Math.random() * 100));
        obj.setSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInvoiceNumber(OAString.getRandomString(0, 5));
        obj.setInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setVendorInvoiced(Math.random() < .5 ? true : false);
        // charity
        hub = (Hub) obj.getProperty(OAString.cpp(EmployeeAwardCharity.P_EmployeeAward, EmployeeAward.P_AwardType, AwardType.P_AvailableCharities));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setCharity((Charity) hub.getAt(x));
        }
        // employeeAward
        //    owned
    }
    
    public EmployeeCustomData createEmployeeCustomData() {
        EmployeeCustomData employeeCustomData = new EmployeeCustomData();
        return employeeCustomData;
    }
    
    public void populate(EmployeeCustomData obj) {
        populate(obj, 0);
    }
    public void populate(EmployeeCustomData obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setValue(OAString.getRandomString(0, 125));
        // customData
        sel = new OASelect(CustomData.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setCustomData((CustomData) sel.next());
        // employee
        //    owned
    }
    
    public EmployeeEcard createEmployeeEcard() {
        EmployeeEcard employeeEcard = new EmployeeEcard();
        return employeeEcard;
    }
    
    public void populate(EmployeeEcard obj) {
        populate(obj, 0);
    }
    public void populate(EmployeeEcard obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setSubject(OAString.getRandomString(0, 125));
        obj.setMessage(OAString.getRandomString(0, 500));
        obj.setSendDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // postToWall has a default value
        // confirmedEmail
        Email confirmedEmail = createEmail();
        populate(confirmedEmail);
        obj.setConfirmedEmail(confirmedEmail);
        // deliveredEmail
        Email deliveredEmail = createEmail();
        populate(deliveredEmail);
        obj.setDeliveredEmail(deliveredEmail);
        // ecard
        hub = (Hub) obj.getProperty(OAString.cpp(EmployeeEcard.P_Employee, Employee.P_CalcAvailableEcards));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setEcard((Ecard) hub.getAt(x));
        }
        // employee
        //    owned
        // employeeEcardTos
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            EmployeeEcardTo employeeEcardTos = createEmployeeEcardTo();
            obj.getEmployeeEcardTos().add(employeeEcardTos);
            populate(employeeEcardTos);
        }
    }
    
    public EmployeeEcardTo createEmployeeEcardTo() {
        EmployeeEcardTo employeeEcardTo = new EmployeeEcardTo();
        return employeeEcardTo;
    }
    
    public void populate(EmployeeEcardTo obj) {
        populate(obj, 0);
    }
    public void populate(EmployeeEcardTo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setEmailAddress(OAString.getRandomString(0, 125));
        obj.setName(OAString.getRandomString(0, 75));
        obj.setIncludeManager(Math.random() < .5 ? true : false);
        // email
        // employeeEcard
        //    owned
        // lineItem
        // toEmployee
        sel = new OASelect(Employee.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setToEmployee((Employee) sel.next());
    }
    
    public EmployeeType createEmployeeType() {
        EmployeeType employeeType = new EmployeeType();
        return employeeType;
    }
    
    public void populate(EmployeeType obj) {
        populate(obj, 0);
    }
    public void populate(EmployeeType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        obj.setType((int) (Math.random() * 5));
    }
    
    
    public HindaOrder createHindaOrder() {
        HindaOrder hindaOrder = new HindaOrder();
        return hindaOrder;
    }
    
    public void populate(HindaOrder obj) {
        populate(obj, 0);
    }
    public void populate(HindaOrder obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setOrderNumber(OAString.getRandomString(0, 25));
        obj.setClientOrderNumber(OAString.getRandomString(0, 50));
        obj.setOrderDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // employeeAward
        if (Math.random() < .50) {
            sel = new OASelect(EmployeeAward.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setEmployeeAward((EmployeeAward) sel.next());
        }
        else {
            EmployeeAward employeeAward = createEmployeeAward();
            populate(employeeAward);
            obj.setEmployeeAward(employeeAward);
        }
        // hindaOrderLines
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            HindaOrderLine hindaOrderLines = createHindaOrderLine();
            obj.getHindaOrderLines().add(hindaOrderLines);
            populate(hindaOrderLines);
        }
        // inspireOrder
        if (Math.random() < .50) {
            sel = new OASelect(InspireOrder.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
        }
        else {
            InspireOrder inspireOrder = createInspireOrder();
            populate(inspireOrder);
        }
    }
    
    public HindaOrderLine createHindaOrderLine() {
        HindaOrderLine hindaOrderLine = new HindaOrderLine();
        return hindaOrderLine;
    }
    
    public void populate(HindaOrderLine obj) {
        populate(obj, 0);
    }
    public void populate(HindaOrderLine obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setOrderLineNumber((int) (Math.random() * 900));
        obj.setQuantityBackOrdered((int) (Math.random() * 900));
        obj.setQuantityOrdered((int) (Math.random() * 900));
        obj.setQuantityCanceled((int) (Math.random() * 900));
        obj.setQuantityReserved((int) (Math.random() * 900));
        obj.setQuantityShipped((int) (Math.random() * 900));
        obj.setTrackingNumber(OAString.getRandomString(0, 50));
        obj.setCarrierCode(OAString.getRandomString(0, 25));
        obj.setTrackingUrl(OAString.getRandomString(0, 150));
        obj.setShippedDate((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setClientOrderLineNumber(OAString.getRandomString(0, 25));
        // hindaOrder
        //    owned
    }
    
    public ImageStore createImageStore() {
        ImageStore imageStore = new ImageStore();
        return imageStore;
    }
    
    public void populate(ImageStore obj) {
        populate(obj, 0);
    }
    public void populate(ImageStore obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setOrigFileName(OAString.getRandomString(0, 75));
        obj.setDescription(OAString.getRandomString(0, 55));
        obj.setLastUpdate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setBytes(new byte[0]);
        // calcCeoAwardType
        //    owned
    }
    
    public Inspire createInspire() {
        Inspire inspire = new Inspire();
        return inspire;
    }
    
    public void populate(Inspire obj) {
        populate(obj, 0);
    }
    public void populate(Inspire obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setReason(OAString.getRandomString(0, 250));
        obj.setMessage(OAString.getRandomString(0, 500));
        // email
        // employee
        //    owned
        // inspireAwardLevel
        hub = (Hub) obj.getProperty(OAString.cpp(Inspire.P_Employee, Employee.P_Program, Program.P_InspireAwardLevels));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setInspireAwardLevel((InspireAwardLevel) hub.getAt(x));
        }
        // inspireCoreValue
        hub = (Hub) obj.getProperty(OAString.cpp(Inspire.P_Employee, Employee.P_InspireCoreValues));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setInspireCoreValue((InspireCoreValue) hub.getAt(x));
        }
        // inspireRecipients
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireRecipient inspireRecipients = createInspireRecipient();
            obj.getInspireRecipients().add(inspireRecipients);
            populate(inspireRecipients);
        }
    }
    
    public InspireApproval createInspireApproval() {
        InspireApproval inspireApproval = new InspireApproval();
        return inspireApproval;
    }
    
    public void populate(InspireApproval obj) {
        populate(obj, 0);
    }
    public void populate(InspireApproval obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // status has a default value
        obj.setStatusDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setComments(OAString.getRandomString(0, 250));
        // email
        // employee
        sel = new OASelect(Employee.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setEmployee((Employee) sel.next());
        // inspireAwardLevel
        sel = new OASelect(InspireAwardLevel.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setInspireAwardLevel((InspireAwardLevel) sel.next());
        // inspireRecipient
        //    owned
        // reminderEmails
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Email.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getReminderEmails().add((Email) sel.next());
            }
            else {
                Email reminderEmails = createEmail();
                obj.getReminderEmails().add(reminderEmails);
                populate(reminderEmails);
            }
        }
    }
    
    public InspireAwardLevel createInspireAwardLevel() {
        InspireAwardLevel inspireAwardLevel = new InspireAwardLevel();
        return inspireAwardLevel;
    }
    
    public void populate(InspireAwardLevel obj) {
        populate(obj, 0);
    }
    public void populate(InspireAwardLevel obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 75));
        obj.setApprovalLevels((int) (Math.random() * 900));
        obj.setApproveFromTop(Math.random() < .5 ? true : false);
        // program
        //    owned
    }
    
    public InspireAwardLevelLocationValue createInspireAwardLevelLocationValue() {
        InspireAwardLevelLocationValue inspireAwardLevelLocationValue = new InspireAwardLevelLocationValue();
        return inspireAwardLevelLocationValue;
    }
    
    public void populate(InspireAwardLevelLocationValue obj) {
        populate(obj, 0);
    }
    public void populate(InspireAwardLevelLocationValue obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setPoints((Math.random() * 100));
        // inspireAwardLevel
        // location
        //    owned
    }
    
    public InspireCoreValue createInspireCoreValue() {
        InspireCoreValue inspireCoreValue = new InspireCoreValue();
        return inspireCoreValue;
    }
    
    public void populate(InspireCoreValue obj) {
        populate(obj, 0);
    }
    public void populate(InspireCoreValue obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 75));
        // seq is auto sequence
        // employee
        if (Math.random() < .50) {
            sel = new OASelect(Employee.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setEmployee((Employee) sel.next());
        }
        else {
            Employee employee = createEmployee();
            populate(employee);
            obj.setEmployee(employee);
        }
        // program
        //    owned
    }
    
    public InspireOrder createInspireOrder() {
        InspireOrder inspireOrder = new InspireOrder();
        return inspireOrder;
    }
    
    public void populate(InspireOrder obj) {
        populate(obj, 0);
    }
    public void populate(InspireOrder obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setBillDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setPaidDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCompletedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCashSelectedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCashAmount((Math.random() * 100));
        obj.setCashSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaSelectedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaAmount((Math.random() * 100));
        obj.setInternationalVisaPointsUsed((Math.random() * 100));
        obj.setInternationalVisaSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // pointsOrdered has a default value
        obj.setCashInvoiceNumber(OAString.getRandomString(0, 5));
        obj.setCashInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaInvoiceNumber(OAString.getRandomString(0, 5));
        obj.setInternationalVisaInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInternationalVisaVendorInvoiced(Math.random() < .5 ? true : false);
        // awardCardOrders
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AwardCardOrder awardCardOrders = createAwardCardOrder();
            obj.getAwardCardOrders().add(awardCardOrders);
            populate(awardCardOrders);
        }
        // emails
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Email.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getEmails().add((Email) sel.next());
            }
            else {
                Email emails = createEmail();
                obj.getEmails().add(emails);
                populate(emails);
            }
        }
        // employee
        //    owned
        // hindaOrders
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(HindaOrder.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
            }
            else {
                HindaOrder hindaOrders = createHindaOrder();
                populate(hindaOrders);
            }
        }
        // inspireOrderCharities
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireOrderCharity inspireOrderCharities = createInspireOrderCharity();
            obj.getInspireOrderCharities().add(inspireOrderCharities);
            populate(inspireOrderCharities);
        }
        // inspireOrderItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireOrderItem inspireOrderItems = createInspireOrderItem();
            obj.getInspireOrderItems().add(inspireOrderItems);
            populate(inspireOrderItems);
        }
        // lineItemForInspireCash
        // lineItemForIntlVisa
        // lineItems
        tot = ((int) (Math.random()*8));
        // shipTo
        populate(obj.getShipTo());
    }
    
    public InspireOrderCharity createInspireOrderCharity() {
        InspireOrderCharity inspireOrderCharity = new InspireOrderCharity();
        return inspireOrderCharity;
    }
    
    public void populate(InspireOrderCharity obj) {
        populate(obj, 0);
    }
    public void populate(InspireOrderCharity obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setValue((Math.random() * 100));
        obj.setSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInvoiceNumber(OAString.getRandomString(0, 5));
        obj.setInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setVendorInvoiced(Math.random() < .5 ? true : false);
        // charity
        hub = (Hub) obj.getProperty(OAString.cpp(InspireOrderCharity.P_InspireOrder, InspireOrder.P_Employee, Employee.P_Program, Program.P_InspireAwardType, AwardType.P_AvailableCharities));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setCharity((Charity) hub.getAt(x));
        }
        // inspireOrder
        //    owned
        // lineItem
    }
    
    public InspireOrderItem createInspireOrderItem() {
        InspireOrderItem inspireOrderItem = new InspireOrderItem();
        return inspireOrderItem;
    }
    
    public void populate(InspireOrderItem obj) {
        populate(obj, 0);
    }
    public void populate(InspireOrderItem obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        // quantity has a default value
        obj.setBillDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setPaidDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemShippingInfo(OAString.getRandomString(0, 150));
        obj.setItemLastStatusDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setItemLastStatus(OAString.getRandomString(0, 75));
        obj.setCompletedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInvoiceNumber(OAString.getRandomString(0, 5));
        obj.setInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setVendorInvoiced(Math.random() < .5 ? true : false);
        // inspireOrder
        //    owned
        // lineItem
        // product
        sel = new OASelect(Product.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setProduct((Product) sel.next());
    }
    
    public InspireRecipient createInspireRecipient() {
        InspireRecipient inspireRecipient = new InspireRecipient();
        return inspireRecipient;
    }
    
    public void populate(InspireRecipient obj) {
        populate(obj, 0);
    }
    public void populate(InspireRecipient obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setPoints((Math.random() * 100));
        obj.setCompletedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // completedEmail
        Email completedEmail = createEmail();
        populate(completedEmail);
        obj.setCompletedEmail(completedEmail);
        // email
        // employee
        sel = new OASelect(Employee.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setEmployee((Employee) sel.next());
        // inspire
        //    owned
        // inspireApprovals
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireApproval inspireApprovals = createInspireApproval();
            obj.getInspireApprovals().add(inspireApprovals);
            populate(inspireApprovals);
        }
        // inspireAwardLevel
        InspireAwardLevel inspireAwardLevel = createInspireAwardLevel();
        populate(inspireAwardLevel);
        obj.setInspireAwardLevel(inspireAwardLevel);
        // inspireAwardLevelLocationValue
        if (hub != null) {
            hub = (Hub) obj.getProperty(OAString.cpp(InspireRecipient.P_Employee, Employee.P_InspireAwardLevelLocationValues));
            x = (int) (Math.random()*hub.getSize());
        }
        obj.setInspireAwardLevelLocationValue((InspireAwardLevelLocationValue) hub.getAt(x));
        // lineItem
    }
    
    public Item createItem() {
        Item item = new Item();
        return item;
    }
    
    public void populate(Item obj) {
        populate(obj, 0);
    }
    public void populate(Item obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setVendorCode(OAString.getRandomString(0, 50));
        obj.setVendorCode2(OAString.getRandomString(0, 50));
        obj.setName(OAString.getRandomString(0, 150));
        obj.setBriefText(OAString.getRandomString(0, 175));
        obj.setText(OAString.getRandomString(0, 500));
        obj.setDiscontinuedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setDiscontinuedReason(OAString.getRandomString(0, 75));
        obj.setDropShip(Math.random() < .5 ? true : false);
        obj.setOtherInformation(OAString.getRandomString(0, 254));
        obj.setManufacturer(OAString.getRandomString(0, 100));
        obj.setModel(OAString.getRandomString(0, 100));
        obj.setLastUpdate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setHifiveRating((int) (Math.random() * 4));
        obj.setHifiveRatingDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setHifiveRatingNote(OAString.getRandomString(0, 245));
        obj.setAccountNumber(OAString.getRandomString(0, 5));
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // itemCategories
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getItemCategories();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getItemCategories().add((ItemCategory) hub.getAt(x));
            }
        }
        // itemTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getItemTypes();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getItemTypes().add((ItemType) hub.getAt(x));
            }
        }
        // itemVendor
        hub = ModelDelegate.getItemVendors();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setItemVendor((ItemVendor) hub.getAt(x));
        }
        // products
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Product products = createProduct();
            obj.getProducts().add(products);
            populate(products);
        }
        // replaceItems
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                sel = new OASelect(Item.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getReplaceItems().add((Item) sel.next());
            }
        }
        // replacesItems
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                sel = new OASelect(Item.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getReplacesItems().add((Item) sel.next());
            }
        }
        // sections
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Section.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getSections().add((Section) sel.next());
        }
    }
    
    public ItemCategory createItemCategory() {
        ItemCategory itemCategory = new ItemCategory();
        return itemCategory;
    }
    
    public void populate(ItemCategory obj) {
        populate(obj, 0);
    }
    public void populate(ItemCategory obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        obj.setCode(OAString.getRandomString(0, 20));
        // seq is auto sequence
        obj.setHifiveRating((int) (Math.random() * 4));
        obj.setHifiveRatingDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setHifiveRatingNote(OAString.getRandomString(0, 245));
        // itemCategories
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                ItemCategory itemCategories = createItemCategory();
                obj.getItemCategories().add(itemCategories);
                populate(itemCategories, level+1);
            }
        }
        // items
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Item.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getItems().add((Item) sel.next());
        }
        // parentItemCategory
        //    owned
    }
    
    public ItemType createItemType() {
        ItemType itemType = new ItemType();
        return itemType;
    }
    
    public void populate(ItemType obj) {
        populate(obj, 0);
    }
    public void populate(ItemType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        obj.setType((int) (Math.random() * 3));
    }
    
    public ItemVendor createItemVendor() {
        ItemVendor itemVendor = new ItemVendor();
        return itemVendor;
    }
    
    public void populate(ItemVendor obj) {
        populate(obj, 0);
    }
    public void populate(ItemVendor obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        obj.setNotes(OAString.getRandomString(0, 500));
    }
    
    
    public Location createLocation() {
        Location location = new Location();
        return location;
    }
    
    public void populate(Location obj) {
        populate(obj, 0);
    }
    public void populate(Location obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 125));
        obj.setName2(OAString.getRandomString(0, 125));
        // seq is auto sequence
        obj.setCode(OAString.getRandomString(0, 24));
        obj.setCharityGoal((Math.random() * 100));
        obj.setFromEmailAddress(OAString.getRandomString(0, 75));
        obj.setTestEmail(OAString.getRandomString(0, 125));
        // indexPageUsesBorders has a default value
        // scrollerShowsLocation has a default value
        // scrollerShowsDate has a default value
        // scrollerShowsYears has a default value
        // scrollerRowsPerSecond has a default value
        // addOnItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AddOnItem addOnItems = createAddOnItem();
            obj.getAddOnItems().add(addOnItems);
            populate(addOnItems);
        }
        // address
        // announcementDocument
        ProgramDocument announcementDocument = createProgramDocument();
        populate(announcementDocument);
        obj.setAnnouncementDocument(announcementDocument);
        // awardTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AwardType awardTypes = createAwardType();
            obj.getAwardTypes().add(awardTypes);
            populate(awardTypes);
        }
        // calcCountryCode
        hub = ModelDelegate.getCountryCodes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setCalcCountryCode((CountryCode) hub.getAt(x));
        }
        // calcLogoStampImageStore
        ImageStore calcLogoStampImageStore = createImageStore();
        populate(calcLogoStampImageStore);
        // cards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Card.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getCards().add((Card) sel.next());
        }
        // ceoImageStore
        ImageStore ceoImageStore = createImageStore();
        populate(ceoImageStore);
        obj.setCeoImageStore(ceoImageStore);
        // ceoSignatureImageStore
        ImageStore ceoSignatureImageStore = createImageStore();
        populate(ceoSignatureImageStore);
        obj.setCeoSignatureImageStore(ceoSignatureImageStore);
        // charities
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getCharities();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getCharities().add((Charity) hub.getAt(x));
            }
        }
        // countryCode
        hub = ModelDelegate.getCountryCodes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setCountryCode((CountryCode) hub.getAt(x));
        }
        // ecards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getEcards();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getEcards().add((Ecard) hub.getAt(x));
            }
        }
        // employees
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Employee.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getEmployees().add((Employee) sel.next());
            }
            else {
                Employee employees = createEmployee();
                obj.getEmployees().add(employees);
                populate(employees);
            }
        }
        // imagineCard
        sel = new OASelect(Card.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setImagineCard((Card) sel.next());
        // inspireAwardLevelLocationValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireAwardLevelLocationValue inspireAwardLevelLocationValues = createInspireAwardLevelLocationValue();
            obj.getInspireAwardLevelLocationValues().add(inspireAwardLevelLocationValues);
            populate(inspireAwardLevelLocationValues);
        }
        // inspireAwardType
        AwardType inspireAwardType = createAwardType();
        populate(inspireAwardType);
        obj.setInspireAwardType(inspireAwardType);
        // inspireCoreValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireCoreValue inspireCoreValues = createInspireCoreValue();
            obj.getInspireCoreValues().add(inspireCoreValues);
            populate(inspireCoreValues);
        }
        // lineItems
        // locationPageGroups
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            LocationPageGroup locationPageGroups = createLocationPageGroup();
            obj.getLocationPageGroups().add(locationPageGroups);
            populate(locationPageGroups);
        }
        // locationPageInfos
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            LocationPageInfo locationPageInfos = createLocationPageInfo();
            obj.getLocationPageInfos().add(locationPageInfos);
            populate(locationPageInfos);
        }
        // locations
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                Location locations = createLocation();
                obj.getLocations().add(locations);
                populate(locations, level+1);
            }
        }
        // locationType
        hub = (Hub) obj.getProperty(OAString.cpp(Location.P_Program, Program.P_Company, Company.P_LocationTypes));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setLocationType((LocationType) hub.getAt(x));
        }
        // logoImageStore
        ImageStore logoImageStore = createImageStore();
        populate(logoImageStore);
        obj.setLogoImageStore(logoImageStore);
        // logoStampImageStore
        ImageStore logoStampImageStore = createImageStore();
        populate(logoStampImageStore);
        obj.setLogoStampImageStore(logoStampImageStore);
        // pageTheme
        hub = ModelDelegate.getPageThemes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setPageTheme((PageTheme) hub.getAt(x));
        }
        // parentLocation
        //    owned
        // pointsAwardLevels
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsAwardLevel.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPointsAwardLevels().add((PointsAwardLevel) sel.next());
            }
            else {
                PointsAwardLevel pointsAwardLevels = createPointsAwardLevel();
                obj.getPointsAwardLevels().add(pointsAwardLevels);
                populate(pointsAwardLevels);
            }
        }
        // pointsCoreValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsCoreValue.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPointsCoreValues().add((PointsCoreValue) sel.next());
            }
            else {
                PointsCoreValue pointsCoreValues = createPointsCoreValue();
                obj.getPointsCoreValues().add(pointsCoreValues);
                populate(pointsCoreValues);
            }
        }
        // program
        //    owned
        // programEmailTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramEmailType programEmailTypes = createProgramEmailType();
            populate(programEmailTypes);
        }
        // programEvents
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramEvent programEvents = createProgramEvent();
            obj.getProgramEvents().add(programEvents);
            populate(programEvents);
        }
        // programFaqs
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramFaq programFaqs = createProgramFaq();
            obj.getProgramFaqs().add(programFaqs);
            populate(programFaqs);
        }
    }
    
    public LocationPageGroup createLocationPageGroup() {
        LocationPageGroup locationPageGroup = new LocationPageGroup();
        return locationPageGroup;
    }
    
    public void populate(LocationPageGroup obj) {
        populate(obj, 0);
    }
    public void populate(LocationPageGroup obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        // location
        //    owned
        // pageGroup
        hub = ModelDelegate.getPageGroups();
        x = (int) (Math.random()*hub.getSize());
        obj.setPageGroup((PageGroup) hub.getAt(x));
    }
    
    public LocationPageInfo createLocationPageInfo() {
        LocationPageInfo locationPageInfo = new LocationPageInfo();
        return locationPageInfo;
    }
    
    public void populate(LocationPageInfo obj) {
        populate(obj, 0);
    }
    public void populate(LocationPageInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // location
        //    owned
        // pageInfo
        sel = new OASelect(PageInfo.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setPageInfo((PageInfo) sel.next());
        // programDocument
        ProgramDocument programDocument = createProgramDocument();
        populate(programDocument);
        obj.setProgramDocument(programDocument);
    }
    
    public LocationType createLocationType() {
        LocationType locationType = new LocationType();
        return locationType;
    }
    
    public void populate(LocationType obj) {
        populate(obj, 0);
    }
    public void populate(LocationType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 75));
        // seq is auto sequence
        // company
        //    owned
    }
    
    public LoginImage createLoginImage() {
        LoginImage loginImage = new LoginImage();
        return loginImage;
    }
    
    public void populate(LoginImage obj) {
        populate(obj, 0);
    }
    public void populate(LoginImage obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setLocation((int) (Math.random() * 5));
        obj.setXPosition((int) (Math.random() * 900));
        obj.setYPosition((int) (Math.random() * 900));
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // loginImageSet
        //    owned
    }
    
    public LoginImageSet createLoginImageSet() {
        LoginImageSet loginImageSet = new LoginImageSet();
        return loginImageSet;
    }
    
    public void populate(LoginImageSet obj) {
        populate(obj, 0);
    }
    public void populate(LoginImageSet obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 35));
        // loginImages
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            LoginImage loginImages = createLoginImage();
            obj.getLoginImages().add(loginImages);
            populate(loginImages);
        }
        // programs
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Program.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPrograms().add((Program) sel.next());
            }
            else {
                Program programs = createProgram();
                obj.getPrograms().add(programs);
                populate(programs);
            }
        }
    }
    
    public Merchant createMerchant() {
        Merchant merchant = new Merchant();
        return merchant;
    }
    
    public void populate(Merchant obj) {
        populate(obj, 0);
    }
    public void populate(Merchant obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 150));
        obj.setDescription(OAString.getRandomString(0, 175));
        obj.setText(OAString.getRandomString(0, 500));
        // cards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Card.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getCards().add((Card) sel.next());
        }
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // merchantCategories
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getMerchantCategories();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getMerchantCategories().add((MerchantCategory) hub.getAt(x));
            }
        }
    }
    
    public MerchantCategory createMerchantCategory() {
        MerchantCategory merchantCategory = new MerchantCategory();
        return merchantCategory;
    }
    
    public void populate(MerchantCategory obj) {
        populate(obj, 0);
    }
    public void populate(MerchantCategory obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 55));
        // seq is auto sequence
        // merchantCategories
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                MerchantCategory merchantCategories = createMerchantCategory();
                obj.getMerchantCategories().add(merchantCategories);
                populate(merchantCategories, level+1);
            }
        }
        // merchants
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Merchant.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getMerchants().add((Merchant) sel.next());
        }
        // parentMerchantCategory
        //    owned
    }
    
    public OrderItemTracking createOrderItemTracking() {
        OrderItemTracking orderItemTracking = new OrderItemTracking();
        return orderItemTracking;
    }
    
    public void populate(OrderItemTracking obj) {
        populate(obj, 0);
    }
    public void populate(OrderItemTracking obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setSentCarrier(OAString.getRandomString(0, 75));
        obj.setProductionDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setSentDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setExpectedDeliveryDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setConfirmEmailDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCarrierTracking(OAString.getRandomString(0, 75));
        obj.setCancelDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setReplaceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setFreight((Math.random() * 100));
        // orderTracking
        //    owned
    }
    
    public OrderTracking createOrderTracking() {
        OrderTracking orderTracking = new OrderTracking();
        return orderTracking;
    }
    
    public void populate(OrderTracking obj) {
        populate(obj, 0);
    }
    public void populate(OrderTracking obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setDescription(OAString.getRandomString(0, 254));
        obj.setSentEmailDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setReceivedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setCloseDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setNotes(OAString.getRandomString(0, 500));
        obj.setBillingDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setBillAmount((Math.random() * 100));
        obj.setInvoiceDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInvoiceNumber(OAString.getRandomString(0, 20));
        obj.setPaidDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // orderItemTrackings
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            OrderItemTracking orderItemTrackings = createOrderItemTracking();
            obj.getOrderItemTrackings().add(orderItemTrackings);
            populate(orderItemTrackings);
        }
        // orderTrackingStatuses
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            OrderTrackingStatus orderTrackingStatuses = createOrderTrackingStatus();
            obj.getOrderTrackingStatuses().add(orderTrackingStatuses);
            populate(orderTrackingStatuses);
        }
    }
    
    public OrderTrackingStatus createOrderTrackingStatus() {
        OrderTrackingStatus orderTrackingStatus = new OrderTrackingStatus();
        return orderTrackingStatus;
    }
    
    public void populate(OrderTrackingStatus obj) {
        populate(obj, 0);
    }
    public void populate(OrderTrackingStatus obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setCreated((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setDescription(OAString.getRandomString(0, 45));
        obj.setNote(OAString.getRandomString(0, 500));
        obj.setEmailAddress(OAString.getRandomString(0, 75));
        obj.setEmailText(OAString.getRandomString(0, 500));
        obj.setEmailDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // orderTracking
        //    owned
    }
    
    public Page createPage() {
        Page page = new Page();
        return page;
    }
    
    public void populate(Page obj) {
        populate(obj, 0);
    }
    public void populate(Page obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 50));
        obj.setDescription(OAString.getRandomString(0, 75));
        // seq is auto sequence
        // pageInfos
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            PageInfo pageInfos = createPageInfo();
            obj.getPageInfos().add(pageInfos);
            populate(pageInfos);
        }
    }
    
    public PageGroup createPageGroup() {
        PageGroup pageGroup = new PageGroup();
        return pageGroup;
    }
    
    public void populate(PageGroup obj) {
        populate(obj, 0);
    }
    public void populate(PageGroup obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        obj.setName(OAString.getRandomString(0, 35));
        // pageGroupPageInfos
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            PageGroupPageInfo pageGroupPageInfos = createPageGroupPageInfo();
            obj.getPageGroupPageInfos().add(pageGroupPageInfos);
            populate(pageGroupPageInfos);
        }
        // pageGroups
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                PageGroup pageGroups = createPageGroup();
                obj.getPageGroups().add(pageGroups);
                populate(pageGroups, level+1);
            }
        }
        // parentPageGroup
        //    owned
    }
    
    public PageGroupPageInfo createPageGroupPageInfo() {
        PageGroupPageInfo pageGroupPageInfo = new PageGroupPageInfo();
        return pageGroupPageInfo;
    }
    
    public void populate(PageGroupPageInfo obj) {
        populate(obj, 0);
    }
    public void populate(PageGroupPageInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // imageStore
        if (Math.random() < .50) {
            sel = new OASelect(ImageStore.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setImageStore((ImageStore) sel.next());
        }
        else {
            ImageStore imageStore = createImageStore();
            populate(imageStore);
            obj.setImageStore(imageStore);
        }
        // pageGroup
        //    owned
        // pageInfo
        sel = new OASelect(PageInfo.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setPageInfo((PageInfo) sel.next());
        // programDocument
        ProgramDocument programDocument = createProgramDocument();
        populate(programDocument);
        obj.setProgramDocument(programDocument);
    }
    
    public PageInfo createPageInfo() {
        PageInfo pageInfo = new PageInfo();
        return pageInfo;
    }
    
    public void populate(PageInfo obj) {
        populate(obj, 0);
    }
    public void populate(PageInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setCode(OAString.getRandomString(0, 25));
        obj.setDescription(OAString.getRandomString(0, 55));
        // seq is auto sequence
        // page
        //    owned
    }
    
    public PageTheme createPageTheme() {
        PageTheme pageTheme = new PageTheme();
        return pageTheme;
    }
    
    public void populate(PageTheme obj) {
        populate(obj, 0);
    }
    public void populate(PageTheme obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 35));
        obj.setCssFileName(OAString.getRandomString(0, 45));
        // pageThemePageInfos
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            PageThemePageInfo pageThemePageInfos = createPageThemePageInfo();
            obj.getPageThemePageInfos().add(pageThemePageInfos);
            populate(pageThemePageInfos);
        }
        // programs
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Program.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getPrograms().add((Program) sel.next());
        }
    }
    
    public PageThemePageInfo createPageThemePageInfo() {
        PageThemePageInfo pageThemePageInfo = new PageThemePageInfo();
        return pageThemePageInfo;
    }
    
    public void populate(PageThemePageInfo obj) {
        populate(obj, 0);
    }
    public void populate(PageThemePageInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // pageInfo
        sel = new OASelect(PageInfo.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setPageInfo((PageInfo) sel.next());
        // pageTheme
        //    owned
        // programDocument
        ProgramDocument programDocument = createProgramDocument();
        populate(programDocument);
        obj.setProgramDocument(programDocument);
    }
    
    public Phone createPhone() {
        Phone phone = new Phone();
        return phone;
    }
    
    public void populate(Phone obj) {
        populate(obj, 0);
    }
    public void populate(Phone obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setPhoneNumber(OAString.getRandomString(0, 50));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        // phoneType
        hub = ModelDelegate.getPhoneTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setPhoneType((PhoneType) hub.getAt(x));
        }
    }
    
    public PhoneType createPhoneType() {
        PhoneType phoneType = new PhoneType();
        return phoneType;
    }
    
    public void populate(PhoneType obj) {
        populate(obj, 0);
    }
    public void populate(PhoneType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 45));
        obj.setType((int) (Math.random() * 5));
    }
    
    public PointsApproval createPointsApproval() {
        PointsApproval pointsApproval = new PointsApproval();
        return pointsApproval;
    }
    
    public void populate(PointsApproval obj) {
        populate(obj, 0);
    }
    public void populate(PointsApproval obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setStatus((int) (Math.random() * 5));
        obj.setStatusDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setComments(OAString.getRandomString(0, 500));
        // seq is auto sequence
        // approvedAwardLevel
        hub = (Hub) obj.getProperty(OAString.cpp(PointsApproval.P_Employee, Employee.P_Program, Program.P_PointsAwardLevels));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setApprovedAwardLevel((PointsAwardLevel) hub.getAt(x));
        }
        // employee
        sel = new OASelect(Employee.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setEmployee((Employee) sel.next());
        // pointsRequest
        //    owned
        // startingAwardLevel
        hub = (Hub) obj.getProperty(OAString.cpp(PointsApproval.P_Employee, Employee.P_Program, Program.P_PointsAwardLevels));
        if (hub != null) {
            x = (int) (Math.random()*hub.getSize());
            obj.setStartingAwardLevel((PointsAwardLevel) hub.getAt(x));
        }
    }
    
    public PointsAwardLevel createPointsAwardLevel() {
        PointsAwardLevel pointsAwardLevel = new PointsAwardLevel();
        return pointsAwardLevel;
    }
    
    public void populate(PointsAwardLevel obj) {
        populate(obj, 0);
    }
    public void populate(PointsAwardLevel obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 75));
        // seq is auto sequence
        obj.setApprovalLevels((int) (Math.random() * 900));
        obj.setRequireSuperApprover(Math.random() < .5 ? true : false);
        obj.setPoints((int) (Math.random() * 900));
        obj.setDescription(OAString.getRandomString(0, 500));
        // level has a default value
        // approvedApprovals
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // location
        if (Math.random() < .50) {
            sel = new OASelect(Location.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setLocation((Location) sel.next());
        }
        else {
            Location location = createLocation();
            populate(location);
            obj.setLocation(location);
        }
        // pointsRequests
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsRequest.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPointsRequests().add((PointsRequest) sel.next());
            }
            else {
                PointsRequest pointsRequests = createPointsRequest();
                obj.getPointsRequests().add(pointsRequests);
                populate(pointsRequests);
            }
        }
        // program
        sel = new OASelect(Program.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setProgram((Program) sel.next());
        // requiredApproval
        if (Math.random() < .50) {
            sel = new OASelect(Employee.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setRequiredApproval((Employee) sel.next());
        }
        else {
            Employee requiredApproval = createEmployee();
            populate(requiredApproval);
            obj.setRequiredApproval(requiredApproval);
        }
        // startingApprovals
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
    }
    
    public PointsConfiguration createPointsConfiguration() {
        PointsConfiguration pointsConfiguration = new PointsConfiguration();
        return pointsConfiguration;
    }
    
    public void populate(PointsConfiguration obj) {
        populate(obj, 0);
    }
    public void populate(PointsConfiguration obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // notificationToNominatorManager has a default value
        // notificationToRecipientManager has a default value
        // certificateToNominator has a default value
        // certificateToRecipient has a default value
        // certificateToRecipientManager has a default value
        // nominationApprovedBy has a default value
        // daysToDelayPoints has a default value
        // program
        //    owned
    }
    
    public PointsCoreValue createPointsCoreValue() {
        PointsCoreValue pointsCoreValue = new PointsCoreValue();
        return pointsCoreValue;
    }
    
    public void populate(PointsCoreValue obj) {
        populate(obj, 0);
    }
    public void populate(PointsCoreValue obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 75));
        // seq is auto sequence
        obj.setDescription(OAString.getRandomString(0, 500));
        // location
        sel = new OASelect(Location.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setLocation((Location) sel.next());
        // pointsRecords
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // program
        sel = new OASelect(Program.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setProgram((Program) sel.next());
    }
    
    public PointsRecord createPointsRecord() {
        PointsRecord pointsRecord = new PointsRecord();
        return pointsRecord;
    }
    
    public void populate(PointsRecord obj) {
        populate(obj, 0);
    }
    public void populate(PointsRecord obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setPoints((int) (Math.random() * 900));
        obj.setToDiscretionary(Math.random() < .5 ? true : false);
        obj.setReason(OAString.getRandomString(0, 500));
        obj.setComment(OAString.getRandomString(0, 500));
        obj.setEvent(OAString.getRandomString(0, 500));
        obj.setCustom1(OAString.getRandomString(0, 500));
        obj.setCustom2(OAString.getRandomString(0, 500));
        obj.setCustom3(OAString.getRandomString(0, 500));
        obj.setEngaged(Math.random() < .5 ? true : false);
        // code
        // email
        Email email = createEmail();
        populate(email);
        obj.setEmail(email);
        // inspireOrder
        // lineItems
        // pointsCoreValue
        sel = new OASelect(PointsCoreValue.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setPointsCoreValue((PointsCoreValue) sel.next());
        // pointsRequest
        //    owned
        // pointsToEmployee
        sel = new OASelect(Employee.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setPointsToEmployee((Employee) sel.next());
        // pointsToProgram
    }
    
    public PointsRequest createPointsRequest() {
        PointsRequest pointsRequest = new PointsRequest();
        return pointsRequest;
    }
    
    public void populate(PointsRequest obj) {
        populate(obj, 0);
    }
    public void populate(PointsRequest obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setApproved(Math.random() < .5 ? true : false);
        obj.setNotes(OAString.getRandomString(0, 500));
        obj.setErrorNotes(OAString.getRandomString(0, 500));
        obj.setFilename(OAString.getRandomString(0, 75));
        obj.setApprovedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setRequestType((int) (Math.random() * 11));
        // approvingEmployee
        sel = new OASelect(Employee.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setApprovingEmployee((Employee) sel.next());
        // approvingUser
        hub = ModelDelegate.getUsers();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setApprovingUser((User) hub.getAt(x));
        }
        // emails
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // lineItems
        // lot
        // pointsApprovals
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            PointsApproval pointsApprovals = createPointsApproval();
            obj.getPointsApprovals().add(pointsApprovals);
            populate(pointsApprovals);
        }
        // pointsAwardLevel
        if (Math.random() < .50) {
            sel = new OASelect(PointsAwardLevel.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setPointsAwardLevel((PointsAwardLevel) sel.next());
        }
        else {
            PointsAwardLevel pointsAwardLevel = createPointsAwardLevel();
            populate(pointsAwardLevel);
            obj.setPointsAwardLevel(pointsAwardLevel);
        }
        // pointsRecords
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            PointsRecord pointsRecords = createPointsRecord();
            obj.getPointsRecords().add(pointsRecords);
            populate(pointsRecords);
        }
        // requestingEmployee
        if (Math.random() < .50) {
            sel = new OASelect(Employee.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setRequestingEmployee((Employee) sel.next());
        }
        else {
            Employee requestingEmployee = createEmployee();
            populate(requestingEmployee);
            obj.setRequestingEmployee(requestingEmployee);
        }
    }
    
    public Product createProduct() {
        Product product = new Product();
        return product;
    }
    
    public void populate(Product obj) {
        populate(obj, 0);
    }
    public void populate(Product obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setVendorCode(OAString.getRandomString(0, 55));
        obj.setAttribute(OAString.getRandomString(0, 35));
        obj.setCost((Math.random() * 100));
        obj.setHandlingCost((Math.random() * 100));
        obj.setShippingCost((Math.random() * 100));
        obj.setTotalCost((Math.random() * 100));
        obj.setDiscontinuedDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setDiscontinuedReason(OAString.getRandomString(0, 75));
        obj.setLastUpdate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setMsrp((Math.random() * 100));
        obj.setStreetValue((Math.random() * 100));
        // item
        //    owned
        // productAudits
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProductAudit productAudits = createProductAudit();
            obj.getProductAudits().add(productAudits);
            populate(productAudits);
        }
    }
    
    public ProductAudit createProductAudit() {
        ProductAudit productAudit = new ProductAudit();
        return productAudit;
    }
    
    public void populate(ProductAudit obj) {
        populate(obj, 0);
    }
    public void populate(ProductAudit obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setCost((Math.random() * 100));
        obj.setHandlingCost((Math.random() * 100));
        obj.setNote(OAString.getRandomString(0, 125));
        // product
        //    owned
    }
    
    public Program createProgram() {
        Program program = new Program();
        return program;
    }
    
    public void populate(Program obj) {
        populate(obj, 0);
    }
    public void populate(Program obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setCode(OAString.getRandomString(0, 12));
        obj.setName(OAString.getRandomString(0, 75));
        obj.setBeginDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setEndDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setAwardBeginDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setUrlName(OAString.getRandomString(0, 95));
        obj.setFromEmailAddress(OAString.getRandomString(0, 75));
        obj.setPointsName(OAString.getRandomString(0, 35));
        // pointValue has a default value
        obj.setUsesInspire(Math.random() < .5 ? true : false);
        obj.setUsesHifive(Math.random() < .5 ? true : false);
        obj.setUsesSurveys(Math.random() < .5 ? true : false);
        obj.setEcardType((int) (Math.random() * 3));
        obj.setHifiveName(OAString.getRandomString(0, 55));
        // birthdayDisplayDays has a default value
        obj.setAnniversaryDisplayDays((int) (Math.random() * 900));
        // seq is auto sequence
        obj.setLoginMessage(OAString.getRandomString(0, 125));
        // employeeAwardExpireDays has a default value
        obj.setCharityGoal((Math.random() * 100));
        obj.setCharityTotal((Math.random() * 100));
        obj.setItemUpcharge((Math.random() * 100));
        obj.setCardUpcharge((Math.random() * 100));
        obj.setCharityUpcharge((Math.random() * 100));
        obj.setCashUpcharge((Math.random() * 100));
        obj.setTestEmail(OAString.getRandomString(0, 125));
        obj.setUseAdvancedReports(Math.random() < .5 ? true : false);
        obj.setPacketInstructions(OAString.getRandomString(0, 500));
        obj.setSsoFailureUrl(OAString.getRandomString(0, 120));
        obj.setSsoCode(OAString.getRandomString(0, 35));
        obj.setSsoRedirectUrl(OAString.getRandomString(0, 120));
        obj.setUsesPoints(Math.random() < .5 ? true : false);
        // pointsBillingType has a default value
        obj.setSsoLogoutUrl(OAString.getRandomString(0, 75));
        // usesPeerToPeer has a default value
        // usesDiscretionary has a default value
        // employeeAwardDaysBefore has a default value
        // companyPaysShipping has a default value
        obj.setUsesNominations(Math.random() < .5 ? true : false);
        // usesManagerToolkit has a default value
        // lotExpireDays has a default value
        // uploadApprovals has a default value
        // indexPageUsesBorders has a default value
        // scrollerShowsLocation has a default value
        // scrollerShowsDate has a default value
        // scrollerShowsYears has a default value
        // scrollerRowsPerSecond has a default value
        // addOnItems
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AddOnItem addOnItems = createAddOnItem();
            obj.getAddOnItems().add(addOnItems);
            populate(addOnItems);
        }
        // anniversaryEmployees
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // announcementDocument
        ProgramDocument announcementDocument = createProgramDocument();
        populate(announcementDocument);
        obj.setAnnouncementDocument(announcementDocument);
        // awardTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            AwardType awardTypes = createAwardType();
            obj.getAwardTypes().add(awardTypes);
            populate(awardTypes);
        }
        // blogDocuments
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramDocument blogDocuments = createProgramDocument();
            obj.getBlogDocuments().add(blogDocuments);
            populate(blogDocuments);
        }
        // cards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(Card.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getCards().add((Card) sel.next());
        }
        // ceoImageStore
        ImageStore ceoImageStore = createImageStore();
        populate(ceoImageStore);
        obj.setCeoImageStore(ceoImageStore);
        // ceoSignatureImageStore
        ImageStore ceoSignatureImageStore = createImageStore();
        populate(ceoSignatureImageStore);
        obj.setCeoSignatureImageStore(ceoSignatureImageStore);
        // charities
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getCharities();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getCharities().add((Charity) hub.getAt(x));
            }
        }
        // company
        hub = ModelDelegate.getCompanies();
        x = (int) (Math.random()*hub.getSize());
        obj.setCompany((Company) hub.getAt(x));
        // countryCode
        hub = ModelDelegate.getCountryCodes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setCountryCode((CountryCode) hub.getAt(x));
        }
        // customData
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            CustomData customData = createCustomData();
            obj.getCustomData().add(customData);
            populate(customData);
        }
        // ecards
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getEcards();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getEcards().add((Ecard) hub.getAt(x));
            }
        }
        // employees
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // imageStores
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ImageStore imageStores = createImageStore();
            obj.getImageStores().add(imageStores);
            populate(imageStores);
        }
        // imagineCard
        sel = new OASelect(Card.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setImagineCard((Card) sel.next());
        // inspireAwardLevels
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireAwardLevel inspireAwardLevels = createInspireAwardLevel();
            obj.getInspireAwardLevels().add(inspireAwardLevels);
            populate(inspireAwardLevels);
        }
        // inspireAwardType
        populate(obj.getInspireAwardType());
        // inspireCoreValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            InspireCoreValue inspireCoreValues = createInspireCoreValue();
            obj.getInspireCoreValues().add(inspireCoreValues);
            populate(inspireCoreValues);
        }
        // lineItems
        // locations
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Location locations = createLocation();
            obj.getLocations().add(locations);
            populate(locations);
        }
        // loginImageSet
        hub = ModelDelegate.getLoginImageSets();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setLoginImageSet((LoginImageSet) hub.getAt(x));
        }
        // logoImageStores
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ImageStore logoImageStores = createImageStore();
            obj.getLogoImageStores().add(logoImageStores);
            populate(logoImageStores);
        }
        // logoStampImageStore
        ImageStore logoStampImageStore = createImageStore();
        populate(logoStampImageStore);
        obj.setLogoStampImageStore(logoStampImageStore);
        // pageTheme
        hub = ModelDelegate.getPageThemes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setPageTheme((PageTheme) hub.getAt(x));
        }
        // pointsAwardLevels
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsAwardLevel.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPointsAwardLevels().add((PointsAwardLevel) sel.next());
            }
            else {
                PointsAwardLevel pointsAwardLevels = createPointsAwardLevel();
                obj.getPointsAwardLevels().add(pointsAwardLevels);
                populate(pointsAwardLevels);
            }
        }
        // pointsConfiguration
        PointsConfiguration pointsConfiguration = createPointsConfiguration();
        populate(pointsConfiguration);
        obj.setPointsConfiguration(pointsConfiguration);
        // pointsCoreValues
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(PointsCoreValue.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPointsCoreValues().add((PointsCoreValue) sel.next());
            }
            else {
                PointsCoreValue pointsCoreValues = createPointsCoreValue();
                obj.getPointsCoreValues().add(pointsCoreValues);
                populate(pointsCoreValues);
            }
        }
        // pointsFromRecord
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
        }
        // programEmailTypes
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramEmailType programEmailTypes = createProgramEmailType();
            obj.getProgramEmailTypes().add(programEmailTypes);
            populate(programEmailTypes);
        }
        // programEvents
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramEvent programEvents = createProgramEvent();
            obj.getProgramEvents().add(programEvents);
            populate(programEvents);
        }
        // programFaqs
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramFaq programFaqs = createProgramFaq();
            obj.getProgramFaqs().add(programFaqs);
            populate(programFaqs);
        }
        // programPageGroups
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramPageGroup programPageGroups = createProgramPageGroup();
            obj.getProgramPageGroups().add(programPageGroups);
            populate(programPageGroups);
        }
        // programPageInfos
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            ProgramPageInfo programPageInfos = createProgramPageInfo();
            obj.getProgramPageInfos().add(programPageInfos);
            populate(programPageInfos);
        }
        // recentInspireRecipients
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(InspireRecipient.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getRecentInspireRecipients().add((InspireRecipient) sel.next());
            }
            else {
                InspireRecipient recentInspireRecipients = createInspireRecipient();
                obj.getRecentInspireRecipients().add(recentInspireRecipients);
                populate(recentInspireRecipients);
            }
        }
        // widgets
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            hub = ModelDelegate.getWidgets();
            if (Math.random() < .50) {
                x = (int) (Math.random()*hub.getSize());
                obj.getWidgets().add((Widget) hub.getAt(x));
            }
        }
    }
    
    public ProgramDocument createProgramDocument() {
        ProgramDocument programDocument = new ProgramDocument();
        return programDocument;
    }
    
    public void populate(ProgramDocument obj) {
        populate(obj, 0);
    }
    public void populate(ProgramDocument obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        obj.setText(OAString.getRandomString(0, 500));
    }
    
    public ProgramEmailType createProgramEmailType() {
        ProgramEmailType programEmailType = new ProgramEmailType();
        return programEmailType;
    }
    
    public void populate(ProgramEmailType obj) {
        populate(obj, 0);
    }
    public void populate(ProgramEmailType obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setAllowAutomaticSend(Math.random() < .5 ? true : false);
        obj.setSubject(OAString.getRandomString(0, 150));
        obj.setText(OAString.getRandomString(0, 500));
        // emailType
        hub = ModelDelegate.getEmailTypes();
        if (Math.random() < .50) {
            x = (int) (Math.random()*hub.getSize());
            obj.setEmailType((EmailType) hub.getAt(x));
        }
        // location
        sel = new OASelect(Location.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        // program
        sel = new OASelect(Program.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setProgram((Program) sel.next());
    }
    
    public ProgramEvent createProgramEvent() {
        ProgramEvent programEvent = new ProgramEvent();
        return programEvent;
    }
    
    public void populate(ProgramEvent obj) {
        populate(obj, 0);
    }
    public void populate(ProgramEvent obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setBeginDateTime((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setEndDateTime((new OADateTime()).addDays((int) (Math.random() * 1000)));
        obj.setName(OAString.getRandomString(0, 175));
        obj.setText(OAString.getRandomString(0, 500));
        // location
        //    owned
        // program
        //    owned
    }
    
    public ProgramFaq createProgramFaq() {
        ProgramFaq programFaq = new ProgramFaq();
        return programFaq;
    }
    
    public void populate(ProgramFaq obj) {
        populate(obj, 0);
    }
    public void populate(ProgramFaq obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        obj.setQuestion(OAString.getRandomString(0, 150));
        obj.setAnswer(OAString.getRandomString(0, 500));
        obj.setManagerOnly(Math.random() < .5 ? true : false);
        // program
        //    owned
    }
    
    public ProgramPageGroup createProgramPageGroup() {
        ProgramPageGroup programPageGroup = new ProgramPageGroup();
        return programPageGroup;
    }
    
    public void populate(ProgramPageGroup obj) {
        populate(obj, 0);
    }
    public void populate(ProgramPageGroup obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // seq is auto sequence
        // pageGroup
        hub = ModelDelegate.getPageGroups();
        x = (int) (Math.random()*hub.getSize());
        obj.setPageGroup((PageGroup) hub.getAt(x));
        // program
        //    owned
    }
    
    public ProgramPageInfo createProgramPageInfo() {
        ProgramPageInfo programPageInfo = new ProgramPageInfo();
        return programPageInfo;
    }
    
    public void populate(ProgramPageInfo obj) {
        populate(obj, 0);
    }
    public void populate(ProgramPageInfo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        // imageStore
        ImageStore imageStore = createImageStore();
        populate(imageStore);
        obj.setImageStore(imageStore);
        // pageInfo
        sel = new OASelect(PageInfo.class);
        sel.select();
        x = sel.getCount();
        x = (int) (Math.random() * x);
        for (int i=0; i<x; i++) sel.next();
        obj.setPageInfo((PageInfo) sel.next());
        // program
        //    owned
        // programDocument
        ProgramDocument programDocument = createProgramDocument();
        populate(programDocument);
        obj.setProgramDocument(programDocument);
    }
    
    public Report createReport() {
        Report report = new Report();
        return report;
    }
    
    public void populate(Report obj) {
        populate(obj, 0);
    }
    public void populate(Report obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setCode(OAString.getRandomString(0, 20));
        obj.setName(OAString.getRandomString(0, 35));
        obj.setOrientation((int) (Math.random() * 3));
        obj.setTemplate(OAString.getRandomString(0, 500));
        // parentReport
        //    owned
        // reportClass
        //    owned
        // reports
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                Report reports = createReport();
                obj.getReports().add(reports);
                populate(reports, level+1);
            }
        }
    }
    
    public ReportClass createReportClass() {
        ReportClass reportClass = new ReportClass();
        return reportClass;
    }
    
    public void populate(ReportClass obj) {
        populate(obj, 0);
    }
    public void populate(ReportClass obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setName(OAString.getRandomString(0, 25));
        obj.setClassName(OAString.getRandomString(0, 50));
        // reports
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            Report reports = createReport();
            obj.getReports().add(reports);
            populate(reports);
        }
    }
    
    public Section createSection() {
        Section section = new Section();
        return section;
    }
    
    public void populate(Section obj) {
        populate(obj, 0);
    }
    public void populate(Section obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // seq is auto sequence
        obj.setName(OAString.getRandomString(0, 75));
        // catalog
        //    owned
        // items
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Item.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getItems().add((Item) sel.next());
            }
            else {
                Item items = createItem();
                obj.getItems().add(items);
                populate(items);
            }
        }
        // parentSection
        //    owned
        // sections
        if (level < 3) {
            tot = ((int) (Math.random()*3));
            for (int cnt=0; cnt<tot; cnt++) {
                Section sections = createSection();
                obj.getSections().add(sections);
                populate(sections, level+1);
            }
        }
    }
    
    public ShipTo createShipTo() {
        ShipTo shipTo = new ShipTo();
        return shipTo;
    }
    
    public void populate(ShipTo obj) {
        populate(obj, 0);
    }
    public void populate(ShipTo obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 125));
        obj.setNote(OAString.getRandomString(0, 254));
        obj.setEmail(OAString.getRandomString(0, 125));
        obj.setPhoneNumber(OAString.getRandomString(0, 50));
        // address
        populate(obj.getAddress());
    }
    
    
    public User createUser() {
        User user = new User();
        return user;
    }
    
    public void populate(User obj) {
        populate(obj, 0);
    }
    public void populate(User obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setFirstName(OAString.getRandomString(0, 75));
        obj.setLastName(OAString.getRandomString(0, 75));
        obj.setLoginId(OAString.getRandomString(0, 75));
        obj.setPassword(OAString.getRandomString(0, 50));
        obj.setInactiveDate((OADate)(new OADate()).addDays((int) (Math.random() * 1000)));
        obj.setAdmin(Math.random() < .5 ? true : false);
        obj.setEmail(OAString.getRandomString(0, 125));
        obj.setLoggedIn(Math.random() < .5 ? true : false);
        obj.setLocation(OAString.getRandomString(0, 45));
        obj.setEditProcessed(Math.random() < .5 ? true : false);
        // approvedPointsRequests
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            sel = new OASelect(PointsRequest.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.getApprovedPointsRequests().add((PointsRequest) sel.next());
        }
    }
    
    public Value createValue() {
        Value value = new Value();
        return value;
    }
    
    public void populate(Value obj) {
        populate(obj, 0);
    }
    public void populate(Value obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        obj.setValue((Math.random() * 100));
        obj.setName(OAString.getRandomString(0, 55));
        // inspireAwardCardOrder
        if (Math.random() < .50) {
            sel = new OASelect(AwardCardOrder.class);
            sel.select();
            x = sel.getCount();
            x = (int) (Math.random() * x);
            for (int i=0; i<x; i++) sel.next();
            obj.setInspireAwardCardOrder((AwardCardOrder) sel.next());
        }
        else {
            AwardCardOrder inspireAwardCardOrder = createAwardCardOrder();
            populate(inspireAwardCardOrder);
            obj.setInspireAwardCardOrder(inspireAwardCardOrder);
        }
    }
    
    public Widget createWidget() {
        Widget widget = new Widget();
        return widget;
    }
    
    public void populate(Widget obj) {
        populate(obj, 0);
    }
    public void populate(Widget obj, int level) {
        int x;
        int tot;
        // id is auto assigned
        // created has a default value
        obj.setName(OAString.getRandomString(0, 75));
        obj.setLink(OAString.getRandomString(0, 175));
        // programs
        tot = ((int) (Math.random()*8));
        for (int cnt=0; cnt<tot; cnt++) {
            if (Math.random() < .50) {
                sel = new OASelect(Program.class);
                sel.select();
                x = sel.getCount();
                x = (int) (Math.random() * x);
                for (int i=0; i<x; i++) sel.next();
                obj.getPrograms().add((Program) sel.next());
            }
            else {
                Program programs = createProgram();
                obj.getPrograms().add(programs);
                populate(programs);
            }
        }
    }
    
    public void createSamples() {
        int x;
        // lookups
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            AddressType addressType = createAddressType();
            populate(addressType);
            ModelDelegate.getAddressTypes().add(addressType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            CardVendor cardVendor = createCardVendor();
            populate(cardVendor);
            ModelDelegate.getCardVendors().add(cardVendor);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Catalog catalog = createCatalog();
            populate(catalog);
            ModelDelegate.getCatalogs().add(catalog);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Charity charity = createCharity();
            populate(charity);
            ModelDelegate.getCharities().add(charity);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Company company = createCompany();
            populate(company);
            ModelDelegate.getCompanies().add(company);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            CountryCode countryCode = createCountryCode();
            populate(countryCode);
            ModelDelegate.getCountryCodes().add(countryCode);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            CurrencyType currencyType = createCurrencyType();
            populate(currencyType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Ecard ecard = createEcard();
            populate(ecard);
            ModelDelegate.getEcards().add(ecard);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            EcardCategory ecardCategory = createEcardCategory();
            populate(ecardCategory);
            ModelDelegate.getEcardCategories().add(ecardCategory);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            EmailType emailType = createEmailType();
            populate(emailType);
            ModelDelegate.getEmailTypes().add(emailType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            EmployeeType employeeType = createEmployeeType();
            populate(employeeType);
            ModelDelegate.getEmployeeTypes().add(employeeType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ItemCategory itemCategory = createItemCategory();
            populate(itemCategory);
            ModelDelegate.getItemCategories().add(itemCategory);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ItemType itemType = createItemType();
            populate(itemType);
            ModelDelegate.getItemTypes().add(itemType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ItemVendor itemVendor = createItemVendor();
            populate(itemVendor);
            ModelDelegate.getItemVendors().add(itemVendor);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            LoginImageSet loginImageSet = createLoginImageSet();
            populate(loginImageSet);
            ModelDelegate.getLoginImageSets().add(loginImageSet);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            MerchantCategory merchantCategory = createMerchantCategory();
            populate(merchantCategory);
            ModelDelegate.getMerchantCategories().add(merchantCategory);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Page page = createPage();
            populate(page);
            ModelDelegate.getPages().add(page);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            PageGroup pageGroup = createPageGroup();
            populate(pageGroup);
            ModelDelegate.getPageGroups().add(pageGroup);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            PageTheme pageTheme = createPageTheme();
            populate(pageTheme);
            ModelDelegate.getPageThemes().add(pageTheme);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            PhoneType phoneType = createPhoneType();
            populate(phoneType);
            ModelDelegate.getPhoneTypes().add(phoneType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ReportClass reportClass = createReportClass();
            populate(reportClass);
            ModelDelegate.getReportClasses().add(reportClass);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            User user = createUser();
            populate(user);
            ModelDelegate.getUsers().add(user);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Value value = createValue();
            populate(value);
            ModelDelegate.getValues().add(value);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Widget widget = createWidget();
            populate(widget);
            ModelDelegate.getWidgets().add(widget);
        }
        
        // others for creating required props
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Item item = createItem();
            populate(item);
            hubItem.add(item);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Employee employee = createEmployee();
            populate(employee);
            hubEmployee.add(employee);
        }
        
        // others
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            AddOnItem addOnItem = createAddOnItem();
            populate(addOnItem);
            hubAddOnItem.add(addOnItem);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            CashstarOrder cashstarOrder = createCashstarOrder();
            populate(cashstarOrder);
            hubCashstarOrder.add(cashstarOrder);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Email email = createEmail();
            populate(email);
            hubEmail.add(email);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            HindaOrder hindaOrder = createHindaOrder();
            populate(hindaOrder);
            hubHindaOrder.add(hindaOrder);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Merchant merchant = createMerchant();
            populate(merchant);
            hubMerchant.add(merchant);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            OrderTracking orderTracking = createOrderTracking();
            populate(orderTracking);
            hubOrderTracking.add(orderTracking);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            PointsAwardLevel pointsAwardLevel = createPointsAwardLevel();
            populate(pointsAwardLevel);
            hubPointsAwardLevel.add(pointsAwardLevel);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            PointsCoreValue pointsCoreValue = createPointsCoreValue();
            populate(pointsCoreValue);
            hubPointsCoreValue.add(pointsCoreValue);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            PointsRequest pointsRequest = createPointsRequest();
            populate(pointsRequest);
            hubPointsRequest.add(pointsRequest);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            Program program = createProgram();
            populate(program);
            hubProgram.add(program);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ProgramDocument programDocument = createProgramDocument();
            populate(programDocument);
            hubProgramDocument.add(programDocument);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ProgramEmailType programEmailType = createProgramEmailType();
            populate(programEmailType);
            hubProgramEmailType.add(programEmailType);
        }
        x = 5 + ((int) (Math.random()*20));
        for (int i=0; i<x; i++) {
            ShipTo shipTo = createShipTo();
            populate(shipTo);
            hubShipTo.add(shipTo);
        }
    }
    
    // Hubs to hold sample data that is not in ModelDelegate
    private Hub<Item> hubItem = new Hub<Item>(Item.class);
    private Hub<Employee> hubEmployee = new Hub<Employee>(Employee.class);
    private Hub<AddOnItem> hubAddOnItem = new Hub<AddOnItem>(AddOnItem.class);
    private Hub<CashstarOrder> hubCashstarOrder = new Hub<CashstarOrder>(CashstarOrder.class);
    private Hub<Email> hubEmail = new Hub<Email>(Email.class);
    private Hub<HindaOrder> hubHindaOrder = new Hub<HindaOrder>(HindaOrder.class);
    private Hub<Merchant> hubMerchant = new Hub<Merchant>(Merchant.class);
    private Hub<OrderTracking> hubOrderTracking = new Hub<OrderTracking>(OrderTracking.class);
    private Hub<PointsAwardLevel> hubPointsAwardLevel = new Hub<PointsAwardLevel>(PointsAwardLevel.class);
    private Hub<PointsCoreValue> hubPointsCoreValue = new Hub<PointsCoreValue>(PointsCoreValue.class);
    private Hub<PointsRequest> hubPointsRequest = new Hub<PointsRequest>(PointsRequest.class);
    private Hub<Program> hubProgram = new Hub<Program>(Program.class);
    private Hub<ProgramDocument> hubProgramDocument = new Hub<ProgramDocument>(ProgramDocument.class);
    private Hub<ProgramEmailType> hubProgramEmailType = new Hub<ProgramEmailType>(ProgramEmailType.class);
    private Hub<ShipTo> hubShipTo = new Hub<ShipTo>(ShipTo.class);
    
    public static void main(String[] args) {
        DataGenerator dg = new DataGenerator();
        dg.createSamples();
        System.out.println("createSamples is done");
    }
}
 

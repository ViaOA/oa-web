// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "ar",
    displayName = "Answer Result",
    displayProperty = "answerText",
    sortProperty = "questionResult"
)
@OATable(
    indexes = {
        @OAIndex(name = "AnswerResultCurrentAnswer", columns = { @OAIndexColumn(name = "CurrentAnswerId") }), 
        @OAIndex(name = "AnswerResultQuestionResult", columns = { @OAIndexColumn(name = "QuestionResultId") })
    }
)
public class AnswerResult extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_AnswerText = "AnswerText";
    public static final String P_AnswerText = "AnswerText";
    public static final String PROPERTY_AnswerValue = "AnswerValue";
    public static final String P_AnswerValue = "AnswerValue";
     
     
    public static final String PROPERTY_CurrentAnswer = "CurrentAnswer";
    public static final String P_CurrentAnswer = "CurrentAnswer";
    public static final String PROPERTY_QuestionResult = "QuestionResult";
    public static final String P_QuestionResult = "QuestionResult";
     
    protected int id;
    protected String answerText;
    protected int answerValue;
     
    // Links to other objects.
    protected transient Answer currentAnswer;
    protected transient QuestionResult questionResult;
     
    public AnswerResult() {
    }
     
    public AnswerResult(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Answer Text", maxLength = 120, displayLength = 40)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getAnswerText() {
        return answerText;
    }
    
    public void setAnswerText(String newValue) {
        fireBeforePropertyChange(P_AnswerText, this.answerText, newValue);
        String old = answerText;
        this.answerText = newValue;
        firePropertyChange(P_AnswerText, old, this.answerText);
    }
    @OAProperty(displayName = "Answer Value", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getAnswerValue() {
        return answerValue;
    }
    
    public void setAnswerValue(int newValue) {
        fireBeforePropertyChange(P_AnswerValue, this.answerValue, newValue);
        int old = answerValue;
        this.answerValue = newValue;
        firePropertyChange(P_AnswerValue, old, this.answerValue);
    }
    @OAOne(
        displayName = "Current Answer", 
        reverseName = Answer.P_SavedAnswerResults
    )
    @OAFkey(columns = {"CurrentAnswerId"})
    public Answer getCurrentAnswer() {
        if (currentAnswer == null) {
            currentAnswer = (Answer) getObject(P_CurrentAnswer);
        }
        return currentAnswer;
    }
    
    public void setCurrentAnswer(Answer newValue) {
        fireBeforePropertyChange(P_CurrentAnswer, this.currentAnswer, newValue);
        Answer old = this.currentAnswer;
        this.currentAnswer = newValue;
        firePropertyChange(P_CurrentAnswer, old, this.currentAnswer);
    }
    
    @OAOne(
        displayName = "Question Result", 
        reverseName = QuestionResult.P_AnswerResults, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"QuestionResultId"})
    public QuestionResult getQuestionResult() {
        if (questionResult == null) {
            questionResult = (QuestionResult) getObject(P_QuestionResult);
        }
        return questionResult;
    }
    
    public void setQuestionResult(QuestionResult newValue) {
        fireBeforePropertyChange(P_QuestionResult, this.questionResult, newValue);
        QuestionResult old = this.questionResult;
        this.questionResult = newValue;
        firePropertyChange(P_QuestionResult, old, this.questionResult);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.answerText = rs.getString(2);
        this.answerValue = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, AnswerResult.P_AnswerValue, true);
        }
        int currentAnswerFkey = rs.getInt(4);
        if (!rs.wasNull() && currentAnswerFkey > 0) {
            setProperty(P_CurrentAnswer, new OAObjectKey(currentAnswerFkey));
        }
        int questionResultFkey = rs.getInt(5);
        if (!rs.wasNull() && questionResultFkey > 0) {
            setProperty(P_QuestionResult, new OAObjectKey(questionResultFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

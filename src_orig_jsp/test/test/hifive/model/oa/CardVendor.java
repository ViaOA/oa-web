// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "cv",
    displayName = "Card Vendor",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "name"
)
@OATable(
)
public class CardVendor extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_DigitalCard = "DigitalCard";
    public static final String P_DigitalCard = "DigitalCard";
    public static final String PROPERTY_TraditionalCard = "TraditionalCard";
    public static final String P_TraditionalCard = "TraditionalCard";
    public static final String PROPERTY_CelebrateCard = "CelebrateCard";
    public static final String P_CelebrateCard = "CelebrateCard";
     
     
    public static final String PROPERTY_Cards = "Cards";
    public static final String P_Cards = "Cards";
     
    protected int id;
    protected OADate created;
    protected String name;
    protected boolean digitalCard;
    protected boolean traditionalCard;
    protected boolean celebrateCard;
     
    // Links to other objects.
    protected transient Hub<Card> hubCards;
     
    public CardVendor() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public CardVendor(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 75, displayLength = 25, columnLength = 22)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "Digital", displayLength = 5, columnLength = 9)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getDigitalCard() {
        return digitalCard;
    }
    
    public void setDigitalCard(boolean newValue) {
        fireBeforePropertyChange(P_DigitalCard, this.digitalCard, newValue);
        boolean old = digitalCard;
        this.digitalCard = newValue;
        firePropertyChange(P_DigitalCard, old, this.digitalCard);
    }
    @OAProperty(displayName = "Traditional", displayLength = 5, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getTraditionalCard() {
        return traditionalCard;
    }
    
    public void setTraditionalCard(boolean newValue) {
        fireBeforePropertyChange(P_TraditionalCard, this.traditionalCard, newValue);
        boolean old = traditionalCard;
        this.traditionalCard = newValue;
        firePropertyChange(P_TraditionalCard, old, this.traditionalCard);
    }
    @OAProperty(displayName = "Celebrate", displayLength = 5, columnLength = 12)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getCelebrateCard() {
        return celebrateCard;
    }
    
    public void setCelebrateCard(boolean newValue) {
        fireBeforePropertyChange(P_CelebrateCard, this.celebrateCard, newValue);
        boolean old = celebrateCard;
        this.celebrateCard = newValue;
        firePropertyChange(P_CelebrateCard, old, this.celebrateCard);
    }
    @OAMany(
        toClass = Card.class, 
        owner = true, 
        reverseName = Card.P_CardVendor, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Card> getCards() {
        if (hubCards == null) {
            hubCards = (Hub<Card>) getHub(P_Cards);
        }
        return hubCards;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.name = rs.getString(3);
        this.digitalCard = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CardVendor.P_DigitalCard, true);
        }
        this.traditionalCard = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CardVendor.P_TraditionalCard, true);
        }
        this.celebrateCard = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CardVendor.P_CelebrateCard, true);
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

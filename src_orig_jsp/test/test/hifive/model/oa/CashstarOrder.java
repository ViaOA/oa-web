// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "co",
    displayName = "Cashstar Order",
    displayProperty = "orderNumber"
)
@OATable(
    indexes = {
        @OAIndex(name = "CashstarOrderAwardCardOrder", columns = { @OAIndexColumn(name = "AwardCardOrderId") })
    }
)
public class CashstarOrder extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_OrderNumber = "OrderNumber";
    public static final String P_OrderNumber = "OrderNumber";
    public static final String PROPERTY_CardStatus = "CardStatus";
    public static final String P_CardStatus = "CardStatus";
    public static final String PROPERTY_EgcCode = "EgcCode";
    public static final String P_EgcCode = "EgcCode";
    public static final String PROPERTY_EgcNumber = "EgcNumber";
    public static final String P_EgcNumber = "EgcNumber";
    public static final String PROPERTY_CardUrl = "CardUrl";
    public static final String P_CardUrl = "CardUrl";
    public static final String PROPERTY_BalanaceLastUpdated = "BalanaceLastUpdated";
    public static final String P_BalanaceLastUpdated = "BalanaceLastUpdated";
    public static final String PROPERTY_ChallengeType = "ChallengeType";
    public static final String P_ChallengeType = "ChallengeType";
    public static final String PROPERTY_Currency = "Currency";
    public static final String P_Currency = "Currency";
    public static final String PROPERTY_Active = "Active";
    public static final String P_Active = "Active";
    public static final String PROPERTY_FaceplateCode = "FaceplateCode";
    public static final String P_FaceplateCode = "FaceplateCode";
    public static final String PROPERTY_Viewed = "Viewed";
    public static final String P_Viewed = "Viewed";
    public static final String PROPERTY_ChallengeDescription = "ChallengeDescription";
    public static final String P_ChallengeDescription = "ChallengeDescription";
    public static final String PROPERTY_Challenge = "Challenge";
    public static final String P_Challenge = "Challenge";
    public static final String PROPERTY_FirstViewed = "FirstViewed";
    public static final String P_FirstViewed = "FirstViewed";
    public static final String PROPERTY_AuditNumber = "AuditNumber";
    public static final String P_AuditNumber = "AuditNumber";
    public static final String PROPERTY_TransactionId = "TransactionId";
    public static final String P_TransactionId = "TransactionId";
    public static final String PROPERTY_InitialBalance = "InitialBalance";
    public static final String P_InitialBalance = "InitialBalance";
    public static final String PROPERTY_CurrentBalance = "CurrentBalance";
    public static final String P_CurrentBalance = "CurrentBalance";
     
     
    public static final String PROPERTY_AwardCardOrder = "AwardCardOrder";
    public static final String P_AwardCardOrder = "AwardCardOrder";
     
    protected int id;
    protected String orderNumber;
    protected String cardStatus;
    protected String egcCode;
    protected String egcNumber;
    protected String cardUrl;
    protected OADateTime balanaceLastUpdated;
    protected String challengeType;
    protected String currency;
    protected boolean active;
    protected String faceplateCode;
    protected boolean viewed;
    protected String challengeDescription;
    protected String challenge;
    protected OADateTime firstViewed;
    protected String auditNumber;
    protected String transactionId;
    protected double initialBalance;
    protected double currentBalance;
     
    // Links to other objects.
    protected transient AwardCardOrder awardCardOrder;
     
    public CashstarOrder() {
    }
     
    public CashstarOrder(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Order Number", description = "order numbers assigned by Cashstar", maxLength = 25, displayLength = 25)
    @OAColumn(name = "order_number", maxLength = 25)
    /**
      order numbers assigned by Cashstar
    */
    public String getOrderNumber() {
        return orderNumber;
    }
    
    public void setOrderNumber(String newValue) {
        fireBeforePropertyChange(P_OrderNumber, this.orderNumber, newValue);
        String old = orderNumber;
        this.orderNumber = newValue;
        firePropertyChange(P_OrderNumber, old, this.orderNumber);
    }
    @OAProperty(displayName = "Card Status", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getCardStatus() {
        return cardStatus;
    }
    
    public void setCardStatus(String newValue) {
        fireBeforePropertyChange(P_CardStatus, this.cardStatus, newValue);
        String old = cardStatus;
        this.cardStatus = newValue;
        firePropertyChange(P_CardStatus, old, this.cardStatus);
    }
    @OAProperty(displayName = "Egc Code", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getEgcCode() {
        return egcCode;
    }
    
    public void setEgcCode(String newValue) {
        fireBeforePropertyChange(P_EgcCode, this.egcCode, newValue);
        String old = egcCode;
        this.egcCode = newValue;
        firePropertyChange(P_EgcCode, old, this.egcCode);
    }
    @OAProperty(displayName = "Egc Number", maxLength = 50, displayLength = 40)
    @OAColumn(maxLength = 50)
    public String getEgcNumber() {
        return egcNumber;
    }
    
    public void setEgcNumber(String newValue) {
        fireBeforePropertyChange(P_EgcNumber, this.egcNumber, newValue);
        String old = egcNumber;
        this.egcNumber = newValue;
        firePropertyChange(P_EgcNumber, old, this.egcNumber);
    }
    @OAProperty(displayName = "Card Url", maxLength = 200, displayLength = 40)
    @OAColumn(maxLength = 200)
    public String getCardUrl() {
        return cardUrl;
    }
    
    public void setCardUrl(String newValue) {
        fireBeforePropertyChange(P_CardUrl, this.cardUrl, newValue);
        String old = cardUrl;
        this.cardUrl = newValue;
        firePropertyChange(P_CardUrl, old, this.cardUrl);
    }
    @OAProperty(displayName = "Balanace Last Updated", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getBalanaceLastUpdated() {
        return balanaceLastUpdated;
    }
    
    public void setBalanaceLastUpdated(OADateTime newValue) {
        fireBeforePropertyChange(P_BalanaceLastUpdated, this.balanaceLastUpdated, newValue);
        OADateTime old = balanaceLastUpdated;
        this.balanaceLastUpdated = newValue;
        firePropertyChange(P_BalanaceLastUpdated, old, this.balanaceLastUpdated);
    }
    @OAProperty(displayName = "Challenge Type", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getChallengeType() {
        return challengeType;
    }
    
    public void setChallengeType(String newValue) {
        fireBeforePropertyChange(P_ChallengeType, this.challengeType, newValue);
        String old = challengeType;
        this.challengeType = newValue;
        firePropertyChange(P_ChallengeType, old, this.challengeType);
    }
    @OAProperty(maxLength = 20, displayLength = 20)
    @OAColumn(maxLength = 20)
    public String getCurrency() {
        return currency;
    }
    
    public void setCurrency(String newValue) {
        fireBeforePropertyChange(P_Currency, this.currency, newValue);
        String old = currency;
        this.currency = newValue;
        firePropertyChange(P_Currency, old, this.currency);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getActive() {
        return active;
    }
    
    public void setActive(boolean newValue) {
        fireBeforePropertyChange(P_Active, this.active, newValue);
        boolean old = active;
        this.active = newValue;
        firePropertyChange(P_Active, old, this.active);
    }
    @OAProperty(displayName = "Faceplate Code", maxLength = 15, displayLength = 15)
    @OAColumn(maxLength = 15)
    public String getFaceplateCode() {
        return faceplateCode;
    }
    
    public void setFaceplateCode(String newValue) {
        fireBeforePropertyChange(P_FaceplateCode, this.faceplateCode, newValue);
        String old = faceplateCode;
        this.faceplateCode = newValue;
        firePropertyChange(P_FaceplateCode, old, this.faceplateCode);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getViewed() {
        return viewed;
    }
    
    public void setViewed(boolean newValue) {
        fireBeforePropertyChange(P_Viewed, this.viewed, newValue);
        boolean old = viewed;
        this.viewed = newValue;
        firePropertyChange(P_Viewed, old, this.viewed);
    }
    @OAProperty(displayName = "Challenge Description", maxLength = 80, displayLength = 40)
    @OAColumn(maxLength = 80)
    public String getChallengeDescription() {
        return challengeDescription;
    }
    
    public void setChallengeDescription(String newValue) {
        fireBeforePropertyChange(P_ChallengeDescription, this.challengeDescription, newValue);
        String old = challengeDescription;
        this.challengeDescription = newValue;
        firePropertyChange(P_ChallengeDescription, old, this.challengeDescription);
    }
    @OAProperty(maxLength = 50, displayLength = 40)
    @OAColumn(maxLength = 50)
    public String getChallenge() {
        return challenge;
    }
    
    public void setChallenge(String newValue) {
        fireBeforePropertyChange(P_Challenge, this.challenge, newValue);
        String old = challenge;
        this.challenge = newValue;
        firePropertyChange(P_Challenge, old, this.challenge);
    }
    @OAProperty(displayName = "First Viewed", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getFirstViewed() {
        return firstViewed;
    }
    
    public void setFirstViewed(OADateTime newValue) {
        fireBeforePropertyChange(P_FirstViewed, this.firstViewed, newValue);
        OADateTime old = firstViewed;
        this.firstViewed = newValue;
        firePropertyChange(P_FirstViewed, old, this.firstViewed);
    }
    @OAProperty(displayName = "Audit Number", maxLength = 50, displayLength = 40)
    @OAColumn(maxLength = 50)
    public String getAuditNumber() {
        return auditNumber;
    }
    
    public void setAuditNumber(String newValue) {
        fireBeforePropertyChange(P_AuditNumber, this.auditNumber, newValue);
        String old = auditNumber;
        this.auditNumber = newValue;
        firePropertyChange(P_AuditNumber, old, this.auditNumber);
    }
    @OAProperty(displayName = "Transaction Id", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getTransactionId() {
        return transactionId;
    }
    
    public void setTransactionId(String newValue) {
        fireBeforePropertyChange(P_TransactionId, this.transactionId, newValue);
        String old = transactionId;
        this.transactionId = newValue;
        firePropertyChange(P_TransactionId, old, this.transactionId);
    }
    @OAProperty(displayName = "Initial Balance", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getInitialBalance() {
        return initialBalance;
    }
    
    public void setInitialBalance(double newValue) {
        fireBeforePropertyChange(P_InitialBalance, this.initialBalance, newValue);
        double old = initialBalance;
        this.initialBalance = newValue;
        firePropertyChange(P_InitialBalance, old, this.initialBalance);
    }
    @OAProperty(displayName = "Current Balance", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCurrentBalance() {
        return currentBalance;
    }
    
    public void setCurrentBalance(double newValue) {
        fireBeforePropertyChange(P_CurrentBalance, this.currentBalance, newValue);
        double old = currentBalance;
        this.currentBalance = newValue;
        firePropertyChange(P_CurrentBalance, old, this.currentBalance);
    }
    @OAOne(
        displayName = "Award Card Order", 
        reverseName = AwardCardOrder.P_CashstarOrder
    )
    @OAFkey(columns = {"AwardCardOrderId"})
    public AwardCardOrder getAwardCardOrder() {
        if (awardCardOrder == null) {
            awardCardOrder = (AwardCardOrder) getObject(P_AwardCardOrder);
        }
        return awardCardOrder;
    }
    
    public void setAwardCardOrder(AwardCardOrder newValue) {
        fireBeforePropertyChange(P_AwardCardOrder, this.awardCardOrder, newValue);
        AwardCardOrder old = this.awardCardOrder;
        this.awardCardOrder = newValue;
        firePropertyChange(P_AwardCardOrder, old, this.awardCardOrder);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.orderNumber = rs.getString(2);
        this.cardStatus = rs.getString(3);
        this.egcCode = rs.getString(4);
        this.egcNumber = rs.getString(5);
        this.cardUrl = rs.getString(6);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.balanaceLastUpdated = new OADateTime(timestamp);
        this.challengeType = rs.getString(8);
        this.currency = rs.getString(9);
        this.active = rs.getBoolean(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CashstarOrder.P_Active, true);
        }
        this.faceplateCode = rs.getString(11);
        this.viewed = rs.getBoolean(12);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CashstarOrder.P_Viewed, true);
        }
        this.challengeDescription = rs.getString(13);
        this.challenge = rs.getString(14);
        timestamp = rs.getTimestamp(15);
        if (timestamp != null) this.firstViewed = new OADateTime(timestamp);
        this.auditNumber = rs.getString(16);
        this.transactionId = rs.getString(17);
        this.initialBalance = (double) rs.getDouble(18);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CashstarOrder.P_InitialBalance, true);
        }
        this.currentBalance = (double) rs.getDouble(19);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, CashstarOrder.P_CurrentBalance, true);
        }
        int awardCardOrderFkey = rs.getInt(20);
        if (!rs.wasNull() && awardCardOrderFkey > 0) {
            setProperty(P_AwardCardOrder, new OAObjectKey(awardCardOrderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 20) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ema",
    displayName = "Email",
    displayProperty = "programEmailType",
    filterClasses = {EmailOpenFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "EmailSentDateTime", columns = {@OAIndexColumn(name = "SentDateTime")}),
        @OAIndex(name = "EmailEmployeeAwardShipped", columns = { @OAIndexColumn(name = "EmployeeAwardShippedId") }), 
        @OAIndex(name = "EmailInspireApprovalReminder", columns = { @OAIndexColumn(name = "InspireApprovalReminderId") }), 
        @OAIndex(name = "EmailInspireOrder", columns = { @OAIndexColumn(name = "InspireOrderId") }), 
        @OAIndex(name = "EmailPointsRequest", columns = { @OAIndexColumn(name = "PointsRequestId") })
    }
)
public class Email extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_FromEmail = "FromEmail";
    public static final String P_FromEmail = "FromEmail";
    public static final String PROPERTY_ToEmail = "ToEmail";
    public static final String P_ToEmail = "ToEmail";
    public static final String PROPERTY_CcEmail = "CcEmail";
    public static final String P_CcEmail = "CcEmail";
    public static final String PROPERTY_Subject = "Subject";
    public static final String P_Subject = "Subject";
    public static final String PROPERTY_SentDateTime = "SentDateTime";
    public static final String P_SentDateTime = "SentDateTime";
    public static final String PROPERTY_CancelDate = "CancelDate";
    public static final String P_CancelDate = "CancelDate";
    public static final String PROPERTY_Body = "Body";
    public static final String P_Body = "Body";
    public static final String PROPERTY_Attachment = "Attachment";
    public static final String P_Attachment = "Attachment";
    public static final String PROPERTY_AttachmentName = "AttachmentName";
    public static final String P_AttachmentName = "AttachmentName";
    public static final String PROPERTY_AttachmentMimeType = "AttachmentMimeType";
    public static final String P_AttachmentMimeType = "AttachmentMimeType";
     
    public static final String PROPERTY_Open = "Open";
    public static final String P_Open = "Open";
     
    public static final String PROPERTY_EmployeeAwardConfirm = "EmployeeAwardConfirm";
    public static final String P_EmployeeAwardConfirm = "EmployeeAwardConfirm";
    public static final String PROPERTY_EmployeeAwardManagerNotify = "EmployeeAwardManagerNotify";
    public static final String P_EmployeeAwardManagerNotify = "EmployeeAwardManagerNotify";
    public static final String PROPERTY_EmployeeAwardNotify = "EmployeeAwardNotify";
    public static final String P_EmployeeAwardNotify = "EmployeeAwardNotify";
    public static final String PROPERTY_EmployeeAwardShipped = "EmployeeAwardShipped";
    public static final String P_EmployeeAwardShipped = "EmployeeAwardShipped";
    public static final String PROPERTY_EmployeeEcardConfirmed = "EmployeeEcardConfirmed";
    public static final String P_EmployeeEcardConfirmed = "EmployeeEcardConfirmed";
    public static final String PROPERTY_EmployeeEcardDelivered = "EmployeeEcardDelivered";
    public static final String P_EmployeeEcardDelivered = "EmployeeEcardDelivered";
    public static final String PROPERTY_EmployeeEcardTo = "EmployeeEcardTo";
    public static final String P_EmployeeEcardTo = "EmployeeEcardTo";
    public static final String PROPERTY_Inspire = "Inspire";
    public static final String P_Inspire = "Inspire";
    public static final String PROPERTY_InspireApproval = "InspireApproval";
    public static final String P_InspireApproval = "InspireApproval";
    public static final String PROPERTY_InspireApprovalReminder = "InspireApprovalReminder";
    public static final String P_InspireApprovalReminder = "InspireApprovalReminder";
    public static final String PROPERTY_InspireOrder = "InspireOrder";
    public static final String P_InspireOrder = "InspireOrder";
    public static final String PROPERTY_InspireRecipient = "InspireRecipient";
    public static final String P_InspireRecipient = "InspireRecipient";
    public static final String PROPERTY_InspireRecipientCompleted = "InspireRecipientCompleted";
    public static final String P_InspireRecipientCompleted = "InspireRecipientCompleted";
    public static final String PROPERTY_LocationEmailType = "LocationEmailType";
    public static final String P_LocationEmailType = "LocationEmailType";
    public static final String PROPERTY_PointsRecord = "PointsRecord";
    public static final String P_PointsRecord = "PointsRecord";
    public static final String PROPERTY_PointsRequest = "PointsRequest";
    public static final String P_PointsRequest = "PointsRequest";
    public static final String PROPERTY_ProgramEmailType = "ProgramEmailType";
    public static final String P_ProgramEmailType = "ProgramEmailType";
     
    protected int id;
    protected OADate created;
    protected String fromEmail;
    protected String toEmail;
    protected String ccEmail;
    protected String subject;
    protected OADateTime sentDateTime;
    protected OADate cancelDate;
    protected String body;
    protected transient byte[] attachment;
    protected String attachmentName;
    protected String attachmentMimeType;
     
    // Links to other objects.
    protected transient LocationEmailType locationEmailType;
    protected transient ProgramEmailType programEmailType;
     
    public Email() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public Email(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "From Email", description = "from email address", maxLength = 75, isUnicode = true, displayLength = 40, columnLength = 15)
    @OAColumn(maxLength = 75)
    /**
      from email address
    */
    public String getFromEmail() {
        return fromEmail;
    }
    
    public void setFromEmail(String newValue) {
        fireBeforePropertyChange(P_FromEmail, this.fromEmail, newValue);
        String old = fromEmail;
        this.fromEmail = newValue;
        firePropertyChange(P_FromEmail, old, this.fromEmail);
    }
    @OAProperty(displayName = "To Email", description = "send to email address", maxLength = 75, isUnicode = true, displayLength = 40, columnLength = 15)
    @OAColumn(maxLength = 75)
    /**
      send to email address
    */
    public String getToEmail() {
        return toEmail;
    }
    
    public void setToEmail(String newValue) {
        fireBeforePropertyChange(P_ToEmail, this.toEmail, newValue);
        String old = toEmail;
        this.toEmail = newValue;
        firePropertyChange(P_ToEmail, old, this.toEmail);
    }
    @OAProperty(displayName = "Cc Email", description = "CC email address", maxLength = 75, isUnicode = true, displayLength = 40, columnLength = 15)
    @OAColumn(maxLength = 75)
    /**
      CC email address
    */
    public String getCcEmail() {
        return ccEmail;
    }
    
    public void setCcEmail(String newValue) {
        fireBeforePropertyChange(P_CcEmail, this.ccEmail, newValue);
        String old = ccEmail;
        this.ccEmail = newValue;
        firePropertyChange(P_CcEmail, old, this.ccEmail);
    }
    @OAProperty(maxLength = 150, isUnicode = true, displayLength = 20, columnLength = 14)
    @OAColumn(maxLength = 150)
    public String getSubject() {
        return subject;
    }
    
    public void setSubject(String newValue) {
        fireBeforePropertyChange(P_Subject, this.subject, newValue);
        String old = subject;
        this.subject = newValue;
        firePropertyChange(P_Subject, old, this.subject);
    }
    @OAProperty(displayName = "Sent Date Time", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getSentDateTime() {
        return sentDateTime;
    }
    
    public void setSentDateTime(OADateTime newValue) {
        fireBeforePropertyChange(P_SentDateTime, this.sentDateTime, newValue);
        OADateTime old = sentDateTime;
        this.sentDateTime = newValue;
        firePropertyChange(P_SentDateTime, old, this.sentDateTime);
    }
    @OAProperty(displayName = "Cancel Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCancelDate() {
        return cancelDate;
    }
    
    public void setCancelDate(OADate newValue) {
        fireBeforePropertyChange(P_CancelDate, this.cancelDate, newValue);
        OADate old = cancelDate;
        this.cancelDate = newValue;
        firePropertyChange(P_CancelDate, old, this.cancelDate);
    }
    @OAProperty(isUnicode = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getBody() {
        return body;
    }
    
    public void setBody(String newValue) {
        fireBeforePropertyChange(P_Body, this.body, newValue);
        String old = body;
        this.body = newValue;
        firePropertyChange(P_Body, old, this.body);
    }
    @OAProperty(isBlob = true, displayLength = 3)
    @OAColumn(sqlType = java.sql.Types.BLOB)
    public byte[] getAttachment() {
        if (attachment == null) {
            attachment = getBlob(P_Attachment);
        }
        return attachment;
    }
    
    public void setAttachment(byte[] newValue) {
        fireBeforePropertyChange(P_Attachment, this.attachment, newValue);
        byte[] old = attachment;
        this.attachment = newValue;
        firePropertyChange(P_Attachment, old, this.attachment);
    }
    @OAProperty(displayName = "Attachment Name", maxLength = 35, displayLength = 15, columnLength = 12)
    @OAColumn(maxLength = 35)
    public String getAttachmentName() {
        return attachmentName;
    }
    
    public void setAttachmentName(String newValue) {
        fireBeforePropertyChange(P_AttachmentName, this.attachmentName, newValue);
        String old = attachmentName;
        this.attachmentName = newValue;
        firePropertyChange(P_AttachmentName, old, this.attachmentName);
    }
    @OAProperty(displayName = "Attachment Mime Type", maxLength = 35, displayLength = 10)
    @OAColumn(maxLength = 35)
    public String getAttachmentMimeType() {
        return attachmentMimeType;
    }
    
    public void setAttachmentMimeType(String newValue) {
        fireBeforePropertyChange(P_AttachmentMimeType, this.attachmentMimeType, newValue);
        String old = attachmentMimeType;
        this.attachmentMimeType = newValue;
        firePropertyChange(P_AttachmentMimeType, old, this.attachmentMimeType);
    }
    @OACalculatedProperty(displayLength = 5, properties = {P_CancelDate, P_SentDateTime})
    public boolean isOpen() {
        if (getCancelDate() != null) return false;
        if (getSentDateTime() != null) return false;
        if (OAString.isEmpty(getFromEmail())) return false;
        if (OAString.isEmpty(getToEmail())) return false;
        return true;
    }
     
    @OAOne(
        displayName = "Employee Award Confirm", 
        reverseName = EmployeeAward.P_ConfirmEmail, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private EmployeeAward getEmployeeAwardConfirm() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Award Manager Notify", 
        reverseName = EmployeeAward.P_ManagerNotifyEmail, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private EmployeeAward getEmployeeAwardManagerNotify() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Award Notify", 
        reverseName = EmployeeAward.P_NotifyEmail, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private EmployeeAward getEmployeeAwardNotify() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Award Shipped", 
        reverseName = EmployeeAward.P_ShippedEmails, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OALinkTable(name = "EmailEmployeeAward", indexName = "EmployeeAwardShippedEmail", columns = {"EmailId"})
    private EmployeeAward getEmployeeAwardShipped() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Ecard Confirmed", 
        reverseName = EmployeeEcard.P_ConfirmedEmail, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private EmployeeEcard getEmployeeEcardConfirmed() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Ecard Delivered", 
        reverseName = EmployeeEcard.P_DeliveredEmail, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private EmployeeEcard getEmployeeEcardDelivered() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Ecard To", 
        reverseName = EmployeeEcardTo.P_Email, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private EmployeeEcardTo getEmployeeEcardTo() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Inspire.P_Email, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Inspire getInspire() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Inspire Approval", 
        reverseName = InspireApproval.P_Email, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private InspireApproval getInspireApproval() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Inspire Approval Reminder", 
        reverseName = InspireApproval.P_ReminderEmails, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OALinkTable(name = "InspireApprovalEmail", indexName = "InspireApprovalReminderEmail", columns = {"EmailId"})
    private InspireApproval getInspireApprovalReminder() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Inspire Order", 
        reverseName = InspireOrder.P_Emails, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OALinkTable(name = "InspireOrderEmail", indexName = "InspireOrderEmail", columns = {"EmailId"})
    private InspireOrder getInspireOrder() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Inspire Recipient", 
        reverseName = InspireRecipient.P_Email, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private InspireRecipient getInspireRecipient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Inspire Recipient Completed", 
        reverseName = InspireRecipient.P_CompletedEmail, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private InspireRecipient getInspireRecipientCompleted() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Location Email Type", 
        reverseName = LocationEmailType.P_Emails, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LocationEmailTypeId"})
    public LocationEmailType getLocationEmailType() {
        if (locationEmailType == null) {
            locationEmailType = (LocationEmailType) getObject(P_LocationEmailType);
        }
        return locationEmailType;
    }
    
    public void setLocationEmailType(LocationEmailType newValue) {
        fireBeforePropertyChange(P_LocationEmailType, this.locationEmailType, newValue);
        LocationEmailType old = this.locationEmailType;
        this.locationEmailType = newValue;
        firePropertyChange(P_LocationEmailType, old, this.locationEmailType);
    }
    
    @OAOne(
        displayName = "Points Record", 
        reverseName = PointsRecord.P_Email, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private PointsRecord getPointsRecord() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Points Request", 
        reverseName = PointsRequest.P_Emails, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OALinkTable(name = "PointsRequestEmail", indexName = "PointsRequestEmail", columns = {"EmailId"})
    private PointsRequest getPointsRequest() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Program Email Type", 
        reverseName = ProgramEmailType.P_Emails, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProgramEmailTypeId"})
    public ProgramEmailType getProgramEmailType() {
        if (programEmailType == null) {
            programEmailType = (ProgramEmailType) getObject(P_ProgramEmailType);
        }
        return programEmailType;
    }
    
    public void setProgramEmailType(ProgramEmailType newValue) {
        fireBeforePropertyChange(P_ProgramEmailType, this.programEmailType, newValue);
        ProgramEmailType old = this.programEmailType;
        this.programEmailType = newValue;
        firePropertyChange(P_ProgramEmailType, old, this.programEmailType);
    }
    
    // sendEmail - send this email
    public String sendEmail() {
        return null;//EmailDelegate.sendEmail(this);
    }
     
    // updateEmail - update the email data
    public String updateEmail() {
        return null;//EmailDelegate.update(this);
    }
     
    // viewAttachment
    public void viewAttachment() {
        //EmailDelegate.viewAttachment(this);
    }
     
    // cancel - this will mark the email as cancelled
    public void cancel() {
        if (getSentDateTime() == null) {
            setCancelDate(new OADate());
            save();
        }
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.fromEmail = rs.getString(3);
        this.toEmail = rs.getString(4);
        this.ccEmail = rs.getString(5);
        this.subject = rs.getString(6);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.sentDateTime = new OADateTime(timestamp);
        date = rs.getDate(8);
        if (date != null) this.cancelDate = new OADate(date);
        this.body = rs.getString(9);
        this.attachmentName = rs.getString(10);
        this.attachmentMimeType = rs.getString(11);
        int locationEmailTypeFkey = rs.getInt(12);
        if (!rs.wasNull() && locationEmailTypeFkey > 0) {
            setProperty(P_LocationEmailType, new OAObjectKey(locationEmailTypeFkey));
        }
        int programEmailTypeFkey = rs.getInt(13);
        if (!rs.wasNull() && programEmailTypeFkey > 0) {
            setProperty(P_ProgramEmailType, new OAObjectKey(programEmailTypeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

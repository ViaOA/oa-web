// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ea",
    displayName = "Employee Award",
    displayProperty = "display",
    filterClasses = {EmployeeAwardHasNotSentFilter.class, EmployeeAwardAvailableFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "EmployeeAwardEmployee", columns = { @OAIndexColumn(name = "EmployeeId") })
    }
)
public class EmployeeAward extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_AwardDate = "AwardDate";
    public static final String P_AwardDate = "AwardDate";
    public static final String PROPERTY_ApprovedDate = "ApprovedDate";
    public static final String P_ApprovedDate = "ApprovedDate";
    public static final String PROPERTY_PackageSentDate = "PackageSentDate";
    public static final String P_PackageSentDate = "PackageSentDate";
    public static final String PROPERTY_PackageTracking = "PackageTracking";
    public static final String P_PackageTracking = "PackageTracking";
    public static final String PROPERTY_PackageShippingInfo = "PackageShippingInfo";
    public static final String P_PackageShippingInfo = "PackageShippingInfo";
    public static final String PROPERTY_PackageInvoiceNumber = "PackageInvoiceNumber";
    public static final String P_PackageInvoiceNumber = "PackageInvoiceNumber";
    public static final String PROPERTY_PackageBillDate = "PackageBillDate";
    public static final String P_PackageBillDate = "PackageBillDate";
    public static final String PROPERTY_BillDate = "BillDate";
    public static final String P_BillDate = "BillDate";
    public static final String PROPERTY_PackagePaidDate = "PackagePaidDate";
    public static final String P_PackagePaidDate = "PackagePaidDate";
    public static final String PROPERTY_PaidDate = "PaidDate";
    public static final String P_PaidDate = "PaidDate";
    public static final String PROPERTY_ItemSelectedDate = "ItemSelectedDate";
    public static final String P_ItemSelectedDate = "ItemSelectedDate";
    public static final String PROPERTY_ItemSentDate = "ItemSentDate";
    public static final String P_ItemSentDate = "ItemSentDate";
    public static final String PROPERTY_ItemShippingInfo = "ItemShippingInfo";
    public static final String P_ItemShippingInfo = "ItemShippingInfo";
    public static final String PROPERTY_ItemTracking = "ItemTracking";
    public static final String P_ItemTracking = "ItemTracking";
    public static final String PROPERTY_ItemBillDate = "ItemBillDate";
    public static final String P_ItemBillDate = "ItemBillDate";
    public static final String PROPERTY_ItemLastStatusDate = "ItemLastStatusDate";
    public static final String P_ItemLastStatusDate = "ItemLastStatusDate";
    public static final String PROPERTY_ItemLastStatus = "ItemLastStatus";
    public static final String P_ItemLastStatus = "ItemLastStatus";
    public static final String PROPERTY_ItemInvoiceNumber = "ItemInvoiceNumber";
    public static final String P_ItemInvoiceNumber = "ItemInvoiceNumber";
    public static final String PROPERTY_ItemVendorInvoiced = "ItemVendorInvoiced";
    public static final String P_ItemVendorInvoiced = "ItemVendorInvoiced";
    public static final String PROPERTY_ItemPaidDate = "ItemPaidDate";
    public static final String P_ItemPaidDate = "ItemPaidDate";
    public static final String PROPERTY_CompletedDate = "CompletedDate";
    public static final String P_CompletedDate = "CompletedDate";
    public static final String PROPERTY_CancelDate = "CancelDate";
    public static final String P_CancelDate = "CancelDate";
    public static final String PROPERTY_CancelReason = "CancelReason";
    public static final String P_CancelReason = "CancelReason";
    public static final String PROPERTY_CashSelectedDate = "CashSelectedDate";
    public static final String P_CashSelectedDate = "CashSelectedDate";
    public static final String PROPERTY_CashSentDate = "CashSentDate";
    public static final String P_CashSentDate = "CashSentDate";
    public static final String PROPERTY_InternationalVisaSelectedDate = "InternationalVisaSelectedDate";
    public static final String P_InternationalVisaSelectedDate = "InternationalVisaSelectedDate";
    public static final String PROPERTY_InternationalVisaAmount = "InternationalVisaAmount";
    public static final String P_InternationalVisaAmount = "InternationalVisaAmount";
    public static final String PROPERTY_InternationalVisaSentDate = "InternationalVisaSentDate";
    public static final String P_InternationalVisaSentDate = "InternationalVisaSentDate";
    public static final String PROPERTY_AddOnProductSelectedDate = "AddOnProductSelectedDate";
    public static final String P_AddOnProductSelectedDate = "AddOnProductSelectedDate";
    public static final String PROPERTY_MergeId = "MergeId";
    public static final String P_MergeId = "MergeId";
    public static final String PROPERTY_CashInvoiceNumber = "CashInvoiceNumber";
    public static final String P_CashInvoiceNumber = "CashInvoiceNumber";
    public static final String PROPERTY_CashinvoiceDate = "CashinvoiceDate";
    public static final String P_CashinvoiceDate = "CashinvoiceDate";
    public static final String PROPERTY_InternationalVisaInvoiceNumber = "InternationalVisaInvoiceNumber";
    public static final String P_InternationalVisaInvoiceNumber = "InternationalVisaInvoiceNumber";
    public static final String PROPERTY_InternationVisaInvoiceDate = "InternationVisaInvoiceDate";
    public static final String P_InternationVisaInvoiceDate = "InternationVisaInvoiceDate";
    public static final String PROPERTY_InternationalVisaVendorInvoiced = "InternationalVisaVendorInvoiced";
    public static final String P_InternationalVisaVendorInvoiced = "InternationalVisaVendorInvoiced";
     
    public static final String PROPERTY_IsOpen = "IsOpen";
    public static final String P_IsOpen = "IsOpen";
    public static final String PROPERTY_Balance = "Balance";
    public static final String P_Balance = "Balance";
    public static final String PROPERTY_IsExpired = "IsExpired";
    public static final String P_IsExpired = "IsExpired";
    public static final String PROPERTY_HasNotSent = "HasNotSent";
    public static final String P_HasNotSent = "HasNotSent";
    public static final String PROPERTY_Display = "Display";
    public static final String P_Display = "Display";
    public static final String PROPERTY_Cards = "Cards";
    public static final String P_Cards = "Cards";
    public static final String PROPERTY_SelectedAwardDescription = "SelectedAwardDescription";
    public static final String P_SelectedAwardDescription = "SelectedAwardDescription";
    public static final String PROPERTY_CurrentStatus = "CurrentStatus";
    public static final String P_CurrentStatus = "CurrentStatus";
    public static final String PROPERTY_CanSelectProduct = "CanSelectProduct";
    public static final String P_CanSelectProduct = "CanSelectProduct";
    public static final String PROPERTY_CanSelectCard = "CanSelectCard";
    public static final String P_CanSelectCard = "CanSelectCard";
    public static final String PROPERTY_CanSelectCash = "CanSelectCash";
    public static final String P_CanSelectCash = "CanSelectCash";
    public static final String PROPERTY_CanSelectHelpingHands = "CanSelectHelpingHands";
    public static final String P_CanSelectHelpingHands = "CanSelectHelpingHands";
    public static final String PROPERTY_CanSelectCharity = "CanSelectCharity";
    public static final String P_CanSelectCharity = "CanSelectCharity";
    public static final String PROPERTY_CanSelectInternationalVisa = "CanSelectInternationalVisa";
    public static final String P_CanSelectInternationalVisa = "CanSelectInternationalVisa";
    public static final String PROPERTY_CanSelectAddOnItem = "CanSelectAddOnItem";
    public static final String P_CanSelectAddOnItem = "CanSelectAddOnItem";
    public static final String PROPERTY_UsesImagineCard = "UsesImagineCard";
    public static final String P_UsesImagineCard = "UsesImagineCard";
    public static final String PROPERTY_IsAvailable = "IsAvailable";
    public static final String P_IsAvailable = "IsAvailable";
     
    public static final String PROPERTY_AddOnItems = "AddOnItems";
    public static final String P_AddOnItems = "AddOnItems";
    public static final String PROPERTY_AddOnProduct = "AddOnProduct";
    public static final String P_AddOnProduct = "AddOnProduct";
    public static final String PROPERTY_AwardCardOrders = "AwardCardOrders";
    public static final String P_AwardCardOrders = "AwardCardOrders";
    public static final String PROPERTY_AwardType = "AwardType";
    public static final String P_AwardType = "AwardType";
    public static final String PROPERTY_CalcAnnouncementDocument = "CalcAnnouncementDocument";
    public static final String P_CalcAnnouncementDocument = "CalcAnnouncementDocument";
    public static final String PROPERTY_CalcCeoImageStore = "CalcCeoImageStore";
    public static final String P_CalcCeoImageStore = "CalcCeoImageStore";
    public static final String PROPERTY_CalcCeoSignatureImageStore = "CalcCeoSignatureImageStore";
    public static final String P_CalcCeoSignatureImageStore = "CalcCeoSignatureImageStore";
    public static final String PROPERTY_CalcEmployee = "CalcEmployee";
    public static final String P_CalcEmployee = "CalcEmployee";
    public static final String PROPERTY_ConfirmEmail = "ConfirmEmail";
    public static final String P_ConfirmEmail = "ConfirmEmail";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_EmployeeAwardCharities = "EmployeeAwardCharities";
    public static final String P_EmployeeAwardCharities = "EmployeeAwardCharities";
    public static final String PROPERTY_HindaOrder = "HindaOrder";
    public static final String P_HindaOrder = "HindaOrder";
    public static final String PROPERTY_ImagineCard = "ImagineCard";
    public static final String P_ImagineCard = "ImagineCard";
    public static final String PROPERTY_ManagerNotifyEmail = "ManagerNotifyEmail";
    public static final String P_ManagerNotifyEmail = "ManagerNotifyEmail";
    public static final String PROPERTY_NotifyEmail = "NotifyEmail";
    public static final String P_NotifyEmail = "NotifyEmail";
    public static final String PROPERTY_Product = "Product";
    public static final String P_Product = "Product";
    public static final String PROPERTY_ShippedEmails = "ShippedEmails";
    public static final String P_ShippedEmails = "ShippedEmails";
    public static final String PROPERTY_ShipTo = "ShipTo";
    public static final String P_ShipTo = "ShipTo";
    public static final String PROPERTY_Values = "Values";
    public static final String P_Values = "Values";
     
    protected int id;
    protected OADate created;
    protected OADate awardDate;
    protected OADate approvedDate;
    protected OADate packageSentDate;
    protected String packageTracking;
    protected String packageShippingInfo;
    protected String packageInvoiceNumber;
    protected OADate packageBillDate;
    protected OADate billDate;
    protected OADate packagePaidDate;
    protected OADate paidDate;
    protected OADate itemSelectedDate;
    protected OADate itemSentDate;
    protected String itemShippingInfo;
    protected String itemTracking;
    protected OADate itemBillDate;
    protected OADate itemLastStatusDate;
    protected String itemLastStatus;
    protected String itemInvoiceNumber;
    protected boolean itemVendorInvoiced;
    protected OADate itemPaidDate;
    protected OADate completedDate;
    protected OADate cancelDate;
    protected String cancelReason;
    protected OADate cashSelectedDate;
    protected OADate cashSentDate;
    protected OADate internationalVisaSelectedDate;
    protected double internationalVisaAmount;
    protected OADate internationalVisaSentDate;
    protected OADate addOnProductSelectedDate;
    protected int mergeId;
    protected String cashInvoiceNumber;
    protected OADate cashinvoiceDate;
    protected String internationalVisaInvoiceNumber;
    protected OADate internationVisaInvoiceDate;
    protected boolean internationalVisaVendorInvoiced;
     
    // Links to other objects.
    protected transient Hub<AddOnItem> hubAddOnItems;
    protected transient Product addOnProduct;
    protected transient Hub<AwardCardOrder> hubAwardCardOrders;
    protected transient AwardType awardType;
    protected transient ProgramDocument calcAnnouncementDocument;
    protected transient ImageStore calcCeoImageStore;
    protected transient ImageStore calcCeoSignatureImageStore;
    protected transient Email confirmEmail;
    protected transient Employee employee;
    protected transient Hub<EmployeeAwardCharity> hubEmployeeAwardCharities;
    protected transient HindaOrder hindaOrder;
    protected transient Card imagineCard;
    protected transient Email managerNotifyEmail;
    protected transient Email notifyEmail;
    protected transient Product product;
    protected transient Hub<Email> hubShippedEmails;
    protected transient ShipTo shipTo;
    protected transient Hub<Value> hubValues;
     
    public EmployeeAward() {
        if (!isLoading()) {
            setCreated(new OADate());
            setAwardDate(new OADate());
            setShipTo(new ShipTo());
        }
    }
     
    public EmployeeAward(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Date", defaultValue = "new OADate()", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getAwardDate() {
        return awardDate;
    }
    
    public void setAwardDate(OADate newValue) {
        fireBeforePropertyChange(P_AwardDate, this.awardDate, newValue);
        OADate old = awardDate;
        this.awardDate = newValue;
        firePropertyChange(P_AwardDate, old, this.awardDate);
    }
    @OAProperty(displayName = "Approved Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getApprovedDate() {
        return approvedDate;
    }
    
    public void setApprovedDate(OADate newValue) {
        fireBeforePropertyChange(P_ApprovedDate, this.approvedDate, newValue);
        OADate old = approvedDate;
        this.approvedDate = newValue;
        firePropertyChange(P_ApprovedDate, old, this.approvedDate);
    }
    @OAProperty(displayName = "Package Sent Date", displayLength = 8, columnName = "Package Sent")
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getPackageSentDate() {
        return packageSentDate;
    }
    
    public void setPackageSentDate(OADate newValue) {
        fireBeforePropertyChange(P_PackageSentDate, this.packageSentDate, newValue);
        OADate old = packageSentDate;
        this.packageSentDate = newValue;
        firePropertyChange(P_PackageSentDate, old, this.packageSentDate);
    }
    @OAProperty(displayName = "Package Tracking", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getPackageTracking() {
        return packageTracking;
    }
    
    public void setPackageTracking(String newValue) {
        fireBeforePropertyChange(P_PackageTracking, this.packageTracking, newValue);
        String old = packageTracking;
        this.packageTracking = newValue;
        firePropertyChange(P_PackageTracking, old, this.packageTracking);
    }
    @OAProperty(displayName = "Shipping Info", maxLength = 150, displayLength = 40)
    @OAColumn(maxLength = 150)
    public String getPackageShippingInfo() {
        return packageShippingInfo;
    }
    
    public void setPackageShippingInfo(String newValue) {
        fireBeforePropertyChange(P_PackageShippingInfo, this.packageShippingInfo, newValue);
        String old = packageShippingInfo;
        this.packageShippingInfo = newValue;
        firePropertyChange(P_PackageShippingInfo, old, this.packageShippingInfo);
    }
    @OAProperty(displayName = "Package Invoice Number", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getPackageInvoiceNumber() {
        return packageInvoiceNumber;
    }
    
    public void setPackageInvoiceNumber(String newValue) {
        fireBeforePropertyChange(P_PackageInvoiceNumber, this.packageInvoiceNumber, newValue);
        String old = packageInvoiceNumber;
        this.packageInvoiceNumber = newValue;
        firePropertyChange(P_PackageInvoiceNumber, old, this.packageInvoiceNumber);
    }
    @OAProperty(displayName = "Package Bill Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getPackageBillDate() {
        return packageBillDate;
    }
    
    public void setPackageBillDate(OADate newValue) {
        fireBeforePropertyChange(P_PackageBillDate, this.packageBillDate, newValue);
        OADate old = packageBillDate;
        this.packageBillDate = newValue;
        firePropertyChange(P_PackageBillDate, old, this.packageBillDate);
    }
    @OAProperty(displayName = "Bill Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getBillDate() {
        return billDate;
    }
    
    public void setBillDate(OADate newValue) {
        fireBeforePropertyChange(P_BillDate, this.billDate, newValue);
        OADate old = billDate;
        this.billDate = newValue;
        firePropertyChange(P_BillDate, old, this.billDate);
    }
    @OAProperty(displayName = "Package Paid Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getPackagePaidDate() {
        return packagePaidDate;
    }
    
    public void setPackagePaidDate(OADate newValue) {
        fireBeforePropertyChange(P_PackagePaidDate, this.packagePaidDate, newValue);
        OADate old = packagePaidDate;
        this.packagePaidDate = newValue;
        firePropertyChange(P_PackagePaidDate, old, this.packagePaidDate);
    }
    @OAProperty(displayName = "Paid Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getPaidDate() {
        return paidDate;
    }
    
    public void setPaidDate(OADate newValue) {
        fireBeforePropertyChange(P_PaidDate, this.paidDate, newValue);
        OADate old = paidDate;
        this.paidDate = newValue;
        firePropertyChange(P_PaidDate, old, this.paidDate);
    }
    @OAProperty(displayName = "Item Selected Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getItemSelectedDate() {
        return itemSelectedDate;
    }
    
    public void setItemSelectedDate(OADate newValue) {
        fireBeforePropertyChange(P_ItemSelectedDate, this.itemSelectedDate, newValue);
        OADate old = itemSelectedDate;
        this.itemSelectedDate = newValue;
        firePropertyChange(P_ItemSelectedDate, old, this.itemSelectedDate);
    }
    @OAProperty(displayName = "Item Sent Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getItemSentDate() {
        return itemSentDate;
    }
    
    public void setItemSentDate(OADate newValue) {
        fireBeforePropertyChange(P_ItemSentDate, this.itemSentDate, newValue);
        OADate old = itemSentDate;
        this.itemSentDate = newValue;
        firePropertyChange(P_ItemSentDate, old, this.itemSentDate);
    }
    @OAProperty(displayName = "Item Shipping Info", maxLength = 150, displayLength = 40, columnLength = 20)
    @OAColumn(maxLength = 150)
    public String getItemShippingInfo() {
        return itemShippingInfo;
    }
    
    public void setItemShippingInfo(String newValue) {
        fireBeforePropertyChange(P_ItemShippingInfo, this.itemShippingInfo, newValue);
        String old = itemShippingInfo;
        this.itemShippingInfo = newValue;
        firePropertyChange(P_ItemShippingInfo, old, this.itemShippingInfo);
    }
    @OAProperty(displayName = "Item Tracking", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getItemTracking() {
        return itemTracking;
    }
    
    public void setItemTracking(String newValue) {
        fireBeforePropertyChange(P_ItemTracking, this.itemTracking, newValue);
        String old = itemTracking;
        this.itemTracking = newValue;
        firePropertyChange(P_ItemTracking, old, this.itemTracking);
    }
    @OAProperty(displayName = "Item Bill Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getItemBillDate() {
        return itemBillDate;
    }
    
    public void setItemBillDate(OADate newValue) {
        fireBeforePropertyChange(P_ItemBillDate, this.itemBillDate, newValue);
        OADate old = itemBillDate;
        this.itemBillDate = newValue;
        firePropertyChange(P_ItemBillDate, old, this.itemBillDate);
    }
    @OAProperty(displayName = "Item Last Status Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getItemLastStatusDate() {
        return itemLastStatusDate;
    }
    
    public void setItemLastStatusDate(OADate newValue) {
        fireBeforePropertyChange(P_ItemLastStatusDate, this.itemLastStatusDate, newValue);
        OADate old = itemLastStatusDate;
        this.itemLastStatusDate = newValue;
        firePropertyChange(P_ItemLastStatusDate, old, this.itemLastStatusDate);
    }
    @OAProperty(displayName = "Item Last Status", maxLength = 75, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getItemLastStatus() {
        return itemLastStatus;
    }
    
    public void setItemLastStatus(String newValue) {
        fireBeforePropertyChange(P_ItemLastStatus, this.itemLastStatus, newValue);
        String old = itemLastStatus;
        this.itemLastStatus = newValue;
        firePropertyChange(P_ItemLastStatus, old, this.itemLastStatus);
    }
    @OAProperty(displayName = "Item Invoice Number", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getItemInvoiceNumber() {
        return itemInvoiceNumber;
    }
    
    public void setItemInvoiceNumber(String newValue) {
        fireBeforePropertyChange(P_ItemInvoiceNumber, this.itemInvoiceNumber, newValue);
        String old = itemInvoiceNumber;
        this.itemInvoiceNumber = newValue;
        firePropertyChange(P_ItemInvoiceNumber, old, this.itemInvoiceNumber);
    }
    @OAProperty(displayName = "Item Vendor Invoiced", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getItemVendorInvoiced() {
        return itemVendorInvoiced;
    }
    
    public void setItemVendorInvoiced(boolean newValue) {
        fireBeforePropertyChange(P_ItemVendorInvoiced, this.itemVendorInvoiced, newValue);
        boolean old = itemVendorInvoiced;
        this.itemVendorInvoiced = newValue;
        firePropertyChange(P_ItemVendorInvoiced, old, this.itemVendorInvoiced);
    }
    @OAProperty(displayName = "Item Paid Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getItemPaidDate() {
        return itemPaidDate;
    }
    
    public void setItemPaidDate(OADate newValue) {
        fireBeforePropertyChange(P_ItemPaidDate, this.itemPaidDate, newValue);
        OADate old = itemPaidDate;
        this.itemPaidDate = newValue;
        firePropertyChange(P_ItemPaidDate, old, this.itemPaidDate);
    }
    @OAProperty(displayName = "Completed Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCompletedDate() {
        return completedDate;
    }
    
    public void setCompletedDate(OADate newValue) {
        fireBeforePropertyChange(P_CompletedDate, this.completedDate, newValue);
        OADate old = completedDate;
        this.completedDate = newValue;
        firePropertyChange(P_CompletedDate, old, this.completedDate);
    }
    @OAProperty(displayName = "Cancel Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCancelDate() {
        return cancelDate;
    }
    
    public void setCancelDate(OADate newValue) {
        fireBeforePropertyChange(P_CancelDate, this.cancelDate, newValue);
        OADate old = cancelDate;
        this.cancelDate = newValue;
        firePropertyChange(P_CancelDate, old, this.cancelDate);
    }
    @OAProperty(displayName = "Cancel Reason", maxLength = 254, displayLength = 35, columnLength = 22)
    @OAColumn(maxLength = 254)
    public String getCancelReason() {
        return cancelReason;
    }
    
    public void setCancelReason(String newValue) {
        fireBeforePropertyChange(P_CancelReason, this.cancelReason, newValue);
        String old = cancelReason;
        this.cancelReason = newValue;
        firePropertyChange(P_CancelReason, old, this.cancelReason);
    }
    @OAProperty(displayName = "Cash Selected Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCashSelectedDate() {
        return cashSelectedDate;
    }
    
    public void setCashSelectedDate(OADate newValue) {
        fireBeforePropertyChange(P_CashSelectedDate, this.cashSelectedDate, newValue);
        OADate old = cashSelectedDate;
        this.cashSelectedDate = newValue;
        firePropertyChange(P_CashSelectedDate, old, this.cashSelectedDate);
    }
    @OAProperty(displayName = "Cash Sent Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCashSentDate() {
        return cashSentDate;
    }
    
    public void setCashSentDate(OADate newValue) {
        fireBeforePropertyChange(P_CashSentDate, this.cashSentDate, newValue);
        OADate old = cashSentDate;
        this.cashSentDate = newValue;
        firePropertyChange(P_CashSentDate, old, this.cashSentDate);
    }
    @OAProperty(displayName = "International Visa Selected Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInternationalVisaSelectedDate() {
        return internationalVisaSelectedDate;
    }
    
    public void setInternationalVisaSelectedDate(OADate newValue) {
        fireBeforePropertyChange(P_InternationalVisaSelectedDate, this.internationalVisaSelectedDate, newValue);
        OADate old = internationalVisaSelectedDate;
        this.internationalVisaSelectedDate = newValue;
        firePropertyChange(P_InternationalVisaSelectedDate, old, this.internationalVisaSelectedDate);
    }
    @OAProperty(displayName = "International Visa Amount", decimalPlaces = 2, isCurrency = true, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getInternationalVisaAmount() {
        return internationalVisaAmount;
    }
    
    public void setInternationalVisaAmount(double newValue) {
        fireBeforePropertyChange(P_InternationalVisaAmount, this.internationalVisaAmount, newValue);
        double old = internationalVisaAmount;
        this.internationalVisaAmount = newValue;
        firePropertyChange(P_InternationalVisaAmount, old, this.internationalVisaAmount);
    }
    @OAProperty(displayName = "International Visa Sent Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInternationalVisaSentDate() {
        return internationalVisaSentDate;
    }
    
    public void setInternationalVisaSentDate(OADate newValue) {
        fireBeforePropertyChange(P_InternationalVisaSentDate, this.internationalVisaSentDate, newValue);
        OADate old = internationalVisaSentDate;
        this.internationalVisaSentDate = newValue;
        firePropertyChange(P_InternationalVisaSentDate, old, this.internationalVisaSentDate);
    }
    @OAProperty(displayName = "Add On Product Selected Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getAddOnProductSelectedDate() {
        return addOnProductSelectedDate;
    }
    
    public void setAddOnProductSelectedDate(OADate newValue) {
        fireBeforePropertyChange(P_AddOnProductSelectedDate, this.addOnProductSelectedDate, newValue);
        OADate old = addOnProductSelectedDate;
        this.addOnProductSelectedDate = newValue;
        firePropertyChange(P_AddOnProductSelectedDate, old, this.addOnProductSelectedDate);
    }
    @OAProperty(displayName = "Merge Id", displayLength = 5, isReadOnly = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getMergeId() {
        return mergeId;
    }
    
    public void setMergeId(int newValue) {
        fireBeforePropertyChange(P_MergeId, this.mergeId, newValue);
        int old = mergeId;
        this.mergeId = newValue;
        firePropertyChange(P_MergeId, old, this.mergeId);
    }
    @OAProperty(displayName = "Invoice #", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getCashInvoiceNumber() {
        return cashInvoiceNumber;
    }
    
    public void setCashInvoiceNumber(String newValue) {
        fireBeforePropertyChange(P_CashInvoiceNumber, this.cashInvoiceNumber, newValue);
        String old = cashInvoiceNumber;
        this.cashInvoiceNumber = newValue;
        firePropertyChange(P_CashInvoiceNumber, old, this.cashInvoiceNumber);
    }
    @OAProperty(displayName = "Invoice Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCashinvoiceDate() {
        return cashinvoiceDate;
    }
    
    public void setCashinvoiceDate(OADate newValue) {
        fireBeforePropertyChange(P_CashinvoiceDate, this.cashinvoiceDate, newValue);
        OADate old = cashinvoiceDate;
        this.cashinvoiceDate = newValue;
        firePropertyChange(P_CashinvoiceDate, old, this.cashinvoiceDate);
    }
    @OAProperty(displayName = "Invoice #", maxLength = 24, displayLength = 24)
    @OAColumn(maxLength = 24)
    public String getInternationalVisaInvoiceNumber() {
        return internationalVisaInvoiceNumber;
    }
    
    public void setInternationalVisaInvoiceNumber(String newValue) {
        fireBeforePropertyChange(P_InternationalVisaInvoiceNumber, this.internationalVisaInvoiceNumber, newValue);
        String old = internationalVisaInvoiceNumber;
        this.internationalVisaInvoiceNumber = newValue;
        firePropertyChange(P_InternationalVisaInvoiceNumber, old, this.internationalVisaInvoiceNumber);
    }
    @OAProperty(displayName = "Invoice Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInternationVisaInvoiceDate() {
        return internationVisaInvoiceDate;
    }
    
    public void setInternationVisaInvoiceDate(OADate newValue) {
        fireBeforePropertyChange(P_InternationVisaInvoiceDate, this.internationVisaInvoiceDate, newValue);
        OADate old = internationVisaInvoiceDate;
        this.internationVisaInvoiceDate = newValue;
        firePropertyChange(P_InternationVisaInvoiceDate, old, this.internationVisaInvoiceDate);
    }
    @OAProperty(displayName = "International Visa Vendor Invoiced", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getInternationalVisaVendorInvoiced() {
        return internationalVisaVendorInvoiced;
    }
    
    public void setInternationalVisaVendorInvoiced(boolean newValue) {
        fireBeforePropertyChange(P_InternationalVisaVendorInvoiced, this.internationalVisaVendorInvoiced, newValue);
        boolean old = internationalVisaVendorInvoiced;
        this.internationalVisaVendorInvoiced = newValue;
        firePropertyChange(P_InternationalVisaVendorInvoiced, old, this.internationalVisaVendorInvoiced);
    }
    @OACalculatedProperty(displayName = "Is Open", displayLength = 5, properties = {P_AwardDate, P_AwardCardOrders+"."+AwardCardOrder.P_Value, P_AwardType+"."+AwardType.P_Value, P_Product, P_ApprovedDate, P_ItemSelectedDate, P_CompletedDate, P_CancelDate, P_InternationalVisaAmount, P_CashSelectedDate, P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_Value})
    public boolean getIsOpen() {
        if (getAwardType() == null) return false;
        if (getItemLastStatusDate() != null) return false;
        if (getProduct() != null) return false;
        if (getCashSelectedDate() != null) return false;
        if (getCompletedDate() != null) return false;
        if (getIsExpired()) return false;
        if (getCancelDate() != null) return false;
        if (getAwardType().getValue() == 0) return true;
        return (getBalance() > 0);
    }
     
    @OACalculatedProperty(decimalPlaces = 2, isCurrency = true, displayLength = 7, properties = {P_AwardType+"."+AwardType.P_Value, P_AwardCardOrders+"."+AwardCardOrder.P_Value, P_IsOpen, P_InternationalVisaAmount, P_AddOnProductSelectedDate, P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_Value})
    public double getBalance() {
        return getBalance(null);
    }
    public double getBalance(AwardCardOrder skipAwardCardOrder) {
        if (getProduct() != null) return 0;
        if (getCompletedDate() != null) return 0;
        if (getIsExpired()) return 0;
        if (getCancelDate() != null) return 0;
        if (getCashSelectedDate() != null) return 0;
    
        Employee emp = getEmployee();
        if (emp == null) return 0;
        AwardType at = getAwardType();
        if (at == null) return 0;
        
        double balance = at.getValue();
        for (EmployeeAwardCharity eac : getEmployeeAwardCharities()) {
            balance -= eac.getValue();
        }
        
        balance -= getInternationalVisaAmount();
        
        Product product = getAddOnProduct();
        if (product != null) {
            Item item = product.getItem();
            for (AddOnItem aoi : getAddOnItems()) {
                if (aoi.getItem() == item) {
                    balance -= aoi.getValue();
                    break;
                }
            }
        }
    
        // userAwardCards.points
        Hub<AwardCardOrder> hubAwardCardOrders = this.getAwardCardOrders();
        for (AwardCardOrder awardCardOrder : hubAwardCardOrders) {
            if (awardCardOrder != skipAwardCardOrder) { 
                balance -= awardCardOrder.getValue();
            }
        }
        return balance >= 0 ? balance : 0;
    }
     
    @OACalculatedProperty(displayName = "Is Expired", displayLength = 5, properties = {P_Created})
    public boolean getIsExpired() {
        OADate d = getAwardDate();
        Employee emp = getEmployee();
        int amt = 0;
        if (emp != null){
            Program prog = emp.getProgram();
            if (prog != null) amt = prog.getEmployeeAwardExpireDays();
        }
        if (amt < 1) amt = 90;
        return (d != null && d.addDays(amt).before(new OADate()));
    }
     
    @OACalculatedProperty(displayName = "Has not sent", description = "item or card has been ordered, but not sent", displayLength = 5, properties = {P_Product, P_AwardCardOrders+"."+AwardCardOrder.P_SentDate, P_ItemSentDate, P_CashSelectedDate, P_InternationalVisaAmount, P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_SentDate})
    public boolean getHasNotSent() {
        if (getEmployee() == null) return false;
    
        if (getCompletedDate() != null) return false; // flag for item, gift card, cash, charity, internal visa
        if (getCancelDate() != null) return false;
        if (getIsExpired()) return false;
        if (getCompletedDate() != null) return false;
    
        // product
        Product product = this.getProduct();
        if (product != null) {
            return getItemSentDate() == null;
        }
    
        // awardCardOrders.sentDate
        Hub<AwardCardOrder> hubAwardCardOrders = this.getAwardCardOrders();
        for (AwardCardOrder awardCardOrder : hubAwardCardOrders) {
            OADate sentDate = awardCardOrder.getSentDate();
            if (sentDate == null) return true;
        }
        
        for (EmployeeAwardCharity eac : getEmployeeAwardCharities()) {
            if (eac.getSentDate() == null) return true;
        }
        return false;
    }
     
    @OACalculatedProperty(displayLength = 22, properties = {P_AwardDate, P_AwardType+"."+AwardType.P_Name})
    public String getDisplay() {
        String display = "";
        // awardDate
        awardDate = this.getAwardDate();
        if (awardDate != null) {
            if (display.length() > 0) display += " ";
            display += awardDate;
        }
        AwardType at = getAwardType();
        if (at != null) {
            if (display.length() > 0) display += " ";
            display += " " + at.getName();
        }
        
        return display;
    }
     
    @OACalculatedProperty(displayLength = 5, properties = {P_AwardCardOrders+"."+AwardCardOrder.P_Card})
    public String getCards() {
        String cards = "";
        // awardCardOrders.card
        Hub<AwardCardOrder> hubAwardCardOrders = this.getAwardCardOrders();
        for (AwardCardOrder awardCardOrder : hubAwardCardOrders) {
            Card card = awardCardOrder.getCard();
            if (card != null) {
                if (cards.length() > 0) cards += " ";
                cards += card.getName();
            }
        }
        return cards;
    }
     
    @OACalculatedProperty(displayName = "Selected Award Description", displayLength = 24, properties = {P_Product+"."+Product.P_Item, P_AwardCardOrders+"."+AwardCardOrder.P_Card, P_InternationalVisaAmount, P_CashSelectedDate, P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_Value})
    public String getSelectedAwardDescription() {
        String value = "";
        Product product = getProduct();
        if (product != null) {
            Item item = product.getItem();
            if (item != null) {
                value = item.getName();                           
            }
        }
    
        for (EmployeeAwardCharity eac : getEmployeeAwardCharities()) {
            Charity charity = eac.getCharity();
            if (charity == null) continue;
            double d = eac.getValue();
            if (d > 0) {
                if (value.length() > 0) value += ", ";
                value += "Charity: "+charity.getName()+" $"+String.format("%.2f", d);
            }
        }
    
        OADate date = getCashSelectedDate();
        if (date != null) {
            if (value.length() > 0) value += ", ";
            value += "Cash selected";
        }
        
        double d = getInternationalVisaAmount();
        if (d > 0) {
            if (value.length() > 0) value += ", ";
            value += "Visa: "+String.format("%.2f", d);
        }
        
        for (AwardCardOrder aco : getAwardCardOrders()) {
            Card card = aco.getCard();
            if (card == null) continue;
            if (value.length() > 0) value += ", ";
            if (aco.getCardType() == AwardCardOrder.CARDTYPE_Imagine) {
                value += "Hi5 Imagine Card";
            }
            else value += card.getName();
            value += " $"+aco.getValue();
        }
        
        if (value.length() == 0) {
            if (!getIsOpen()) value = "Award is closed";
            else value = "Award is Available";
        }
        return value;
    }
     
    @OACalculatedProperty(displayName = "Current Status", displayLength = 13, properties = {P_BillDate, P_PaidDate, P_ItemLastStatusDate, P_CompletedDate, P_AwardCardOrders+"."+AwardCardOrder.P_SentDate, P_AwardCardOrders+"."+AwardCardOrder.P_LastStatusDate, P_AwardCardOrders+"."+AwardCardOrder.P_CompletedDate, P_CancelDate, P_CashSelectedDate, P_InternationalVisaSelectedDate, P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_SentDate})
    public String getCurrentStatus() {
        String value = "";
        Product product = getProduct();
        Item item;
        if (product != null) {
            item = product.getItem();
        }
        else item = null;
    
        if (item != null) {
            OADate d = getItemSelectedDate();
            if (d != null) value = "Item Selected";
            d = getItemSentDate();
            if (d != null) value = "Item Shipped";
        }
        
        if (getCashSelectedDate() != null) {
            if (value.length() > 0) value += ", ";
            value += "Cash selected";
        }
        
        for (EmployeeAwardCharity eac : getEmployeeAwardCharities()) {
            Charity charity = eac.getCharity();
            if (charity == null) continue;
            double d = eac.getValue();
            if (d > 0) {
                if (value.length() > 0) value += ", ";
                value += "Charity "+charity.getName()+" selected";
            }
        }
        if (getInternationalVisaSelectedDate() != null) {
            if (value.length() > 0) value += ", ";
            value += "International Visa selected";
        }
    
        for (AwardCardOrder aco : getAwardCardOrders()) {
            Card card = aco.getCard();
            if (card == null) continue;
            if (value.length() > 0) value += ", ";
            OADate d = aco.getSentDate();
            if (d == null) value += "Selected";
            else if (card.getDigitalCard()) value += "E-mailed";
            else value += "Shipped";
        }
        if (value.length() == 0) {
            if (!getIsOpen()) value = "Award is closed";
            else value = "Award is Available";
        }
    
        return value;
    }
     
    @OACalculatedProperty(displayName = "Can Select Item", displayLength = 5, columnLength = 12, properties = {P_AwardCardOrders, P_ApprovedDate, P_IsOpen, P_EmployeeAwardCharities+"."+EmployeeAwardCharity.P_Value})
    public boolean getCanSelectProduct() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        if (!awardType.getUsesItems()) return false;
    
        if (getCashSelectedDate() != null) return false;
        
        for (EmployeeAwardCharity eac : getEmployeeAwardCharities()) {
            Charity charity = eac.getCharity();
            if (charity == null) continue;
            double d = eac.getValue();
            if (d > 0) return false;
        }
        
        if (getInternationalVisaSelectedDate() != null) return false;
        
        Hub<AwardCardOrder> hubAwardCardOrders = this.getAwardCardOrders();
        if (hubAwardCardOrders.getSize() > 0) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Can Select Card", displayLength = 5, columnLength = 12, properties = {P_AwardCardOrders+"."+AwardCardOrder.P_SentDate, P_AwardCardOrders, P_IsOpen, P_AwardType+"."+AwardType.P_UsesGiftCards})
    public boolean getCanSelectCard() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        if (!awardType.getUsesGiftCards()) return false;
        if (awardType.getAvailableCards().getSize() == 0) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Can Select Cash", displayLength = 5, properties = {P_AwardType+"."+AwardType.P_UsesCash, P_IsOpen, P_Balance})
    public boolean getCanSelectCash() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        if (!awardType.getUsesCash()) return false;
        if (getCashSelectedDate() != null) return false;
        if (getBalance() != awardType.getValue()) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Can Select Helping Hands", displayLength = 5, properties = {P_IsOpen, P_Balance, P_AwardType+"."+AwardType.P_UsesHelpingHands})
    public boolean getCanSelectHelpingHands() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        if (!awardType.getUsesHelpingHands()) return false;
    
        if (getCashSelectedDate() != null) return false;
        if (getInternationalVisaSelectedDate() != null) return false;
    
        if (getBalance() != awardType.getValue()) return false;
        
        Hub<AwardCardOrder> hubAwardCardOrders = this.getAwardCardOrders();
        if (hubAwardCardOrders.getSize() > 0) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Can Select Charity", displayLength = 5, properties = {P_IsOpen, P_AwardType+"."+AwardType.P_UsesCharity})
    public boolean getCanSelectCharity() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        if (!awardType.getUsesCharity()) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Can Select International Visa", displayLength = 5, properties = {P_IsOpen, P_AwardType+"."+AwardType.P_UsesInternationalVisa})
    public boolean getCanSelectInternationalVisa() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        if (getInternationalVisaSelectedDate() != null) return false;
        if (!awardType.getUsesInternationalVisa()) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Can Select Add On Item", displayLength = 5, properties = {P_IsOpen, P_InternationalVisaAmount, P_CashSelectedDate})
    public boolean getCanSelectAddOnItem() {
        if (!getIsOpen()) return false;
        AwardType awardType = this.getAwardType();
        if (awardType == null) return false;
        
        // 20130206 should be able to use on Imagine Card
        // if (getBalance() != awardType.getValue()) return false;
        
        if (getAddOnProduct() != null) return false;  // already selected
        Employee emp = getEmployee();
        if (emp == null) return false;
        if (getAddOnItems().getSize() == 0) return false;
        return true;
    }
     
    @OACalculatedProperty(displayName = "Uses Imagine Card", displayLength = 5, properties = {P_ImagineCard})
    public boolean getUsesImagineCard() {
        Card card = this.getImagineCard();
        return card != null;
    }
    
     
    @OACalculatedProperty(displayName = "Is Available", displayLength = 5)
    public boolean getIsAvailable() {
        Employee emp = this.getEmployee();
        if (emp == null) return false;
        Program prog = emp.getProgram();
        if (prog == null) return false;
        int days = prog.getEmployeeAwardDaysBefore();
        OADate d = getAwardDate();
        if (d == null) return false;
        return (d.getTime() <= new OADate().getTime() + (days * 86400000L));
    }
     
    @OAMany(
        displayName = "Add On Items", 
        toClass = AddOnItem.class, 
        isCalculated = true, 
        reverseName = AddOnItem.P_EmployeeAwards
    )
    public Hub<AddOnItem> getAddOnItems() {
        if (hubAddOnItems == null) {
            hubAddOnItems = new Hub<AddOnItem>(AddOnItem.class);
        }
        
        Hub<AddOnItem> h;
        AwardType at = getAwardType();
        if (at != null) {
            h = at.getAddOnItems();
            if (h.getSize() > 0) {
                hubAddOnItems.setSharedHub(h);
                return hubAddOnItems;
            }
        }
        
        Employee emp = getEmployee();
        if (emp == null) {
            hubAddOnItems.setSharedHub(null);
            return hubAddOnItems;
        }
        
        Location loc = emp.getLocation();
        for ( ;loc != null; loc = loc.getParentLocation()) {
            h = loc.getAddOnItems();
            if (h.getSize() > 0) {
                hubAddOnItems.setSharedHub(h);
                return hubAddOnItems;
            }
        }        
        Program p = emp.getProgram();
        if (p != null) {
            hubAddOnItems.setSharedHub(p.getAddOnItems());
        }
        else hubAddOnItems.setSharedHub(null);
        
        return hubAddOnItems;
    }
    @OAOne(
        displayName = "Add On Product", 
        reverseName = Product.P_AddOnProductEmployeeAwards, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"AddOnProductId"})
    public Product getAddOnProduct() {
        if (addOnProduct == null) {
            addOnProduct = (Product) getObject(P_AddOnProduct);
        }
        return addOnProduct;
    }
    
    public void setAddOnProduct(Product newValue) {
        fireBeforePropertyChange(P_AddOnProduct, this.addOnProduct, newValue);
        Product old = this.addOnProduct;
        this.addOnProduct = newValue;
        firePropertyChange(P_AddOnProduct, old, this.addOnProduct);
    }
    
    @OAMany(
        displayName = "Award Card Orders", 
        toClass = AwardCardOrder.class, 
        owner = true, 
        reverseName = AwardCardOrder.P_EmployeeAward, 
        cascadeSave = true, 
        cascadeDelete = true, 
        mustBeEmptyForDelete = true
    )
    public Hub<AwardCardOrder> getAwardCardOrders() {
        if (hubAwardCardOrders == null) {
            hubAwardCardOrders = (Hub<AwardCardOrder>) getHub(P_AwardCardOrders);
        }
        return hubAwardCardOrders;
    }
    
    @OAOne(
        displayName = "Award Type", 
        reverseName = AwardType.P_EmployeeAwards, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"AwardTypeId"})
    public AwardType getAwardType() {
        if (awardType == null) {
            awardType = (AwardType) getObject(P_AwardType);
        }
        return awardType;
    }
    
    public void setAwardType(AwardType newValue) {
        fireBeforePropertyChange(P_AwardType, this.awardType, newValue);
        AwardType old = this.awardType;
        this.awardType = newValue;
        firePropertyChange(P_AwardType, old, this.awardType);
    }
    
    @OAOne(
        displayName = "CEO Letter", 
        isCalculated = true, 
        reverseName = ProgramDocument.P_EmployeeAward
    )
    public ProgramDocument getCalcAnnouncementDocument() {
        AwardType at = getAwardType();
        if (at != null) {
            ProgramDocument doc = at.getAnnouncementDocument();
            if (doc != null) return doc;
        }
        
        Employee emp = getEmployee();
        if (emp == null) {
            if (at == null) return null;
            return at.getAnnouncementDocument();
        }
        
        Location loc = emp.getLocation();
        Program prog = null;
        for ( ;loc != null; loc = loc.getParentLocation()) {
            ProgramDocument doc = loc.getAnnouncementDocument();
            if (doc != null) return doc;
            if (prog == null) prog = loc.getProgram();
        }
        if (prog != null) {
            ProgramDocument doc = prog.getAnnouncementDocument();
            if (doc != null) return doc;
        }
        if (at == null) return null;
        return at.getAnnouncementDocument();
    }
    public void setCalcAnnouncementDocument(ProgramDocument newValue) {
        fireBeforePropertyChange(PROPERTY_CalcAnnouncementDocument, null, this.calcAnnouncementDocument);
        firePropertyChange(PROPERTY_CalcAnnouncementDocument, null, this.calcAnnouncementDocument);
    }
    @OAOne(
        displayName = "Ceo Image", 
        isCalculated = true, 
        owner = true, 
        reverseName = ImageStore.P_EmployeeAwardCeoImage, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    public ImageStore getCalcCeoImageStore() {
        AwardType at = getAwardType();
        if (at != null) {
            ImageStore is = at.getCeoImageStore();
            if (is != null) return is;
        }
        
        Employee emp = getEmployee();
        if (emp == null) {
            if (at == null) return null;
            return at.getCeoImageStore();
        }
        
        Location loc = emp.getLocation();
        Program prog = null;
        for ( ;loc != null; loc = loc.getParentLocation()) {
            ImageStore is = loc.getCeoImageStore();
            if (is != null) return is;
            if (prog == null) prog = loc.getProgram();
        }
        if (prog != null) {
            ImageStore is = prog.getCeoImageStore();
            if (is != null) return is;
        }
        if (at == null) return null;
        return at.getCeoImageStore();
    }
    public void setCalcCeoImageStore(ImageStore newValue) {
        fireBeforePropertyChange(PROPERTY_CalcCeoImageStore, null, newValue);
        firePropertyChange(PROPERTY_CalcCeoImageStore, null, newValue);
    }
    @OAOne(
        displayName = "CEO Signature Image", 
        isCalculated = true, 
        owner = true, 
        reverseName = ImageStore.P_EmployeeAwardCeoSignature, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowAddExisting = false
    )
    public ImageStore getCalcCeoSignatureImageStore() {
        AwardType at = getAwardType();
        if (at != null) {
            ImageStore is = at.getCeoSignatureImageStore();
            if (is != null) return is;
        }
        
        Employee emp = getEmployee();
        if (emp == null) {
            if (at == null) return null;
            return at.getCeoSignatureImageStore();
        }
        
        Location loc = emp.getLocation();
        Program prog = null;
        for ( ;loc != null; loc = loc.getParentLocation()) {
            ImageStore is = loc.getCeoSignatureImageStore();
            if (is != null) return is;
            if (prog == null) prog = loc.getProgram();
        }
        if (prog != null) {
            ImageStore is = prog.getCeoSignatureImageStore();
            if (is != null) return is;
        }
        if (at == null) return null;
        return at.getCeoSignatureImageStore();
    }
    public void setCalcCeoSignatureImageStore(ImageStore newValue) {
        fireBeforePropertyChange(PROPERTY_CalcCeoSignatureImageStore, null, newValue);
        firePropertyChange(PROPERTY_CalcCeoSignatureImageStore, null, newValue);
    }
    @OAOne(
        displayName = "Employee", 
        isCalculated = true, 
        reverseName = Employee.P_CalcAvailableEmployeeAwards, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Employee getCalcEmployee() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Confirm Email", 
        reverseName = Email.P_EmployeeAwardConfirm, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OAFkey(columns = {"ConfirmEmailId"})
    public Email getConfirmEmail() {
        if (confirmEmail == null) {
            confirmEmail = (Email) getObject(P_ConfirmEmail);
        }
        return confirmEmail;
    }
    
    public void setConfirmEmail(Email newValue) {
        fireBeforePropertyChange(P_ConfirmEmail, this.confirmEmail, newValue);
        Email old = this.confirmEmail;
        this.confirmEmail = newValue;
        firePropertyChange(P_ConfirmEmail, old, this.confirmEmail);
    }
    
    @OAOne(
        reverseName = Employee.P_EmployeeAwards, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAMany(
        displayName = "Employee Award Charities", 
        toClass = EmployeeAwardCharity.class, 
        owner = true, 
        reverseName = EmployeeAwardCharity.P_EmployeeAward, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<EmployeeAwardCharity> getEmployeeAwardCharities() {
        if (hubEmployeeAwardCharities == null) {
            hubEmployeeAwardCharities = (Hub<EmployeeAwardCharity>) getHub(P_EmployeeAwardCharities);
        }
        return hubEmployeeAwardCharities;
    }
    
    @OAOne(
        displayName = "Hinda Order", 
        reverseName = HindaOrder.P_EmployeeAward
    )
    public HindaOrder getHindaOrder() {
        if (hindaOrder == null) {
            hindaOrder = (HindaOrder) getObject(P_HindaOrder);
        }
        return hindaOrder;
    }
    
    public void setHindaOrder(HindaOrder newValue) {
        fireBeforePropertyChange(P_HindaOrder, this.hindaOrder, newValue);
        HindaOrder old = this.hindaOrder;
        this.hindaOrder = newValue;
        firePropertyChange(P_HindaOrder, old, this.hindaOrder);
    }
    
    @OAOne(
        displayName = "Imagine Card", 
        isCalculated = true, 
        reverseName = Card.P_ImagineEmployeeAwards
    )
    public Card getImagineCard() {
        AwardType at = getAwardType();
        if (at != null) {
            Card card = at.getImagineCard();
            if (card != null) return card;
        }
        Employee emp = getEmployee();
        if (emp == null) return null;
        Location loc = emp.getLocation();
        Card card = null;
        Program prog = null;
        for ( ; loc != null && card == null; loc = loc.getParentLocation()) {
            card = loc.getImagineCard();
            if (prog == null) prog = loc.getProgram();
        }
        if (card == null && prog != null) card = prog.getImagineCard();
        return card;
    }
    public void setImageCard(Card newValue) {
    }
    @OAOne(
        displayName = "Manager Notify Email", 
        reverseName = Email.P_EmployeeAwardManagerNotify, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"ManagerNotifyEmailId"})
    public Email getManagerNotifyEmail() {
        if (managerNotifyEmail == null) {
            managerNotifyEmail = (Email) getObject(P_ManagerNotifyEmail);
        }
        return managerNotifyEmail;
    }
    
    public void setManagerNotifyEmail(Email newValue) {
        fireBeforePropertyChange(P_ManagerNotifyEmail, this.managerNotifyEmail, newValue);
        Email old = this.managerNotifyEmail;
        this.managerNotifyEmail = newValue;
        firePropertyChange(P_ManagerNotifyEmail, old, this.managerNotifyEmail);
    }
    
    @OAOne(
        displayName = "Notify Email", 
        reverseName = Email.P_EmployeeAwardNotify, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OAFkey(columns = {"NotifyEmailId"})
    public Email getNotifyEmail() {
        if (notifyEmail == null) {
            notifyEmail = (Email) getObject(P_NotifyEmail);
        }
        return notifyEmail;
    }
    
    public void setNotifyEmail(Email newValue) {
        fireBeforePropertyChange(P_NotifyEmail, this.notifyEmail, newValue);
        Email old = this.notifyEmail;
        this.notifyEmail = newValue;
        firePropertyChange(P_NotifyEmail, old, this.notifyEmail);
    }
    
    @OAOne(
        reverseName = Product.P_EmployeeAwards, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProductId"})
    public Product getProduct() {
        if (product == null) {
            product = (Product) getObject(P_Product);
        }
        return product;
    }
    
    public void setProduct(Product newValue) {
        fireBeforePropertyChange(P_Product, this.product, newValue);
        Product old = this.product;
        this.product = newValue;
        firePropertyChange(P_Product, old, this.product);
    }
    
    @OAMany(
        displayName = "Shipped Emails", 
        toClass = Email.class, 
        reverseName = Email.P_EmployeeAwardShipped, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    @OALinkTable(name = "EmailEmployeeAward", indexName = "EmailEmployeeAwardShipped", columns = {"EmployeeAwardShippedId"})
    public Hub<Email> getShippedEmails() {
        if (hubShippedEmails == null) {
            hubShippedEmails = (Hub<Email>) getHub(P_ShippedEmails);
        }
        return hubShippedEmails;
    }
    
    @OAOne(
        displayName = "Ship To", 
        reverseName = ShipTo.P_EmployeeAward, 
        cascadeSave = true, 
        cascadeDelete = true, 
        autoCreateNew = true
    )
    @OAFkey(columns = {"ShipToId"})
    public ShipTo getShipTo() {
        if (shipTo == null) {
            shipTo = (ShipTo) getObject(P_ShipTo);
        }
        return shipTo;
    }
    
    public void setShipTo(ShipTo newValue) {
        fireBeforePropertyChange(P_ShipTo, this.shipTo, newValue);
        ShipTo old = this.shipTo;
        this.shipTo = newValue;
        firePropertyChange(P_ShipTo, old, this.shipTo);
    }
    
    @OAMany(
        toClass = Value.class, 
        isCalculated = true, 
        reverseName = Value.P_EmployeeAward
    )
    public Hub<Value> getValues() {
        if (hubValues == null) {
            hubValues = (Hub<Value>) getHub(P_Values);
/*            
            FilteredHub<Value> fh = new FilteredHub<Value>(ModelDelegate.getValues()) {
                protected boolean isUsed(Value cv) {
                    return (cv.getValue() <= getBalance());
                };
            };
            fh.addDependentProperty(this, PROPERTY_Balance);
            hubValues = fh;
*/            
        }
        return hubValues;
    }
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        date = rs.getDate(3);
        if (date != null) this.awardDate = new OADate(date);
        date = rs.getDate(4);
        if (date != null) this.approvedDate = new OADate(date);
        date = rs.getDate(5);
        if (date != null) this.packageSentDate = new OADate(date);
        this.packageTracking = rs.getString(6);
        this.packageShippingInfo = rs.getString(7);
        this.packageInvoiceNumber = rs.getString(8);
        date = rs.getDate(9);
        if (date != null) this.packageBillDate = new OADate(date);
        date = rs.getDate(10);
        if (date != null) this.billDate = new OADate(date);
        date = rs.getDate(11);
        if (date != null) this.packagePaidDate = new OADate(date);
        date = rs.getDate(12);
        if (date != null) this.paidDate = new OADate(date);
        date = rs.getDate(13);
        if (date != null) this.itemSelectedDate = new OADate(date);
        date = rs.getDate(14);
        if (date != null) this.itemSentDate = new OADate(date);
        this.itemShippingInfo = rs.getString(15);
        this.itemTracking = rs.getString(16);
        date = rs.getDate(17);
        if (date != null) this.itemBillDate = new OADate(date);
        date = rs.getDate(18);
        if (date != null) this.itemLastStatusDate = new OADate(date);
        this.itemLastStatus = rs.getString(19);
        this.itemInvoiceNumber = rs.getString(20);
        this.itemVendorInvoiced = rs.getBoolean(21);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, EmployeeAward.P_ItemVendorInvoiced, true);
        }
        date = rs.getDate(22);
        if (date != null) this.itemPaidDate = new OADate(date);
        date = rs.getDate(23);
        if (date != null) this.completedDate = new OADate(date);
        date = rs.getDate(24);
        if (date != null) this.cancelDate = new OADate(date);
        this.cancelReason = rs.getString(25);
        date = rs.getDate(26);
        if (date != null) this.cashSelectedDate = new OADate(date);
        date = rs.getDate(27);
        if (date != null) this.cashSentDate = new OADate(date);
        date = rs.getDate(28);
        if (date != null) this.internationalVisaSelectedDate = new OADate(date);
        this.internationalVisaAmount = (double) rs.getDouble(29);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, EmployeeAward.P_InternationalVisaAmount, true);
        }
        date = rs.getDate(30);
        if (date != null) this.internationalVisaSentDate = new OADate(date);
        date = rs.getDate(31);
        if (date != null) this.addOnProductSelectedDate = new OADate(date);
        this.mergeId = (int) rs.getInt(32);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, EmployeeAward.P_MergeId, true);
        }
        this.cashInvoiceNumber = rs.getString(33);
        date = rs.getDate(34);
        if (date != null) this.cashinvoiceDate = new OADate(date);
        this.internationalVisaInvoiceNumber = rs.getString(35);
        date = rs.getDate(36);
        if (date != null) this.internationVisaInvoiceDate = new OADate(date);
        this.internationalVisaVendorInvoiced = rs.getBoolean(37);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, EmployeeAward.P_InternationalVisaVendorInvoiced, true);
        }
        int addOnProductFkey = rs.getInt(38);
        if (!rs.wasNull() && addOnProductFkey > 0) {
            setProperty(P_AddOnProduct, new OAObjectKey(addOnProductFkey));
        }
        int awardTypeFkey = rs.getInt(39);
        if (!rs.wasNull() && awardTypeFkey > 0) {
            setProperty(P_AwardType, new OAObjectKey(awardTypeFkey));
        }
        int confirmEmailFkey = rs.getInt(40);
        if (!rs.wasNull() && confirmEmailFkey > 0) {
            setProperty(P_ConfirmEmail, new OAObjectKey(confirmEmailFkey));
        }
        int employeeFkey = rs.getInt(41);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int managerNotifyEmailFkey = rs.getInt(42);
        if (!rs.wasNull() && managerNotifyEmailFkey > 0) {
            setProperty(P_ManagerNotifyEmail, new OAObjectKey(managerNotifyEmailFkey));
        }
        int notifyEmailFkey = rs.getInt(43);
        if (!rs.wasNull() && notifyEmailFkey > 0) {
            setProperty(P_NotifyEmail, new OAObjectKey(notifyEmailFkey));
        }
        int productFkey = rs.getInt(44);
        if (!rs.wasNull() && productFkey > 0) {
            setProperty(P_Product, new OAObjectKey(productFkey));
        }
        int shipToFkey = rs.getInt(45);
        if (!rs.wasNull() && shipToFkey > 0) {
            setProperty(P_ShipTo, new OAObjectKey(shipToFkey));
        }
        if (rs.getMetaData().getColumnCount() != 45) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

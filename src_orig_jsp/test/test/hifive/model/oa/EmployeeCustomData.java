// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "ecd",
    displayName = "Employee Custom Data",
    displayProperty = "customData"
)
@OATable(
    indexes = {
        @OAIndex(name = "EmployeeCustomDataEmployee", columns = { @OAIndexColumn(name = "EmployeeId") })
    }
)
public class EmployeeCustomData extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Value = "Value";
    public static final String P_Value = "Value";
     
    public static final String PROPERTY_Code = "Code";
    public static final String P_Code = "Code";
     
    public static final String PROPERTY_CustomData = "CustomData";
    public static final String P_CustomData = "CustomData";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
     
    protected int id;
    protected String value;
     
    // Links to other objects.
    protected transient CustomData customData;
    protected transient Employee employee;
     
    public EmployeeCustomData() {
    }
     
    public EmployeeCustomData(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 125, displayLength = 20)
    @OAColumn(maxLength = 125)
    public String getValue() {
        return value;
    }
    
    public void setValue(String newValue) {
        fireBeforePropertyChange(P_Value, this.value, newValue);
        String old = value;
        this.value = newValue;
        firePropertyChange(P_Value, old, this.value);
    }
    @OACalculatedProperty(displayLength = 4)
    public String getCode() {
        CustomData cd = 
    getCustomData();
        if (cd == null) return null;
        return cd.getCode();
    }
    
     
    @OAOne(
        displayName = "Custom Data", 
        reverseName = CustomData.P_EmployeeCustomDatas, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CustomDataId"})
    public CustomData getCustomData() {
        if (customData == null) {
            customData = (CustomData) getObject(P_CustomData);
        }
        return customData;
    }
    
    public void setCustomData(CustomData newValue) {
        fireBeforePropertyChange(P_CustomData, this.customData, newValue);
        CustomData old = this.customData;
        this.customData = newValue;
        firePropertyChange(P_CustomData, old, this.customData);
    }
    
    @OAOne(
        reverseName = Employee.P_EmployeeCustomDatas, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.value = rs.getString(2);
        int customDataFkey = rs.getInt(3);
        if (!rs.wasNull() && customDataFkey > 0) {
            setProperty(P_CustomData, new OAObjectKey(customDataFkey));
        }
        int employeeFkey = rs.getInt(4);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

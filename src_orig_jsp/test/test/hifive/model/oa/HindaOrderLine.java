// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "hol",
    displayName = "Hinda Order Line",
    displayProperty = "orderLineNumber"
)
@OATable(
    indexes = {
        @OAIndex(name = "HindaOrderLineHindaOrder", columns = { @OAIndexColumn(name = "HindaOrderId") })
    }
)
public class HindaOrderLine extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_OrderLineNumber = "OrderLineNumber";
    public static final String P_OrderLineNumber = "OrderLineNumber";
    public static final String PROPERTY_QuantityBackOrdered = "QuantityBackOrdered";
    public static final String P_QuantityBackOrdered = "QuantityBackOrdered";
    public static final String PROPERTY_QuantityOrdered = "QuantityOrdered";
    public static final String P_QuantityOrdered = "QuantityOrdered";
    public static final String PROPERTY_QuantityCanceled = "QuantityCanceled";
    public static final String P_QuantityCanceled = "QuantityCanceled";
    public static final String PROPERTY_QuantityReserved = "QuantityReserved";
    public static final String P_QuantityReserved = "QuantityReserved";
    public static final String PROPERTY_QuantityShipped = "QuantityShipped";
    public static final String P_QuantityShipped = "QuantityShipped";
    public static final String PROPERTY_TrackingNumber = "TrackingNumber";
    public static final String P_TrackingNumber = "TrackingNumber";
    public static final String PROPERTY_CarrierCode = "CarrierCode";
    public static final String P_CarrierCode = "CarrierCode";
    public static final String PROPERTY_TrackingUrl = "TrackingUrl";
    public static final String P_TrackingUrl = "TrackingUrl";
    public static final String PROPERTY_ShippedDate = "ShippedDate";
    public static final String P_ShippedDate = "ShippedDate";
    public static final String PROPERTY_ClientOrderLineNumber = "ClientOrderLineNumber";
    public static final String P_ClientOrderLineNumber = "ClientOrderLineNumber";
     
     
    public static final String PROPERTY_HindaOrder = "HindaOrder";
    public static final String P_HindaOrder = "HindaOrder";
     
    protected int id;
    protected int orderLineNumber;
    protected int quantityBackOrdered;
    protected int quantityOrdered;
    protected int quantityCanceled;
    protected int quantityReserved;
    protected int quantityShipped;
    protected String trackingNumber;
    protected String carrierCode;
    protected String trackingUrl;
    protected OADateTime shippedDate;
    protected String clientOrderLineNumber;
     
    // Links to other objects.
    protected transient HindaOrder hindaOrder;
     
    public HindaOrderLine() {
    }
     
    public HindaOrderLine(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Order Line Number", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getOrderLineNumber() {
        return orderLineNumber;
    }
    
    public void setOrderLineNumber(int newValue) {
        fireBeforePropertyChange(P_OrderLineNumber, this.orderLineNumber, newValue);
        int old = orderLineNumber;
        this.orderLineNumber = newValue;
        firePropertyChange(P_OrderLineNumber, old, this.orderLineNumber);
    }
    @OAProperty(displayName = "Quantity Back Ordered", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantityBackOrdered() {
        return quantityBackOrdered;
    }
    
    public void setQuantityBackOrdered(int newValue) {
        fireBeforePropertyChange(P_QuantityBackOrdered, this.quantityBackOrdered, newValue);
        int old = quantityBackOrdered;
        this.quantityBackOrdered = newValue;
        firePropertyChange(P_QuantityBackOrdered, old, this.quantityBackOrdered);
    }
    @OAProperty(displayName = "Quantity Ordered", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantityOrdered() {
        return quantityOrdered;
    }
    
    public void setQuantityOrdered(int newValue) {
        fireBeforePropertyChange(P_QuantityOrdered, this.quantityOrdered, newValue);
        int old = quantityOrdered;
        this.quantityOrdered = newValue;
        firePropertyChange(P_QuantityOrdered, old, this.quantityOrdered);
    }
    @OAProperty(displayName = "Quantity Canceled", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantityCanceled() {
        return quantityCanceled;
    }
    
    public void setQuantityCanceled(int newValue) {
        fireBeforePropertyChange(P_QuantityCanceled, this.quantityCanceled, newValue);
        int old = quantityCanceled;
        this.quantityCanceled = newValue;
        firePropertyChange(P_QuantityCanceled, old, this.quantityCanceled);
    }
    @OAProperty(displayName = "Quantity Reserved", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantityReserved() {
        return quantityReserved;
    }
    
    public void setQuantityReserved(int newValue) {
        fireBeforePropertyChange(P_QuantityReserved, this.quantityReserved, newValue);
        int old = quantityReserved;
        this.quantityReserved = newValue;
        firePropertyChange(P_QuantityReserved, old, this.quantityReserved);
    }
    @OAProperty(displayName = "Quantity Shipped", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuantityShipped() {
        return quantityShipped;
    }
    
    public void setQuantityShipped(int newValue) {
        fireBeforePropertyChange(P_QuantityShipped, this.quantityShipped, newValue);
        int old = quantityShipped;
        this.quantityShipped = newValue;
        firePropertyChange(P_QuantityShipped, old, this.quantityShipped);
    }
    @OAProperty(displayName = "Tracking Number", maxLength = 50, displayLength = 40)
    @OAColumn(maxLength = 50)
    public String getTrackingNumber() {
        return trackingNumber;
    }
    
    public void setTrackingNumber(String newValue) {
        fireBeforePropertyChange(P_TrackingNumber, this.trackingNumber, newValue);
        String old = trackingNumber;
        this.trackingNumber = newValue;
        firePropertyChange(P_TrackingNumber, old, this.trackingNumber);
    }
    @OAProperty(displayName = "Carrier Code", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getCarrierCode() {
        return carrierCode;
    }
    
    public void setCarrierCode(String newValue) {
        fireBeforePropertyChange(P_CarrierCode, this.carrierCode, newValue);
        String old = carrierCode;
        this.carrierCode = newValue;
        firePropertyChange(P_CarrierCode, old, this.carrierCode);
    }
    @OAProperty(displayName = "Tracking Url", maxLength = 150, displayLength = 40)
    @OAColumn(maxLength = 150)
    public String getTrackingUrl() {
        return trackingUrl;
    }
    
    public void setTrackingUrl(String newValue) {
        fireBeforePropertyChange(P_TrackingUrl, this.trackingUrl, newValue);
        String old = trackingUrl;
        this.trackingUrl = newValue;
        firePropertyChange(P_TrackingUrl, old, this.trackingUrl);
    }
    @OAProperty(displayName = "Shipped Date", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getShippedDate() {
        return shippedDate;
    }
    
    public void setShippedDate(OADateTime newValue) {
        fireBeforePropertyChange(P_ShippedDate, this.shippedDate, newValue);
        OADateTime old = shippedDate;
        this.shippedDate = newValue;
        firePropertyChange(P_ShippedDate, old, this.shippedDate);
    }
    @OAProperty(displayName = "Client Order Line Number", maxLength = 25, displayLength = 25)
    @OAColumn(maxLength = 25)
    public String getClientOrderLineNumber() {
        return clientOrderLineNumber;
    }
    
    public void setClientOrderLineNumber(String newValue) {
        fireBeforePropertyChange(P_ClientOrderLineNumber, this.clientOrderLineNumber, newValue);
        String old = clientOrderLineNumber;
        this.clientOrderLineNumber = newValue;
        firePropertyChange(P_ClientOrderLineNumber, old, this.clientOrderLineNumber);
    }
    @OAOne(
        displayName = "Hinda Order", 
        reverseName = HindaOrder.P_HindaOrderLines, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"HindaOrderId"})
    public HindaOrder getHindaOrder() {
        if (hindaOrder == null) {
            hindaOrder = (HindaOrder) getObject(P_HindaOrder);
        }
        return hindaOrder;
    }
    
    public void setHindaOrder(HindaOrder newValue) {
        fireBeforePropertyChange(P_HindaOrder, this.hindaOrder, newValue);
        HindaOrder old = this.hindaOrder;
        this.hindaOrder = newValue;
        firePropertyChange(P_HindaOrder, old, this.hindaOrder);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.orderLineNumber = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, HindaOrderLine.P_OrderLineNumber, true);
        }
        this.quantityBackOrdered = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, HindaOrderLine.P_QuantityBackOrdered, true);
        }
        this.quantityOrdered = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, HindaOrderLine.P_QuantityOrdered, true);
        }
        this.quantityCanceled = (int) rs.getInt(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, HindaOrderLine.P_QuantityCanceled, true);
        }
        this.quantityReserved = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, HindaOrderLine.P_QuantityReserved, true);
        }
        this.quantityShipped = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, HindaOrderLine.P_QuantityShipped, true);
        }
        this.trackingNumber = rs.getString(8);
        this.carrierCode = rs.getString(9);
        this.trackingUrl = rs.getString(10);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(11);
        if (timestamp != null) this.shippedDate = new OADateTime(timestamp);
        this.clientOrderLineNumber = rs.getString(12);
        int hindaOrderFkey = rs.getInt(13);
        if (!rs.wasNull() && hindaOrderFkey > 0) {
            setProperty(P_HindaOrder, new OAObjectKey(hindaOrderFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

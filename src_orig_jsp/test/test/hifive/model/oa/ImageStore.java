// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import java.awt.Image;
import java.io.IOException;
import com.viaoa.image.OAImageUtil;
 
@OAClass(
    shortName = "is",
    displayName = "Image",
    displayProperty = "origFileName"
)
@OATable(
    indexes = {
        @OAIndex(name = "ImageStoreLogoProgram", columns = { @OAIndexColumn(name = "LogoProgramId") }), 
        @OAIndex(name = "ImageStoreProgram", columns = { @OAIndexColumn(name = "ProgramId") })
    }
)
public class ImageStore extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_OrigFileName = "OrigFileName";
    public static final String P_OrigFileName = "OrigFileName";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_LastUpdate = "LastUpdate";
    public static final String P_LastUpdate = "LastUpdate";
    public static final String PROPERTY_Bytes = "Bytes";
    public static final String P_Bytes = "Bytes";
     
     
    public static final String PROPERTY_AwardType = "AwardType";
    public static final String P_AwardType = "AwardType";
    public static final String PROPERTY_AwardTypes = "AwardTypes";
    public static final String P_AwardTypes = "AwardTypes";
    public static final String PROPERTY_CalcCeoAwardType = "CalcCeoAwardType";
    public static final String P_CalcCeoAwardType = "CalcCeoAwardType";
    public static final String PROPERTY_CalcCeoSignatureAwardType = "CalcCeoSignatureAwardType";
    public static final String P_CalcCeoSignatureAwardType = "CalcCeoSignatureAwardType";
    public static final String PROPERTY_CalcLogoStampLocation = "CalcLogoStampLocation";
    public static final String P_CalcLogoStampLocation = "CalcLogoStampLocation";
    public static final String PROPERTY_Card = "Card";
    public static final String P_Card = "Card";
    public static final String PROPERTY_CeoLocation = "CeoLocation";
    public static final String P_CeoLocation = "CeoLocation";
    public static final String PROPERTY_CeoProgram = "CeoProgram";
    public static final String P_CeoProgram = "CeoProgram";
    public static final String PROPERTY_CeoSignatureLocation = "CeoSignatureLocation";
    public static final String P_CeoSignatureLocation = "CeoSignatureLocation";
    public static final String PROPERTY_CeoSignatureProgram = "CeoSignatureProgram";
    public static final String P_CeoSignatureProgram = "CeoSignatureProgram";
    public static final String PROPERTY_Charity = "Charity";
    public static final String P_Charity = "Charity";
    public static final String PROPERTY_Ecard = "Ecard";
    public static final String P_Ecard = "Ecard";
    public static final String PROPERTY_EmployeeAwardCeoImage = "EmployeeAwardCeoImage";
    public static final String P_EmployeeAwardCeoImage = "EmployeeAwardCeoImage";
    public static final String PROPERTY_EmployeeAwardCeoSignature = "EmployeeAwardCeoSignature";
    public static final String P_EmployeeAwardCeoSignature = "EmployeeAwardCeoSignature";
    public static final String PROPERTY_Item = "Item";
    public static final String P_Item = "Item";
    public static final String PROPERTY_LocationLogo = "LocationLogo";
    public static final String P_LocationLogo = "LocationLogo";
    public static final String PROPERTY_LocationPageInfo = "LocationPageInfo";
    public static final String P_LocationPageInfo = "LocationPageInfo";
    public static final String PROPERTY_LoginImage = "LoginImage";
    public static final String P_LoginImage = "LoginImage";
    public static final String PROPERTY_LogoProgram = "LogoProgram";
    public static final String P_LogoProgram = "LogoProgram";
    public static final String PROPERTY_LogoStampLocation = "LogoStampLocation";
    public static final String P_LogoStampLocation = "LogoStampLocation";
    public static final String PROPERTY_Merchant = "Merchant";
    public static final String P_Merchant = "Merchant";
    public static final String PROPERTY_PageGroupPageInfos = "PageGroupPageInfos";
    public static final String P_PageGroupPageInfos = "PageGroupPageInfos";
    public static final String PROPERTY_PageThemePageInfo = "PageThemePageInfo";
    public static final String P_PageThemePageInfo = "PageThemePageInfo";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
    public static final String PROPERTY_ProgramLogoStamp = "ProgramLogoStamp";
    public static final String P_ProgramLogoStamp = "ProgramLogoStamp";
    public static final String PROPERTY_ProgramPageInfo = "ProgramPageInfo";
    public static final String P_ProgramPageInfo = "ProgramPageInfo";
     
    protected int id;
    protected OADate created;
    protected String origFileName;
    protected String description;
    protected OADate lastUpdate;
    protected transient byte[] bytes;
     
    // Links to other objects.
    protected transient AwardType calcCeoAwardType;
     
    public ImageStore() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public ImageStore(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 8, columnLength = 6)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Date", defaultValue = "new OADate()", displayLength = 10, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Orig File Name", maxLength = 75, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getOrigFileName() {
        return origFileName;
    }
    
    public void setOrigFileName(String newValue) {
        fireBeforePropertyChange(P_OrigFileName, this.origFileName, newValue);
        String old = origFileName;
        this.origFileName = newValue;
        firePropertyChange(P_OrigFileName, old, this.origFileName);
    }
    @OAProperty(maxLength = 55, displayLength = 25, columnLength = 15)
    @OAColumn(maxLength = 55)
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String newValue) {
        fireBeforePropertyChange(P_Description, this.description, newValue);
        String old = description;
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(displayName = "Last Update", displayLength = 8, columnLength = 12, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getLastUpdate() {
        return lastUpdate;
    }
    
    public void setLastUpdate(OADate newValue) {
        fireBeforePropertyChange(P_LastUpdate, this.lastUpdate, newValue);
        OADate old = lastUpdate;
        this.lastUpdate = newValue;
        firePropertyChange(P_LastUpdate, old, this.lastUpdate);
    }
    @OAProperty(displayName = "Image", isBlob = true, displayLength = 5, isImageName = true)
    @OAColumn(sqlType = java.sql.Types.BLOB)
    public byte[] getBytes() {
        if (bytes == null) {
            bytes = getBlob(P_Bytes);
        }
        return bytes;
    }
    
    public void setBytes(byte[] newValue) {
        fireBeforePropertyChange(P_Bytes, this.bytes, newValue);
        byte[] old = bytes;
        this.bytes = newValue;
        firePropertyChange(P_Bytes, old, this.bytes);
    }
    @OAOne(
        displayName = "Award Type", 
        reverseName = AwardType.P_CeoImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private AwardType getAwardType() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Award Types", 
        toClass = AwardType.class, 
        reverseName = AwardType.P_CeoSignatureImageStore, 
        createMethod = false
    )
    private Hub<AwardType> getAwardTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Calc Ceo Award Type", 
        isCalculated = true, 
        reverseName = AwardType.P_CalcCeoImageStore, 
        required = true, 
        allowCreateNew = false
    )
    public AwardType getCalcCeoAwardType() {
        if (calcCeoAwardType == null) {
            calcCeoAwardType = (AwardType) getObject(P_CalcCeoAwardType);
        }
        return calcCeoAwardType;
    }
    
    public void setCalcCeoAwardType(AwardType newValue) {
        fireBeforePropertyChange(P_CalcCeoAwardType, this.calcCeoAwardType, newValue);
        AwardType old = this.calcCeoAwardType;
        this.calcCeoAwardType = newValue;
        firePropertyChange(P_CalcCeoAwardType, old, this.calcCeoAwardType);
    }
    
    @OAOne(
        displayName = "Calc Ceo Signature Award Type", 
        isCalculated = true, 
        reverseName = AwardType.P_CalcCeoSignatureImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private AwardType getCalcCeoSignatureAwardType() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Calc Logo Stamp Location", 
        isCalculated = true, 
        reverseName = Location.P_CalcLogoStampImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Location getCalcLogoStampLocation() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Card.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Card getCard() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Ceo Location", 
        reverseName = Location.P_CeoImageStore, 
        required = true, 
        allowCreateNew = false, 
        mustBeEmptyForDelete = true
    )
    private Location getCeoLocation() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "CEO Program", 
        reverseName = Program.P_CeoImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Program getCeoProgram() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Ceo Signature Location", 
        reverseName = Location.P_CeoSignatureImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Location getCeoSignatureLocation() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "CEO Signature Program", 
        reverseName = Program.P_CeoSignatureImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Program getCeoSignatureProgram() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Charity.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Charity getCharity() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Ecard.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Ecard getEcard() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Award Ceo Image", 
        isCalculated = true, 
        reverseName = EmployeeAward.P_CalcCeoImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private EmployeeAward getEmployeeAwardCeoImage() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Employee Award Ceo Signature", 
        isCalculated = true, 
        reverseName = EmployeeAward.P_CalcCeoSignatureImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private EmployeeAward getEmployeeAwardCeoSignature() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Item.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Item getItem() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Location Logo", 
        reverseName = Location.P_LogoImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Location getLocationLogo() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Location Page Info", 
        reverseName = LocationPageInfo.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private LocationPageInfo getLocationPageInfo() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Login Image", 
        reverseName = LoginImage.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private LoginImage getLoginImage() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Logo Program", 
        reverseName = Program.P_LogoImageStores, 
        required = true, 
        allowCreateNew = false
    )
    @OALinkTable(name = "ProgramImageStore", indexName = "ProgramLogoImageStore", columns = {"ImageStoreId"})
    private Program getLogoProgram() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Logo Stamp Location", 
        reverseName = Location.P_LogoStampImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Location getLogoStampLocation() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Merchant.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Merchant getMerchant() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Page Group Page Infos", 
        toClass = PageGroupPageInfo.class, 
        reverseName = PageGroupPageInfo.P_ImageStore, 
        createMethod = false
    )
    private Hub<PageGroupPageInfo> getPageGroupPageInfos() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Page Theme Page Info", 
        reverseName = PageThemePageInfo.P_ImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private PageThemePageInfo getPageThemePageInfo() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Program.P_ImageStores, 
        required = true, 
        allowCreateNew = false
    )
    @OALinkTable(name = "ImageStoreProgram", indexName = "ProgramImageStore", columns = {"ImageStoreId"})
    private Program getProgram() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Program LogoStamp", 
        reverseName = Program.P_LogoStampImageStore, 
        required = true, 
        allowCreateNew = false
    )
    private Program getProgramLogoStamp() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Program Page Info", 
        reverseName = ProgramPageInfo.P_ImageStore, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private ProgramPageInfo getProgramPageInfo() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    // imageHandling
    // Note: uses "png" structure
    public Image getImage() {
        try {
            getBytes();
            if (bytes != null) return OAImageUtil.convertToBufferedImage(bytes);
        }
        catch (IOException e) {
            System.out.println("ImageStore.getImage() exception="+e+", will return null");
        }
        return null;
    }
    public void setImage(Image img) {
        byte[] bs;
        if (img == null) bs = null;
        else {
            try {
                bs = OAImageUtil.convertToBytes(img);
            }
            catch (IOException e) {
                bs = null;
                System.out.println("ImageStore.setImage() exception="+e+", will use null");
            }
        }
        setBytes(bs);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.origFileName = rs.getString(3);
        this.description = rs.getString(4);
        date = rs.getDate(5);
        if (date != null) this.lastUpdate = new OADate(date);
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

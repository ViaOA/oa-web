// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ia",
    displayName = "Inspire Approval",
    displayProperty = "employee.fullName"
)
@OATable(
    indexes = {
        @OAIndex(name = "InspireApprovalEmployee", columns = { @OAIndexColumn(name = "EmployeeId") }), 
        @OAIndex(name = "InspireApprovalInspireRecipient", columns = { @OAIndexColumn(name = "InspireRecipientId") })
    }
)
public class InspireApproval extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Status = "Status";
    public static final String P_Status = "Status";
    public static final String PROPERTY_StatusAsString = "StatusAsString";
    public static final String P_StatusAsString = "StatusAsString";
    public static final String PROPERTY_StatusDate = "StatusDate";
    public static final String P_StatusDate = "StatusDate";
    public static final String PROPERTY_Comments = "Comments";
    public static final String P_Comments = "Comments";
     
     
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_InspireAwardLevel = "InspireAwardLevel";
    public static final String P_InspireAwardLevel = "InspireAwardLevel";
    public static final String PROPERTY_InspireRecipient = "InspireRecipient";
    public static final String P_InspireRecipient = "InspireRecipient";
    public static final String PROPERTY_ReminderEmails = "ReminderEmails";
    public static final String P_ReminderEmails = "ReminderEmails";
     
    protected int id;
    protected OADate created;
    protected int status;
    public static final int STATUS_InProgress = 0;
    public static final int STATUS_Approved = 1;
    public static final int STATUS_Denied = 2;
    public static final Hub<String> hubStatus;
    static {
        hubStatus = new Hub<String>(String.class);
        hubStatus.addElement("In Progress");
        hubStatus.addElement("Approved");
        hubStatus.addElement("Denied");
    }
    protected OADate statusDate;
    protected String comments;
     
    // Links to other objects.
    protected transient Email email;
    protected transient Employee employee;
    protected transient InspireAwardLevel inspireAwardLevel;
    protected transient InspireRecipient inspireRecipient;
    protected transient Hub<Email> hubReminderEmails;
     
    public InspireApproval() {
        if (!isLoading()) {
            setCreated(new OADate());
            setStatus(0);
        }
    }
     
    public InspireApproval(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(defaultValue = "0", displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getStatus() {
        return status;
    }
    public void setStatus(int newValue) {
        int old = status;
        fireBeforePropertyChange(PROPERTY_Status, old, newValue);
        this.status = newValue;
        firePropertyChange(PROPERTY_Status, old, this.status);
        if (!isServer()) return;
        setStatusDate(new OADate());
    }
    public String getStatusAsString() {
        if (isNull(P_Status)) return "";
        String s = hubStatus.getAt(getStatus());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Status Date", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getStatusDate() {
        return statusDate;
    }
    
    public void setStatusDate(OADate newValue) {
        fireBeforePropertyChange(P_StatusDate, this.statusDate, newValue);
        OADate old = statusDate;
        this.statusDate = newValue;
        firePropertyChange(P_StatusDate, old, this.statusDate);
    }
    @OAProperty(maxLength = 250, displayLength = 40, columnLength = 22)
    @OAColumn(maxLength = 250)
    public String getComments() {
        return comments;
    }
    
    public void setComments(String newValue) {
        fireBeforePropertyChange(P_Comments, this.comments, newValue);
        String old = comments;
        this.comments = newValue;
        firePropertyChange(P_Comments, old, this.comments);
    }
    @OAOne(
        reverseName = Email.P_InspireApproval, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"EmailId"})
    public Email getEmail() {
        if (email == null) {
            email = (Email) getObject(P_Email);
        }
        return email;
    }
    
    public void setEmail(Email newValue) {
        fireBeforePropertyChange(P_Email, this.email, newValue);
        Email old = this.email;
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
    
    @OAOne(
        reverseName = Employee.P_InspireApprovals, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAOne(
        displayName = "Inspire Award Level", 
        reverseName = InspireAwardLevel.P_InspireApprovals, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspireAwardLevelId"})
    public InspireAwardLevel getInspireAwardLevel() {
        if (inspireAwardLevel == null) {
            inspireAwardLevel = (InspireAwardLevel) getObject(P_InspireAwardLevel);
        }
        return inspireAwardLevel;
    }
    
    public void setInspireAwardLevel(InspireAwardLevel newValue) {
        fireBeforePropertyChange(P_InspireAwardLevel, this.inspireAwardLevel, newValue);
        InspireAwardLevel old = this.inspireAwardLevel;
        this.inspireAwardLevel = newValue;
        firePropertyChange(P_InspireAwardLevel, old, this.inspireAwardLevel);
    }
    
    @OAOne(
        displayName = "Inspire Recipient", 
        reverseName = InspireRecipient.P_InspireApprovals, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspireRecipientId"})
    public InspireRecipient getInspireRecipient() {
        if (inspireRecipient == null) {
            inspireRecipient = (InspireRecipient) getObject(P_InspireRecipient);
        }
        return inspireRecipient;
    }
    
    public void setInspireRecipient(InspireRecipient newValue) {
        fireBeforePropertyChange(P_InspireRecipient, this.inspireRecipient, newValue);
        InspireRecipient old = this.inspireRecipient;
        this.inspireRecipient = newValue;
        firePropertyChange(P_InspireRecipient, old, this.inspireRecipient);
    }
    
    @OAMany(
        displayName = "Reminder Emails", 
        toClass = Email.class, 
        reverseName = Email.P_InspireApprovalReminder
    )
    @OALinkTable(name = "InspireApprovalEmail", indexName = "EmailInspireApprovalReminder", columns = {"InspireApprovalReminderId"})
    public Hub<Email> getReminderEmails() {
        if (hubReminderEmails == null) {
            hubReminderEmails = (Hub<Email>) getHub(P_ReminderEmails);
        }
        return hubReminderEmails;
    }
    
    // updateEmail
    public void updateEmail() {
        //EmailDelegate.updateEmail(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.status = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, InspireApproval.P_Status, true);
        }
        date = rs.getDate(4);
        if (date != null) this.statusDate = new OADate(date);
        this.comments = rs.getString(5);
        int emailFkey = rs.getInt(6);
        if (!rs.wasNull() && emailFkey > 0) {
            setProperty(P_Email, new OAObjectKey(emailFkey));
        }
        int employeeFkey = rs.getInt(7);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int inspireAwardLevelFkey = rs.getInt(8);
        if (!rs.wasNull() && inspireAwardLevelFkey > 0) {
            setProperty(P_InspireAwardLevel, new OAObjectKey(inspireAwardLevelFkey));
        }
        int inspireRecipientFkey = rs.getInt(9);
        if (!rs.wasNull() && inspireRecipientFkey > 0) {
            setProperty(P_InspireRecipient, new OAObjectKey(inspireRecipientFkey));
        }
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

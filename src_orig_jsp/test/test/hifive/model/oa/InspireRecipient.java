// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "ir",
    displayName = "Inspire Recipient",
    displayProperty = "employee.fullName",
    filterClasses = {InspireRecipientOpenFilter.class, InspireRecipientMissingManagerFilter.class, InspireRecipientApprovedOnlyFilter.class, InspireRecipientRecentFilter.class}
)
@OATable(
    indexes = {
        @OAIndex(name = "InspireRecipientEmployee", columns = { @OAIndexColumn(name = "EmployeeId") }), 
        @OAIndex(name = "InspireRecipientInspire", columns = { @OAIndexColumn(name = "InspireId") })
    }
)
public class InspireRecipient extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Points = "Points";
    public static final String P_Points = "Points";
    public static final String PROPERTY_CompletedDate = "CompletedDate";
    public static final String P_CompletedDate = "CompletedDate";
     
    public static final String PROPERTY_ApprovalStatus = "ApprovalStatus";
    public static final String P_ApprovalStatus = "ApprovalStatus";
    public static final String PROPERTY_HasMissingManager = "HasMissingManager";
    public static final String P_HasMissingManager = "HasMissingManager";
    public static final String PROPERTY_CertficatePdfBytes = "CertficatePdfBytes";
    public static final String P_CertficatePdfBytes = "CertficatePdfBytes";
    public static final String PROPERTY_Approved = "Approved";
    public static final String P_Approved = "Approved";
    public static final String PROPERTY_ApprovalStatusAsString = "ApprovalStatusAsString";
    public static final String P_ApprovalStatusAsString = "ApprovalStatusAsString";
     
    public static final String PROPERTY_ApprovedReceipientEmployee = "ApprovedReceipientEmployee";
    public static final String P_ApprovedReceipientEmployee = "ApprovedReceipientEmployee";
    public static final String PROPERTY_CompletedEmail = "CompletedEmail";
    public static final String P_CompletedEmail = "CompletedEmail";
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_Inspire = "Inspire";
    public static final String P_Inspire = "Inspire";
    public static final String PROPERTY_InspireApprovals = "InspireApprovals";
    public static final String P_InspireApprovals = "InspireApprovals";
    public static final String PROPERTY_InspireAwardLevel = "InspireAwardLevel";
    public static final String P_InspireAwardLevel = "InspireAwardLevel";
    public static final String PROPERTY_InspireAwardLevelLocationValue = "InspireAwardLevelLocationValue";
    public static final String P_InspireAwardLevelLocationValue = "InspireAwardLevelLocationValue";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
     
    protected int id;
    protected double points;
    protected OADate completedDate;
     
    // Links to other objects.
    protected transient Email completedEmail;
    protected transient Email email;
    protected transient Employee employee;
    protected transient Inspire inspire;
    protected transient Hub<InspireApproval> hubInspireApprovals;
    protected transient InspireAwardLevel inspireAwardLevel;
    protected transient InspireAwardLevelLocationValue inspireAwardLevelLocationValue;
     
    public InspireRecipient() {
    }
     
    public InspireRecipient(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(decimalPlaces = 2, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getPoints() {
        return points;
    }
    
    public void setPoints(double newValue) {
        fireBeforePropertyChange(P_Points, this.points, newValue);
        double old = points;
        this.points = newValue;
        firePropertyChange(P_Points, old, this.points);
    }
    @OAProperty(displayName = "Completed Date", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCompletedDate() {
        return completedDate;
    }
    
    public void setCompletedDate(OADate newValue) {
        fireBeforePropertyChange(P_CompletedDate, this.completedDate, newValue);
        OADate old = completedDate;
        this.completedDate = newValue;
        firePropertyChange(P_CompletedDate, old, this.completedDate);
    }
    @OACalculatedProperty(displayName = "Approval Status", description = "see Inspire approval status values", displayLength = 5, properties = {P_CompletedDate, P_InspireApprovals, P_InspireApprovals+"."+InspireApproval.P_InspireAwardLevel, P_InspireApprovals+"."+InspireApproval.P_Status, P_Inspire+"."+Inspire.P_InspireAwardLevel})
    public int getApprovalStatus() {
        int approvalStatus = 0;
        // completedDate
        if (this.getCompletedDate() == null) return InspireApproval.STATUS_InProgress;
    
        int x = -1;
        // inspireApprovals
        Hub<InspireApproval> hubInspireApprovals = this.getInspireApprovals();
        for (InspireApproval inspireApproval : hubInspireApprovals) {
            x = Math.max(inspireApproval.getStatus(), x);
        }
        if (x < 0) x = InspireApproval.STATUS_Approved;
    
        return x;
    }
     
    @OACalculatedProperty(displayName = "Missing Manager", description = "true if there is a missing manager that is needed to be assigned to approve ", displayLength = 5, columnLength = 8, properties = {P_CompletedDate, P_Inspire+"."+Inspire.P_InspireAwardLevel, P_InspireApprovals, P_Employee+"."+Employee.P_ParentEmployee, P_Inspire})
    public boolean getHasMissingManager() {
        return false;//InspireRecipientDelegate.getHasMissingManager(this);
    }
     
    @OACalculatedProperty(displayName = "Certficate Pdf Bytes", displayLength = 8)
    public byte[] getCertficatePdfBytes() {
        byte[] bs = null;
        try {
            bs = null;//InspireRecipientDelegate.getCertificatePdfBytes(this);
        }
        catch (Exception e) {
        }
        return bs;
    }
     
    @OACalculatedProperty(displayLength = 5, properties = {P_CompletedDate, P_InspireApprovals+"."+InspireApproval.P_Status})
    public boolean isApproved() {
        if (this.getCompletedDate() == null) return false;
    
        Hub<InspireApproval> hubInspireApprovals = this.getInspireApprovals();
        for (InspireApproval inspireApproval : hubInspireApprovals) {
            if (inspireApproval.getStatus() != InspireApproval.STATUS_Approved) return false;
        }
    
        return true;
    }
     
    @OACalculatedProperty(displayName = "Approval Status", displayLength = 22, properties = {P_ApprovalStatus})
    public String getApprovalStatusAsString() {
        int x = getApprovalStatus();
        return InspireApproval.hubStatus.getAt(x);
    }
     
    @OAOne(
        displayName = "Approved Receipient Employee", 
        isCalculated = true, 
        reverseName = Employee.P_ApprovedInspires, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Employee getApprovedReceipientEmployee() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Completed Email", 
        reverseName = Email.P_InspireRecipientCompleted, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"CompletedEmailId"})
    public Email getCompletedEmail() {
        if (completedEmail == null) {
            completedEmail = (Email) getObject(P_CompletedEmail);
        }
        return completedEmail;
    }
    
    public void setCompletedEmail(Email newValue) {
        fireBeforePropertyChange(P_CompletedEmail, this.completedEmail, newValue);
        Email old = this.completedEmail;
        this.completedEmail = newValue;
        firePropertyChange(P_CompletedEmail, old, this.completedEmail);
    }
    
    @OAOne(
        reverseName = Email.P_InspireRecipient, 
        cascadeSave = true, 
        cascadeDelete = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"EmailId"})
    public Email getEmail() {
        if (email == null) {
            email = (Email) getObject(P_Email);
        }
        return email;
    }
    
    public void setEmail(Email newValue) {
        fireBeforePropertyChange(P_Email, this.email, newValue);
        Email old = this.email;
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
    
    @OAOne(
        reverseName = Employee.P_InspireRecipients, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAOne(
        reverseName = Inspire.P_InspireRecipients, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"InspireId"})
    public Inspire getInspire() {
        if (inspire == null) {
            inspire = (Inspire) getObject(P_Inspire);
        }
        return inspire;
    }
    
    public void setInspire(Inspire newValue) {
        fireBeforePropertyChange(P_Inspire, this.inspire, newValue);
        Inspire old = this.inspire;
        this.inspire = newValue;
        firePropertyChange(P_Inspire, old, this.inspire);
    }
    
    @OAMany(
        displayName = "Inspire Approvals", 
        toClass = InspireApproval.class, 
        owner = true, 
        reverseName = InspireApproval.P_InspireRecipient, 
        cascadeSave = true, 
        cascadeDelete = true 
        //triggerClasses = {InspireApprovalSendEmailTrigger.class}
    )
    public Hub<InspireApproval> getInspireApprovals() {
        if (hubInspireApprovals == null) {
            hubInspireApprovals = (Hub<InspireApproval>) getHub(P_InspireApprovals);
        }
        return hubInspireApprovals;
    }
    
    @OAOne(
        displayName = "Inspire Award Level", 
        isCalculated = true, 
        reverseName = InspireAwardLevel.P_InspireRecipients, 
        allowAddExisting = false
    )
    public InspireAwardLevel getInspireAwardLevel() {
        InspireAwardLevel currentInspireAwardLevel = null;
        // inspire.inspireAwardLevel
        Inspire inspire = this.getInspire();
        if (inspire != null) {
            currentInspireAwardLevel = inspire.getInspireAwardLevel();
        }
    
        // inspireApprovals.inspireAwardLevel
        Hub<InspireApproval> hubInspireApprovals = this.getInspireApprovals();
        for (InspireApproval inspireApproval : hubInspireApprovals) {
            InspireAwardLevel inspireAwardLevel = inspireApproval.getInspireAwardLevel();
            if (inspireAwardLevel == null) continue;
            if (currentInspireAwardLevel == null || inspireAwardLevel.getSeq() < currentInspireAwardLevel.getSeq()) {
                currentInspireAwardLevel = inspireAwardLevel;
            }
        }
        return currentInspireAwardLevel;
    }
    public void setInspireAwardLevel(InspireAwardLevel newValue) {
        fireBeforePropertyChange(PROPERTY_InspireAwardLevel, null, this.inspireAwardLevel);
        firePropertyChange(PROPERTY_InspireAwardLevel, null, this.inspireAwardLevel);
    }
    @OAOne(
        displayName = "Inspire Award Level Location Value", 
        reverseName = InspireAwardLevelLocationValue.P_InspireRecipients, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"InspireAwardLevelLocationValueId"})
    public InspireAwardLevelLocationValue getInspireAwardLevelLocationValue() {
        if (inspireAwardLevelLocationValue == null) {
            inspireAwardLevelLocationValue = (InspireAwardLevelLocationValue) getObject(P_InspireAwardLevelLocationValue);
        }
        return inspireAwardLevelLocationValue;
    }
    
    public void setInspireAwardLevelLocationValue(InspireAwardLevelLocationValue newValue) {
        fireBeforePropertyChange(P_InspireAwardLevelLocationValue, this.inspireAwardLevelLocationValue, newValue);
        InspireAwardLevelLocationValue old = this.inspireAwardLevelLocationValue;
        this.inspireAwardLevelLocationValue = newValue;
        firePropertyChange(P_InspireAwardLevelLocationValue, old, this.inspireAwardLevelLocationValue);
    }
    
    @OAOne(
        isCalculated = true, 
        reverseName = Program.P_RecentInspireRecipients, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private Program getProgram() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    // updateApprovals - 
    public String updateApprovals() {
        return null;//InspireRecipientDelegate.updateInspireApprovals(this);
    }
     
    // updateEmail - Update email and certificate
    public String updateEmail() {
        return null;//EmailDelegate.updateEmail(this);
    }
     
    // viewCertificatePdf - view certificate pdf
    public void viewCertificatePdf() {
        //InspireRecipientDelegate.viewCertificatePdf(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.points = (double) rs.getDouble(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, InspireRecipient.P_Points, true);
        }
        java.sql.Date date;
        date = rs.getDate(3);
        if (date != null) this.completedDate = new OADate(date);
        int completedEmailFkey = rs.getInt(4);
        if (!rs.wasNull() && completedEmailFkey > 0) {
            setProperty(P_CompletedEmail, new OAObjectKey(completedEmailFkey));
        }
        int emailFkey = rs.getInt(5);
        if (!rs.wasNull() && emailFkey > 0) {
            setProperty(P_Email, new OAObjectKey(emailFkey));
        }
        int employeeFkey = rs.getInt(6);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int inspireFkey = rs.getInt(7);
        if (!rs.wasNull() && inspireFkey > 0) {
            setProperty(P_Inspire, new OAObjectKey(inspireFkey));
        }
        int inspireAwardLevelLocationValueFkey = rs.getInt(8);
        if (!rs.wasNull() && inspireAwardLevelLocationValueFkey > 0) {
            setProperty(P_InspireAwardLevelLocationValue, new OAObjectKey(inspireAwardLevelLocationValueFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

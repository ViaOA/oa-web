// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pa",
    displayName = "Points Approval",
    displayProperty = "employee",
    sortProperty = "seq"
)
@OATable(
    indexes = {
        @OAIndex(name = "PointsApprovalApprovedAwardLevel", columns = { @OAIndexColumn(name = "ApprovedAwardLevelId") }), 
        @OAIndex(name = "PointsApprovalEmployee", columns = { @OAIndexColumn(name = "EmployeeId") }), 
        @OAIndex(name = "PointsApprovalPointsRequest", columns = { @OAIndexColumn(name = "PointsRequestId") }), 
        @OAIndex(name = "PointsApprovalStartingAwardLevel", columns = { @OAIndexColumn(name = "StartingAwardLevelId") })
    }
)
public class PointsApproval extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Status = "Status";
    public static final String P_Status = "Status";
    public static final String PROPERTY_StatusAsString = "StatusAsString";
    public static final String P_StatusAsString = "StatusAsString";
    public static final String PROPERTY_StatusDate = "StatusDate";
    public static final String P_StatusDate = "StatusDate";
    public static final String PROPERTY_Comments = "Comments";
    public static final String P_Comments = "Comments";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
     
    public static final String PROPERTY_ApprovedPoints = "ApprovedPoints";
    public static final String P_ApprovedPoints = "ApprovedPoints";
    public static final String PROPERTY_StartingPoints = "StartingPoints";
    public static final String P_StartingPoints = "StartingPoints";
     
    public static final String PROPERTY_ApprovedAwardLevel = "ApprovedAwardLevel";
    public static final String P_ApprovedAwardLevel = "ApprovedAwardLevel";
    public static final String PROPERTY_Employee = "Employee";
    public static final String P_Employee = "Employee";
    public static final String PROPERTY_PointsRequest = "PointsRequest";
    public static final String P_PointsRequest = "PointsRequest";
    public static final String PROPERTY_StartingAwardLevel = "StartingAwardLevel";
    public static final String P_StartingAwardLevel = "StartingAwardLevel";
     
    protected int id;
    protected OADate created;
    protected int status;
    public static final int STATUS_inProgress = 0;
    public static final int STATUS_approved = 1;
    public static final int STATUS_denied = 2;
    public static final int STATUS_raised = 3;
    public static final int STATUS_lowered = 4;
    public static final Hub<String> hubStatus;
    static {
        hubStatus = new Hub<String>(String.class);
        hubStatus.addElement("In Progress");
        hubStatus.addElement("Approved");
        hubStatus.addElement("Denied");
        hubStatus.addElement("Raised");
        hubStatus.addElement("Lowered");
    }
    protected OADate statusDate;
    protected String comments;
    protected int seq;
     
    // Links to other objects.
    protected transient PointsAwardLevel approvedAwardLevel;
    protected transient Employee employee;
    protected transient PointsRequest pointsRequest;
    protected transient PointsAwardLevel startingAwardLevel;
     
    public PointsApproval() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public PointsApproval(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getStatus() {
        return status;
    }
    
    public void setStatus(int newValue) {
        fireBeforePropertyChange(PROPERTY_Status, this.status, newValue);
        int old = status;
        this.status = newValue;
        firePropertyChange(PROPERTY_Status, old, this.status);
    }
    public String getStatusAsString() {
        if (isNull(P_Status)) return "";
        String s = hubStatus.getAt(getStatus());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Status Date", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getStatusDate() {
        return statusDate;
    }
    
    public void setStatusDate(OADate newValue) {
        fireBeforePropertyChange(P_StatusDate, this.statusDate, newValue);
        OADate old = statusDate;
        this.statusDate = newValue;
        firePropertyChange(P_StatusDate, old, this.statusDate);
    }
    @OAProperty(maxLength = 8, displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getComments() {
        return comments;
    }
    
    public void setComments(String newValue) {
        fireBeforePropertyChange(P_Comments, this.comments, newValue);
        String old = comments;
        this.comments = newValue;
        firePropertyChange(P_Comments, old, this.comments);
    }
    @OAProperty(displayLength = 5, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    
    public void setSeq(int newValue) {
        fireBeforePropertyChange(P_Seq, this.seq, newValue);
        int old = seq;
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OACalculatedProperty(displayName = "Approved Points", displayLength = 5, properties = {P_ApprovedAwardLevel+"."+PointsAwardLevel.P_Points})
    public int getApprovedPoints() {
        int approvedPoints = 0;
        if (this.getApprovedAwardLevel() != null) {
            approvedPoints = this.getApprovedAwardLevel().getPoints();
        }
        return approvedPoints;
    }
    
     
    @OACalculatedProperty(displayName = "Starting Points", displayLength = 5, properties = {P_StartingAwardLevel+"."+PointsAwardLevel.P_Points})
    public int getStartingPoints() {
        int startingPoints = 0;
        if (this.getStartingAwardLevel() != null) {
            startingPoints = this.getStartingAwardLevel().getPoints();
        }
        return startingPoints;
    }
    
     
    @OAOne(
        displayName = "Approved Award Level", 
        reverseName = PointsAwardLevel.P_ApprovedApprovals, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApprovedAwardLevelId"})
    public PointsAwardLevel getApprovedAwardLevel() {
        if (approvedAwardLevel == null) {
            approvedAwardLevel = (PointsAwardLevel) getObject(P_ApprovedAwardLevel);
        }
        return approvedAwardLevel;
    }
    
    public void setApprovedAwardLevel(PointsAwardLevel newValue) {
        fireBeforePropertyChange(P_ApprovedAwardLevel, this.approvedAwardLevel, newValue);
        PointsAwardLevel old = this.approvedAwardLevel;
        this.approvedAwardLevel = newValue;
        firePropertyChange(P_ApprovedAwardLevel, old, this.approvedAwardLevel);
    }
    
    @OAOne(
        reverseName = Employee.P_PointsApprovals, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EmployeeId"})
    public Employee getEmployee() {
        if (employee == null) {
            employee = (Employee) getObject(P_Employee);
        }
        return employee;
    }
    
    public void setEmployee(Employee newValue) {
        fireBeforePropertyChange(P_Employee, this.employee, newValue);
        Employee old = this.employee;
        this.employee = newValue;
        firePropertyChange(P_Employee, old, this.employee);
    }
    
    @OAOne(
        displayName = "Points Request", 
        reverseName = PointsRequest.P_PointsApprovals, 
        required = true, 
        cascadeSave = true, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"PointsRequestId"})
    public PointsRequest getPointsRequest() {
        if (pointsRequest == null) {
            pointsRequest = (PointsRequest) getObject(P_PointsRequest);
        }
        return pointsRequest;
    }
    
    public void setPointsRequest(PointsRequest newValue) {
        fireBeforePropertyChange(P_PointsRequest, this.pointsRequest, newValue);
        PointsRequest old = this.pointsRequest;
        this.pointsRequest = newValue;
        firePropertyChange(P_PointsRequest, old, this.pointsRequest);
    }
    
    @OAOne(
        displayName = "Starting Award Level", 
        reverseName = PointsAwardLevel.P_StartingApprovals, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"StartingAwardLevelId"})
    public PointsAwardLevel getStartingAwardLevel() {
        if (startingAwardLevel == null) {
            startingAwardLevel = (PointsAwardLevel) getObject(P_StartingAwardLevel);
        }
        return startingAwardLevel;
    }
    
    public void setStartingAwardLevel(PointsAwardLevel newValue) {
        fireBeforePropertyChange(P_StartingAwardLevel, this.startingAwardLevel, newValue);
        PointsAwardLevel old = this.startingAwardLevel;
        this.startingAwardLevel = newValue;
        firePropertyChange(P_StartingAwardLevel, old, this.startingAwardLevel);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.status = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsApproval.P_Status, true);
        }
        date = rs.getDate(4);
        if (date != null) this.statusDate = new OADate(date);
        this.comments = rs.getString(5);
        this.seq = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsApproval.P_Seq, true);
        }
        int approvedAwardLevelFkey = rs.getInt(7);
        if (!rs.wasNull() && approvedAwardLevelFkey > 0) {
            setProperty(P_ApprovedAwardLevel, new OAObjectKey(approvedAwardLevelFkey));
        }
        int employeeFkey = rs.getInt(8);
        if (!rs.wasNull() && employeeFkey > 0) {
            setProperty(P_Employee, new OAObjectKey(employeeFkey));
        }
        int pointsRequestFkey = rs.getInt(9);
        if (!rs.wasNull() && pointsRequestFkey > 0) {
            setProperty(P_PointsRequest, new OAObjectKey(pointsRequestFkey));
        }
        int startingAwardLevelFkey = rs.getInt(10);
        if (!rs.wasNull() && startingAwardLevelFkey > 0) {
            setProperty(P_StartingAwardLevel, new OAObjectKey(startingAwardLevelFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

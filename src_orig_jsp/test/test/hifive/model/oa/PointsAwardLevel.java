// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "pal",
    displayName = "Points Award Level",
    displayProperty = "name",
    sortProperty = "seq"
)
@OATable(
    indexes = {
        @OAIndex(name = "PointsAwardLevelLocation", columns = { @OAIndexColumn(name = "LocationId") }), 
        @OAIndex(name = "PointsAwardLevelProgram", columns = { @OAIndexColumn(name = "ProgramId") }), 
        @OAIndex(name = "PointsAwardLevelRequiredApproval", columns = { @OAIndexColumn(name = "RequiredApprovalId") })
    }
)
public class PointsAwardLevel extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
    public static final String PROPERTY_ApprovalLevels = "ApprovalLevels";
    public static final String P_ApprovalLevels = "ApprovalLevels";
    public static final String PROPERTY_RequireSuperApprover = "RequireSuperApprover";
    public static final String P_RequireSuperApprover = "RequireSuperApprover";
    public static final String PROPERTY_Points = "Points";
    public static final String P_Points = "Points";
    public static final String PROPERTY_QuizRangeMin = "QuizRangeMin";
    public static final String P_QuizRangeMin = "QuizRangeMin";
    public static final String PROPERTY_QuizRangeMax = "QuizRangeMax";
    public static final String P_QuizRangeMax = "QuizRangeMax";
    public static final String PROPERTY_Description = "Description";
    public static final String P_Description = "Description";
    public static final String PROPERTY_Level = "Level";
    public static final String P_Level = "Level";
     
     
    public static final String PROPERTY_ApprovedApprovals = "ApprovedApprovals";
    public static final String P_ApprovedApprovals = "ApprovedApprovals";
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_PointsRequests = "PointsRequests";
    public static final String P_PointsRequests = "PointsRequests";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
    public static final String PROPERTY_RequiredApproval = "RequiredApproval";
    public static final String P_RequiredApproval = "RequiredApproval";
    public static final String PROPERTY_StartingApprovals = "StartingApprovals";
    public static final String P_StartingApprovals = "StartingApprovals";
     
    protected int id;
    protected String name;
    protected int seq;
    protected int approvalLevels;
    protected boolean requireSuperApprover;
    protected int points;
    protected int quizRangeMin;
    protected int quizRangeMax;
    protected String description;
    protected int level;
     
    // Links to other objects.
    protected transient Hub<PointsApproval> hubApprovedApprovals;
    protected transient Location location;
    protected transient Hub<PointsRequest> hubPointsRequests;
    protected transient Program program;
    protected transient Employee requiredApproval;
    protected transient Hub<PointsApproval> hubStartingApprovals;
     
    public PointsAwardLevel() {
        if (!isLoading()) {
            setLevel(1);
        }
    }
     
    public PointsAwardLevel(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 75, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayLength = 5, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    
    public void setSeq(int newValue) {
        fireBeforePropertyChange(P_Seq, this.seq, newValue);
        int old = seq;
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAProperty(displayName = "Approval Levels", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getApprovalLevels() {
        return approvalLevels;
    }
    
    public void setApprovalLevels(int newValue) {
        fireBeforePropertyChange(P_ApprovalLevels, this.approvalLevels, newValue);
        int old = approvalLevels;
        this.approvalLevels = newValue;
        firePropertyChange(P_ApprovalLevels, old, this.approvalLevels);
    }
    @OAProperty(displayName = "Require Super Approver", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getRequireSuperApprover() {
        return requireSuperApprover;
    }
    
    public void setRequireSuperApprover(boolean newValue) {
        fireBeforePropertyChange(P_RequireSuperApprover, this.requireSuperApprover, newValue);
        boolean old = requireSuperApprover;
        this.requireSuperApprover = newValue;
        firePropertyChange(P_RequireSuperApprover, old, this.requireSuperApprover);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getPoints() {
        return points;
    }
    
    public void setPoints(int newValue) {
        fireBeforePropertyChange(P_Points, this.points, newValue);
        int old = points;
        this.points = newValue;
        firePropertyChange(P_Points, old, this.points);
    }
    @OAProperty(displayName = "Quiz Range Min", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuizRangeMin() {
        return quizRangeMin;
    }
    
    public void setQuizRangeMin(int newValue) {
        fireBeforePropertyChange(P_QuizRangeMin, this.quizRangeMin, newValue);
        int old = quizRangeMin;
        this.quizRangeMin = newValue;
        firePropertyChange(P_QuizRangeMin, old, this.quizRangeMin);
    }
    @OAProperty(displayName = "Quiz Range Max", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getQuizRangeMax() {
        return quizRangeMax;
    }
    
    public void setQuizRangeMax(int newValue) {
        fireBeforePropertyChange(P_QuizRangeMax, this.quizRangeMax, newValue);
        int old = quizRangeMax;
        this.quizRangeMax = newValue;
        firePropertyChange(P_QuizRangeMax, old, this.quizRangeMax);
    }
    @OAProperty(description = "This will show up on the selection page for nominations", maxLength = 11, displayLength = 11)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    /**
      This will show up on the selection page for nominations
    */
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String newValue) {
        fireBeforePropertyChange(P_Description, this.description, newValue);
        String old = description;
        this.description = newValue;
        firePropertyChange(P_Description, old, this.description);
    }
    @OAProperty(description = "this level is used to determine availability to employees", defaultValue = "1", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      this level is used to determine availability to employees
    */
    public int getLevel() {
        return level;
    }
    
    public void setLevel(int newValue) {
        fireBeforePropertyChange(P_Level, this.level, newValue);
        int old = level;
        this.level = newValue;
        firePropertyChange(P_Level, old, this.level);
    }
    @OAMany(
        displayName = "Approved Approvals", 
        toClass = PointsApproval.class, 
        reverseName = PointsApproval.P_ApprovedAwardLevel
    )
    public Hub<PointsApproval> getApprovedApprovals() {
        if (hubApprovedApprovals == null) {
            hubApprovedApprovals = (Hub<PointsApproval>) getHub(P_ApprovedApprovals);
        }
        return hubApprovedApprovals;
    }
    
    @OAOne(
        reverseName = Location.P_PointsAwardLevels
    )
    @OAFkey(columns = {"LocationId"})
    public Location getLocation() {
        if (location == null) {
            location = (Location) getObject(P_Location);
        }
        return location;
    }
    
    public void setLocation(Location newValue) {
        fireBeforePropertyChange(P_Location, this.location, newValue);
        Location old = this.location;
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
    
    @OAMany(
        displayName = "Points Requests", 
        toClass = PointsRequest.class, 
        reverseName = PointsRequest.P_PointsAwardLevel
    )
    public Hub<PointsRequest> getPointsRequests() {
        if (hubPointsRequests == null) {
            hubPointsRequests = (Hub<PointsRequest>) getHub(P_PointsRequests);
        }
        return hubPointsRequests;
    }
    
    @OAOne(
        reverseName = Program.P_PointsAwardLevels, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProgramId"})
    public Program getProgram() {
        if (program == null) {
            program = (Program) getObject(P_Program);
        }
        return program;
    }
    
    public void setProgram(Program newValue) {
        fireBeforePropertyChange(P_Program, this.program, newValue);
        Program old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    
    @OAOne(
        displayName = "Required Approval", 
        reverseName = Employee.P_RequiresMyApproval
    )
    @OAFkey(columns = {"RequiredApprovalId"})
    public Employee getRequiredApproval() {
        if (requiredApproval == null) {
            requiredApproval = (Employee) getObject(P_RequiredApproval);
        }
        return requiredApproval;
    }
    
    public void setRequiredApproval(Employee newValue) {
        fireBeforePropertyChange(P_RequiredApproval, this.requiredApproval, newValue);
        Employee old = this.requiredApproval;
        this.requiredApproval = newValue;
        firePropertyChange(P_RequiredApproval, old, this.requiredApproval);
    }
    
    @OAMany(
        displayName = "Starting Approvals", 
        toClass = PointsApproval.class, 
        reverseName = PointsApproval.P_StartingAwardLevel
    )
    public Hub<PointsApproval> getStartingApprovals() {
        if (hubStartingApprovals == null) {
            hubStartingApprovals = (Hub<PointsApproval>) getHub(P_StartingApprovals);
        }
        return hubStartingApprovals;
    }
    
    // isAvailable
    public boolean isAvailable(Employee emp) {
      return false;//PointsAwardLevelDelegate.isAvailable(this, emp);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.seq = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_Seq, true);
        }
        this.approvalLevels = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_ApprovalLevels, true);
        }
        this.requireSuperApprover = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_RequireSuperApprover, true);
        }
        this.points = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_Points, true);
        }
        this.quizRangeMin = (int) rs.getInt(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_QuizRangeMin, true);
        }
        this.quizRangeMax = (int) rs.getInt(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_QuizRangeMax, true);
        }
        this.description = rs.getString(9);
        this.level = (int) rs.getInt(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsAwardLevel.P_Level, true);
        }
        int locationFkey = rs.getInt(11);
        if (!rs.wasNull() && locationFkey > 0) {
            setProperty(P_Location, new OAObjectKey(locationFkey));
        }
        int programFkey = rs.getInt(12);
        if (!rs.wasNull() && programFkey > 0) {
            setProperty(P_Program, new OAObjectKey(programFkey));
        }
        int requiredApprovalFkey = rs.getInt(13);
        if (!rs.wasNull() && requiredApprovalFkey > 0) {
            setProperty(P_RequiredApproval, new OAObjectKey(requiredApprovalFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

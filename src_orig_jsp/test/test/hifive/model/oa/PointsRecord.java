// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pr",
    displayName = "Points Record",
    displayProperty = "pointsToEmployee"
)
@OATable(
    indexes = {
        @OAIndex(name = "PointsRecordPointsCoreValue", columns = { @OAIndexColumn(name = "PointsCoreValueId") }), 
        @OAIndex(name = "PointsRecordPointsRequest", columns = { @OAIndexColumn(name = "PointsRequestId") }), 
        @OAIndex(name = "PointsRecordPointsToEmployee", columns = { @OAIndexColumn(name = "PointsToEmployeeId") }), 
        @OAIndex(name = "PointsRecordPointsToProgram", columns = { @OAIndexColumn(name = "PointsToProgramId") })
    }
)
public class PointsRecord extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Points = "Points";
    public static final String P_Points = "Points";
    public static final String PROPERTY_ToDiscretionary = "ToDiscretionary";
    public static final String P_ToDiscretionary = "ToDiscretionary";
    public static final String PROPERTY_Reason = "Reason";
    public static final String P_Reason = "Reason";
    public static final String PROPERTY_Comment = "Comment";
    public static final String P_Comment = "Comment";
    public static final String PROPERTY_Event = "Event";
    public static final String P_Event = "Event";
    public static final String PROPERTY_Custom1 = "Custom1";
    public static final String P_Custom1 = "Custom1";
    public static final String PROPERTY_Custom2 = "Custom2";
    public static final String P_Custom2 = "Custom2";
    public static final String PROPERTY_Custom3 = "Custom3";
    public static final String P_Custom3 = "Custom3";
    public static final String PROPERTY_Engaged = "Engaged";
    public static final String P_Engaged = "Engaged";
     
     
    public static final String PROPERTY_Email = "Email";
    public static final String P_Email = "Email";
    public static final String PROPERTY_InspireOrder = "InspireOrder";
    public static final String P_InspireOrder = "InspireOrder";
    public static final String PROPERTY_PointsCoreValue = "PointsCoreValue";
    public static final String P_PointsCoreValue = "PointsCoreValue";
    public static final String PROPERTY_PointsRequest = "PointsRequest";
    public static final String P_PointsRequest = "PointsRequest";
    public static final String PROPERTY_PointsToEmployee = "PointsToEmployee";
    public static final String P_PointsToEmployee = "PointsToEmployee";
    public static final String PROPERTY_PointsToProgram = "PointsToProgram";
    public static final String P_PointsToProgram = "PointsToProgram";
     
    protected int id;
    protected OADate created;
    protected int points;
    protected boolean toDiscretionary;
    protected String reason;
    protected String comment;
    protected String event;
    protected String custom1;
    protected String custom2;
    protected String custom3;
    protected boolean engaged;
     
    // Links to other objects.
    protected transient Email email;
    protected transient InspireOrder inspireOrder;
    protected transient PointsCoreValue pointsCoreValue;
    protected transient PointsRequest pointsRequest;
    protected transient Employee pointsToEmployee;
    protected transient Program pointsToProgram;
     
    public PointsRecord() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public PointsRecord(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(description = "Date this record was created", defaultValue = "new OADate()", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    /**
      Date this record was created
    */
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getPoints() {
        return points;
    }
    
    public void setPoints(int newValue) {
        fireBeforePropertyChange(P_Points, this.points, newValue);
        int old = points;
        this.points = newValue;
        firePropertyChange(P_Points, old, this.points);
    }
    @OAProperty(displayName = "To Discretionary", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getToDiscretionary() {
        return toDiscretionary;
    }
    
    public void setToDiscretionary(boolean newValue) {
        fireBeforePropertyChange(P_ToDiscretionary, this.toDiscretionary, newValue);
        boolean old = toDiscretionary;
        this.toDiscretionary = newValue;
        firePropertyChange(P_ToDiscretionary, old, this.toDiscretionary);
    }
    @OAProperty(maxLength = 150, displayLength = 40)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getReason() {
        return reason;
    }
    
    public void setReason(String newValue) {
        fireBeforePropertyChange(P_Reason, this.reason, newValue);
        String old = reason;
        this.reason = newValue;
        firePropertyChange(P_Reason, old, this.reason);
    }
    @OAProperty(maxLength = 7, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getComment() {
        return comment;
    }
    
    public void setComment(String newValue) {
        fireBeforePropertyChange(P_Comment, this.comment, newValue);
        String old = comment;
        this.comment = newValue;
        firePropertyChange(P_Comment, old, this.comment);
    }
    @OAProperty(maxLength = 5, displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getEvent() {
        return event;
    }
    
    public void setEvent(String newValue) {
        fireBeforePropertyChange(P_Event, this.event, newValue);
        String old = event;
        this.event = newValue;
        firePropertyChange(P_Event, old, this.event);
    }
    @OAProperty(maxLength = 7, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getCustom1() {
        return custom1;
    }
    
    public void setCustom1(String newValue) {
        fireBeforePropertyChange(P_Custom1, this.custom1, newValue);
        String old = custom1;
        this.custom1 = newValue;
        firePropertyChange(P_Custom1, old, this.custom1);
    }
    @OAProperty(maxLength = 7, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getCustom2() {
        return custom2;
    }
    
    public void setCustom2(String newValue) {
        fireBeforePropertyChange(P_Custom2, this.custom2, newValue);
        String old = custom2;
        this.custom2 = newValue;
        firePropertyChange(P_Custom2, old, this.custom2);
    }
    @OAProperty(maxLength = 7, displayLength = 7)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getCustom3() {
        return custom3;
    }
    
    public void setCustom3(String newValue) {
        fireBeforePropertyChange(P_Custom3, this.custom3, newValue);
        String old = custom3;
        this.custom3 = newValue;
        firePropertyChange(P_Custom3, old, this.custom3);
    }
    @OAProperty(description = "this is a flag to mark if a user engagement event has occurred", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    /**
      this is a flag to mark if a user engagement event has occurred
    */
    public boolean getEngaged() {
        return engaged;
    }
    
    public void setEngaged(boolean newValue) {
        fireBeforePropertyChange(P_Engaged, this.engaged, newValue);
        boolean old = engaged;
        this.engaged = newValue;
        firePropertyChange(P_Engaged, old, this.engaged);
    }
    @OAOne(
        reverseName = Email.P_PointsRecord
    )
    @OAFkey(columns = {"EmailId"})
    public Email getEmail() {
        if (email == null) {
            email = (Email) getObject(P_Email);
        }
        return email;
    }
    
    public void setEmail(Email newValue) {
        fireBeforePropertyChange(P_Email, this.email, newValue);
        Email old = this.email;
        this.email = newValue;
        firePropertyChange(P_Email, old, this.email);
    }
    
    @OAOne(
        displayName = "Inspire Order", 
        reverseName = InspireOrder.P_PointsRecord, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"InspireOrderId"})
    public InspireOrder getInspireOrder() {
        if (inspireOrder == null) {
            inspireOrder = (InspireOrder) getObject(P_InspireOrder);
        }
        return inspireOrder;
    }
    
    public void setInspireOrder(InspireOrder newValue) {
        fireBeforePropertyChange(P_InspireOrder, this.inspireOrder, newValue);
        InspireOrder old = this.inspireOrder;
        this.inspireOrder = newValue;
        firePropertyChange(P_InspireOrder, old, this.inspireOrder);
    }
    
    @OAOne(
        displayName = "Points Core Value", 
        reverseName = PointsCoreValue.P_PointsRecords, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PointsCoreValueId"})
    public PointsCoreValue getPointsCoreValue() {
        if (pointsCoreValue == null) {
            pointsCoreValue = (PointsCoreValue) getObject(P_PointsCoreValue);
        }
        return pointsCoreValue;
    }
    
    public void setPointsCoreValue(PointsCoreValue newValue) {
        fireBeforePropertyChange(P_PointsCoreValue, this.pointsCoreValue, newValue);
        PointsCoreValue old = this.pointsCoreValue;
        this.pointsCoreValue = newValue;
        firePropertyChange(P_PointsCoreValue, old, this.pointsCoreValue);
    }
    
    @OAOne(
        displayName = "Points Request", 
        reverseName = PointsRequest.P_PointsRecords, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PointsRequestId"})
    public PointsRequest getPointsRequest() {
        if (pointsRequest == null) {
            pointsRequest = (PointsRequest) getObject(P_PointsRequest);
        }
        return pointsRequest;
    }
    
    public void setPointsRequest(PointsRequest newValue) {
        fireBeforePropertyChange(P_PointsRequest, this.pointsRequest, newValue);
        PointsRequest old = this.pointsRequest;
        this.pointsRequest = newValue;
        firePropertyChange(P_PointsRequest, old, this.pointsRequest);
    }
    
    @OAOne(
        displayName = "Points To Employee", 
        reverseName = Employee.P_PointsFromRecord, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PointsToEmployeeId"})
    public Employee getPointsToEmployee() {
        if (pointsToEmployee == null) {
            pointsToEmployee = (Employee) getObject(P_PointsToEmployee);
        }
        return pointsToEmployee;
    }
    
    public void setPointsToEmployee(Employee newValue) {
        fireBeforePropertyChange(P_PointsToEmployee, this.pointsToEmployee, newValue);
        Employee old = this.pointsToEmployee;
        this.pointsToEmployee = newValue;
        firePropertyChange(P_PointsToEmployee, old, this.pointsToEmployee);
    }
    
    @OAOne(
        displayName = "Points To Program", 
        reverseName = Program.P_PointsFromRecord, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    @OAFkey(columns = {"PointsToProgramId"})
    public Program getPointsToProgram() {
        if (pointsToProgram == null) {
            pointsToProgram = (Program) getObject(P_PointsToProgram);
        }
        return pointsToProgram;
    }
    
    public void setPointsToProgram(Program newValue) {
        fireBeforePropertyChange(P_PointsToProgram, this.pointsToProgram, newValue);
        Program old = this.pointsToProgram;
        this.pointsToProgram = newValue;
        firePropertyChange(P_PointsToProgram, old, this.pointsToProgram);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.points = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsRecord.P_Points, true);
        }
        this.toDiscretionary = rs.getBoolean(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsRecord.P_ToDiscretionary, true);
        }
        this.reason = rs.getString(5);
        this.comment = rs.getString(6);
        this.event = rs.getString(7);
        this.custom1 = rs.getString(8);
        this.custom2 = rs.getString(9);
        this.custom3 = rs.getString(10);
        this.engaged = rs.getBoolean(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsRecord.P_Engaged, true);
        }
        int emailFkey = rs.getInt(12);
        if (!rs.wasNull() && emailFkey > 0) {
            setProperty(P_Email, new OAObjectKey(emailFkey));
        }
        int inspireOrderFkey = rs.getInt(13);
        if (!rs.wasNull() && inspireOrderFkey > 0) {
            setProperty(P_InspireOrder, new OAObjectKey(inspireOrderFkey));
        }
        int pointsCoreValueFkey = rs.getInt(14);
        if (!rs.wasNull() && pointsCoreValueFkey > 0) {
            setProperty(P_PointsCoreValue, new OAObjectKey(pointsCoreValueFkey));
        }
        int pointsRequestFkey = rs.getInt(15);
        if (!rs.wasNull() && pointsRequestFkey > 0) {
            setProperty(P_PointsRequest, new OAObjectKey(pointsRequestFkey));
        }
        int pointsToEmployeeFkey = rs.getInt(16);
        if (!rs.wasNull() && pointsToEmployeeFkey > 0) {
            setProperty(P_PointsToEmployee, new OAObjectKey(pointsToEmployeeFkey));
        }
        int pointsToProgramFkey = rs.getInt(17);
        if (!rs.wasNull() && pointsToProgramFkey > 0) {
            setProperty(P_PointsToProgram, new OAObjectKey(pointsToProgramFkey));
        }
        if (rs.getMetaData().getColumnCount() != 17) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

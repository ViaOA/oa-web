// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pr",
    displayName = "Points Request",
    displayProperty = "requestingEmployee.firstLastName"
)
@OATable(
    indexes = {
        @OAIndex(name = "PointsRequestApprovingEmployee", columns = { @OAIndexColumn(name = "ApprovingEmployeeId") }), 
        @OAIndex(name = "PointsRequestApprovingUser", columns = { @OAIndexColumn(name = "ApprovingUserId") }), 
        @OAIndex(name = "PointsRequestPointsAwardLevel", columns = { @OAIndexColumn(name = "PointsAwardLevelId") }), 
        @OAIndex(name = "PointsRequestQuizResult", columns = { @OAIndexColumn(name = "QuizResultId") }), 
        @OAIndex(name = "PointsRequestRequestingEmployee", columns = { @OAIndexColumn(name = "RequestingEmployeeId") })
    }
)
public class PointsRequest extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Approved = "Approved";
    public static final String P_Approved = "Approved";
    public static final String PROPERTY_Notes = "Notes";
    public static final String P_Notes = "Notes";
    public static final String PROPERTY_ErrorNotes = "ErrorNotes";
    public static final String P_ErrorNotes = "ErrorNotes";
    public static final String PROPERTY_Filename = "Filename";
    public static final String P_Filename = "Filename";
    public static final String PROPERTY_ApprovedDate = "ApprovedDate";
    public static final String P_ApprovedDate = "ApprovedDate";
    public static final String PROPERTY_RequestType = "RequestType";
    public static final String P_RequestType = "RequestType";
    public static final String PROPERTY_RequestTypeAsString = "RequestTypeAsString";
    public static final String P_RequestTypeAsString = "RequestTypeAsString";
     
    public static final String PROPERTY_TotalValue = "TotalValue";
    public static final String P_TotalValue = "TotalValue";
    public static final String PROPERTY_TotalPoints = "TotalPoints";
    public static final String P_TotalPoints = "TotalPoints";
     
    public static final String PROPERTY_ApprovingEmployee = "ApprovingEmployee";
    public static final String P_ApprovingEmployee = "ApprovingEmployee";
    public static final String PROPERTY_ApprovingUser = "ApprovingUser";
    public static final String P_ApprovingUser = "ApprovingUser";
    public static final String PROPERTY_Emails = "Emails";
    public static final String P_Emails = "Emails";
    public static final String PROPERTY_PointsApprovals = "PointsApprovals";
    public static final String P_PointsApprovals = "PointsApprovals";
    public static final String PROPERTY_PointsAwardLevel = "PointsAwardLevel";
    public static final String P_PointsAwardLevel = "PointsAwardLevel";
    public static final String PROPERTY_PointsRecords = "PointsRecords";
    public static final String P_PointsRecords = "PointsRecords";
    public static final String PROPERTY_QuizResult = "QuizResult";
    public static final String P_QuizResult = "QuizResult";
    public static final String PROPERTY_RequestingEmployee = "RequestingEmployee";
    public static final String P_RequestingEmployee = "RequestingEmployee";
     
    protected int id;
    protected OADate created;
    protected boolean approved;
    protected String notes;
    protected String errorNotes;
    protected String filename;
    protected OADate approvedDate;
    protected int requestType;
    public static final int REQUESTTYPE_unknown = 0;
    public static final int REQUESTTYPE_shopping = 1;
    public static final int REQUESTTYPE_newPointsPurchase = 2;
    public static final int REQUESTTYPE_discretionaryRequest = 3;
    public static final int REQUESTTYPE_discretionaryDistribute = 4;
    public static final int REQUESTTYPE_recognition = 5;
    public static final int REQUESTTYPE_transfer = 6;
    public static final int REQUESTTYPE_upload = 7;
    public static final int REQUESTTYPE_nomination = 8;
    public static final Hub<String> hubRequestType;
    static {
        hubRequestType = new Hub<String>(String.class);
        hubRequestType.addElement("Unknown");
        hubRequestType.addElement("shopping");
        hubRequestType.addElement("New Points Purchase");
        hubRequestType.addElement("Discretionary Request");
        hubRequestType.addElement("Discretionary Distribute");
        hubRequestType.addElement("Recognition");
        hubRequestType.addElement("Transfer");
        hubRequestType.addElement("Upload");
        hubRequestType.addElement("Nomination");
    }
     
    // Links to other objects.
    protected transient Employee approvingEmployee;
    protected transient User approvingUser;
    protected transient Hub<Email> hubEmails;
    protected transient Hub<PointsApproval> hubPointsApprovals;
    protected transient PointsAwardLevel pointsAwardLevel;
    protected transient Hub<PointsRecord> hubPointsRecords;
    protected transient QuizResult quizResult;
    protected transient Employee requestingEmployee;
     
    public PointsRequest() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public PointsRequest(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getApproved() {
        return approved;
    }
    
    public void setApproved(boolean newValue) {
      fireBeforePropertyChange(PROPERTY_Approved, this.approved, newValue);
      boolean old = approved;
      this.approved = newValue;
      if (newValue == true) {
        setApprovedDate(new OADate());
        if (this.getRequestType() == PointsRequest.REQUESTTYPE_newPointsPurchase || this.getRequestType() == PointsRequest.REQUESTTYPE_upload) {
          //setApprovingUser(ModelDelegate.getLoginUser());
        }
      }
      if (newValue == false) {
        setApprovedDate(null);
        setApprovingUser(null);
        setApprovingEmployee(null);
      }
      firePropertyChange(PROPERTY_Approved, old, this.approved);
    }
    
    public boolean setApproved(boolean newValue, Employee approvingEmployee) {
            if(this.getRequestType()==PointsRequest.REQUESTTYPE_newPointsPurchase || 
            	this.getRequestType()==PointsRequest.REQUESTTYPE_upload ||
            	this.getRequestType()==PointsRequest.REQUESTTYPE_unknown) {return false;}
            
        	fireBeforePropertyChange(PROPERTY_Approved, this.approved, newValue);
        	fireBeforePropertyChange(PROPERTY_ApprovingEmployee, this.approvingEmployee, approvingEmployee);
            boolean old = approved;
            Employee oldE = this.approvingEmployee;
            this.approved = newValue;
            if (newValue == true) {
              setApprovedDate(new OADate());
              setApprovingEmployee(approvingEmployee);
            }
            if (newValue == false) {
              setApprovedDate(null);
              setApprovingUser(null);
              setApprovingEmployee(null);
            }
            firePropertyChange(PROPERTY_Approved, old, this.approved);
            firePropertyChange(PROPERTY_ApprovingEmployee, oldE, this.approvingEmployee);
            return true;
          }
    @OAProperty(maxLength = 5, displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getNotes() {
        return notes;
    }
    
    public void setNotes(String newValue) {
        fireBeforePropertyChange(P_Notes, this.notes, newValue);
        String old = notes;
        this.notes = newValue;
        firePropertyChange(P_Notes, old, this.notes);
    }
    @OAProperty(displayName = "Error Notes", maxLength = 10, displayLength = 10)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getErrorNotes() {
        return errorNotes;
    }
    
    public void setErrorNotes(String newValue) {
        fireBeforePropertyChange(P_ErrorNotes, this.errorNotes, newValue);
        String old = errorNotes;
        this.errorNotes = newValue;
        firePropertyChange(P_ErrorNotes, old, this.errorNotes);
    }
    @OAProperty(maxLength = 75, displayLength = 40)
    @OAColumn(maxLength = 75)
    public String getFilename() {
        return filename;
    }
    
    public void setFilename(String newValue) {
        fireBeforePropertyChange(P_Filename, this.filename, newValue);
        String old = filename;
        this.filename = newValue;
        firePropertyChange(P_Filename, old, this.filename);
    }
    @OAProperty(displayName = "Approved Date", description = "when this request was approved", displayLength = 8)
    @OAColumn(sqlType = java.sql.Types.DATE)
    /**
      when this request was approved
    */
    public OADate getApprovedDate() {
        return approvedDate;
    }
    
    public void setApprovedDate(OADate newValue) {
        fireBeforePropertyChange(P_ApprovedDate, this.approvedDate, newValue);
        OADate old = approvedDate;
        this.approvedDate = newValue;
        firePropertyChange(P_ApprovedDate, old, this.approvedDate);
    }
    @OAProperty(displayName = "Request Type", description = "The type of request", displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      The type of request
    */
    public int getRequestType() {
        return requestType;
    }
    
    public void setRequestType(int newValue) {
        fireBeforePropertyChange(P_RequestType, this.requestType, newValue);
        int old = requestType;
        this.requestType = newValue;
        firePropertyChange(P_RequestType, old, this.requestType);
    }
    public String getRequestTypeAsString() {
        if (isNull(P_RequestType)) return "";
        String s = hubRequestType.getAt(getRequestType());
        if (s == null) s = "";
        return s;
    }
    @OACalculatedProperty(displayName = "Total Value", description = "The total value of this points upload", decimalPlaces = 2, isCurrency = true, displayLength = 7, properties = {P_PointsRecords+"."+PointsRecord.P_Points, P_RequestingEmployee+"."+Employee.P_Program+"."+Program.P_PointValue})
    /**
      The total value of this points request
    */
    public double getTotalValue() {
        double totalValue = 0;
        // pointsUploadRecords.points
        Hub<PointsRecord> hubPointsRecords = this.getPointsRecords();
        for (PointsRecord pointsRecord : hubPointsRecords) {
            totalValue += pointsRecord.getPoints();
        }
    
      
           Employee employee = this.getRequestingEmployee();
            if (employee != null) {
                Program program = employee.getProgram();
                if (program != null) {
                    totalValue = totalValue*program.getPointValue();
                }
            }
        return totalValue;
    }
    
     
    @OACalculatedProperty(displayName = "Total Points", description = "the total points in this request (0 for transfers)", displayLength = 5, properties = {P_PointsRecords+"."+PointsRecord.P_Points})
    /**
      the total points in this request (0 for transfers)
    */
    public int getTotalPoints() {
        int totalPoints = 0;
        // pointsRecords.points
        Hub<PointsRecord> hubPointsRecords = this.getPointsRecords();
        for (PointsRecord pointsRecord : hubPointsRecords) {
            totalPoints += pointsRecord.getPoints();
        }
    
        return totalPoints;
    }
    
     
    @OAOne(
        displayName = "Approving Employee", 
        reverseName = Employee.P_ApprovedPointsRequests, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApprovingEmployeeId"})
    public Employee getApprovingEmployee() {
        if (approvingEmployee == null) {
            approvingEmployee = (Employee) getObject(P_ApprovingEmployee);
        }
        return approvingEmployee;
    }
    
    public void setApprovingEmployee(Employee newValue) {
        fireBeforePropertyChange(P_ApprovingEmployee, this.approvingEmployee, newValue);
        Employee old = this.approvingEmployee;
        this.approvingEmployee = newValue;
        firePropertyChange(P_ApprovingEmployee, old, this.approvingEmployee);
    }
    
    @OAOne(
        displayName = "Approving User", 
        reverseName = User.P_ApprovedPointsRequests, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApprovingUserId"})
    public User getApprovingUser() {
        if (approvingUser == null) {
            approvingUser = (User) getObject(P_ApprovingUser);
        }
        return approvingUser;
    }
    
    public void setApprovingUser(User newValue) {
        fireBeforePropertyChange(P_ApprovingUser, this.approvingUser, newValue);
        User old = this.approvingUser;
        this.approvingUser = newValue;
        firePropertyChange(P_ApprovingUser, old, this.approvingUser);
    }
    
    @OAMany(
        toClass = Email.class, 
        reverseName = Email.P_PointsRequest
    )
    @OALinkTable(name = "PointsRequestEmail", indexName = "EmailPointsRequest", columns = {"PointsRequestId"})
    public Hub<Email> getEmails() {
        if (hubEmails == null) {
            hubEmails = (Hub<Email>) getHub(P_Emails);
        }
        return hubEmails;
    }
    
    @OAMany(
        displayName = "Points Approvals", 
        toClass = PointsApproval.class, 
        reverseName = PointsApproval.P_PointsRequest, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<PointsApproval> getPointsApprovals() {
        if (hubPointsApprovals == null) {
            hubPointsApprovals = (Hub<PointsApproval>) getHub(P_PointsApprovals);
        }
        return hubPointsApprovals;
    }
    
    @OAOne(
        displayName = "Points Award Level", 
        reverseName = PointsAwardLevel.P_PointsRequests
    )
    @OAFkey(columns = {"PointsAwardLevelId"})
    public PointsAwardLevel getPointsAwardLevel() {
        if (pointsAwardLevel == null) {
            pointsAwardLevel = (PointsAwardLevel) getObject(P_PointsAwardLevel);
        }
        return pointsAwardLevel;
    }
    
    public void setPointsAwardLevel(PointsAwardLevel newValue) {
        fireBeforePropertyChange(P_PointsAwardLevel, this.pointsAwardLevel, newValue);
        PointsAwardLevel old = this.pointsAwardLevel;
        this.pointsAwardLevel = newValue;
        firePropertyChange(P_PointsAwardLevel, old, this.pointsAwardLevel);
    }
    
    @OAMany(
        displayName = "Points Records", 
        toClass = PointsRecord.class, 
        owner = true, 
        reverseName = PointsRecord.P_PointsRequest, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<PointsRecord> getPointsRecords() {
        if (hubPointsRecords == null) {
            hubPointsRecords = (Hub<PointsRecord>) getHub(P_PointsRecords);
        }
        return hubPointsRecords;
    }
    
    @OAOne(
        displayName = "Quiz Result", 
        reverseName = QuizResult.P_PointsRequest, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"QuizResultId"})
    public QuizResult getQuizResult() {
        if (quizResult == null) {
            quizResult = (QuizResult) getObject(P_QuizResult);
        }
        return quizResult;
    }
    
    public void setQuizResult(QuizResult newValue) {
        fireBeforePropertyChange(P_QuizResult, this.quizResult, newValue);
        QuizResult old = this.quizResult;
        this.quizResult = newValue;
        firePropertyChange(P_QuizResult, old, this.quizResult);
    }
    
    @OAOne(
        displayName = "Requesting Employee", 
        reverseName = Employee.P_PointsRequest, 
        required = true
    )
    @OAFkey(columns = {"RequestingEmployeeId"})
    public Employee getRequestingEmployee() {
        if (requestingEmployee == null) {
            requestingEmployee = (Employee) getObject(P_RequestingEmployee);
        }
        return requestingEmployee;
    }
    
    public void setRequestingEmployee(Employee newValue) {
        fireBeforePropertyChange(P_RequestingEmployee, this.requestingEmployee, newValue);
        Employee old = this.requestingEmployee;
        this.requestingEmployee = newValue;
        firePropertyChange(P_RequestingEmployee, old, this.requestingEmployee);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.approved = rs.getBoolean(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsRequest.P_Approved, true);
        }
        this.notes = rs.getString(4);
        this.errorNotes = rs.getString(5);
        this.filename = rs.getString(6);
        date = rs.getDate(7);
        if (date != null) this.approvedDate = new OADate(date);
        this.requestType = (int) rs.getInt(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, PointsRequest.P_RequestType, true);
        }
        int approvingEmployeeFkey = rs.getInt(9);
        if (!rs.wasNull() && approvingEmployeeFkey > 0) {
            setProperty(P_ApprovingEmployee, new OAObjectKey(approvingEmployeeFkey));
        }
        int approvingUserFkey = rs.getInt(10);
        if (!rs.wasNull() && approvingUserFkey > 0) {
            setProperty(P_ApprovingUser, new OAObjectKey(approvingUserFkey));
        }
        int pointsAwardLevelFkey = rs.getInt(11);
        if (!rs.wasNull() && pointsAwardLevelFkey > 0) {
            setProperty(P_PointsAwardLevel, new OAObjectKey(pointsAwardLevelFkey));
        }
        int quizResultFkey = rs.getInt(12);
        if (!rs.wasNull() && quizResultFkey > 0) {
            setProperty(P_QuizResult, new OAObjectKey(quizResultFkey));
        }
        int requestingEmployeeFkey = rs.getInt(13);
        if (!rs.wasNull() && requestingEmployeeFkey > 0) {
            setProperty(P_RequestingEmployee, new OAObjectKey(requestingEmployeeFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

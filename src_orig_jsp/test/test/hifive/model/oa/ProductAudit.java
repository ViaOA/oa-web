// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pa",
    displayName = "Product Audit",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "ProductAuditProduct", columns = { @OAIndexColumn(name = "ProductId") })
    }
)
public class ProductAudit extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Cost = "Cost";
    public static final String P_Cost = "Cost";
    public static final String PROPERTY_HandlingCost = "HandlingCost";
    public static final String P_HandlingCost = "HandlingCost";
    public static final String PROPERTY_Note = "Note";
    public static final String P_Note = "Note";
     
     
    public static final String PROPERTY_Product = "Product";
    public static final String P_Product = "Product";
     
    protected int id;
    protected OADate created;
    protected double cost;
    protected double handlingCost;
    protected String note;
     
    // Links to other objects.
    protected transient Product product;
     
    public ProductAudit() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public ProductAudit(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(decimalPlaces = 2, isCurrency = true, displayLength = 7, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getCost() {
        return cost;
    }
    
    public void setCost(double newValue) {
        fireBeforePropertyChange(P_Cost, this.cost, newValue);
        double old = cost;
        this.cost = newValue;
        firePropertyChange(P_Cost, old, this.cost);
    }
    @OAProperty(displayName = "Handling Cost", decimalPlaces = 2, isCurrency = true, displayLength = 7, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DOUBLE)
    public double getHandlingCost() {
        return handlingCost;
    }
    
    public void setHandlingCost(double newValue) {
        fireBeforePropertyChange(P_HandlingCost, this.handlingCost, newValue);
        double old = handlingCost;
        this.handlingCost = newValue;
        firePropertyChange(P_HandlingCost, old, this.handlingCost);
    }
    @OAProperty(maxLength = 125, displayLength = 25, columnLength = 16)
    @OAColumn(maxLength = 125)
    public String getNote() {
        return note;
    }
    
    public void setNote(String newValue) {
        fireBeforePropertyChange(P_Note, this.note, newValue);
        String old = note;
        this.note = newValue;
        firePropertyChange(P_Note, old, this.note);
    }
    @OAOne(
        reverseName = Product.P_ProductAudits, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProductId"})
    public Product getProduct() {
        if (product == null) {
            product = (Product) getObject(P_Product);
        }
        return product;
    }
    
    public void setProduct(Product newValue) {
        fireBeforePropertyChange(P_Product, this.product, newValue);
        Product old = this.product;
        this.product = newValue;
        firePropertyChange(P_Product, old, this.product);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        this.cost = (double) rs.getDouble(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ProductAudit.P_Cost, true);
        }
        this.handlingCost = (double) rs.getDouble(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, ProductAudit.P_HandlingCost, true);
        }
        this.note = rs.getString(5);
        int productFkey = rs.getInt(6);
        if (!rs.wasNull() && productFkey > 0) {
            setProperty(P_Product, new OAObjectKey(productFkey));
        }
        if (rs.getMetaData().getColumnCount() != 6) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

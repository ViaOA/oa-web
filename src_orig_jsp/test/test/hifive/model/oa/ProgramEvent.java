// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;
import com.viaoa.util.OADateTime;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;
 
@OAClass(
    shortName = "pe",
    displayName = "Program Event",
    displayProperty = "name"
)
@OATable(
    indexes = {
        @OAIndex(name = "ProgramEventLocation", columns = { @OAIndexColumn(name = "LocationId") }), 
        @OAIndex(name = "ProgramEventProgram", columns = { @OAIndexColumn(name = "ProgramId") })
    }
)
public class ProgramEvent extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_BeginDateTime = "BeginDateTime";
    public static final String P_BeginDateTime = "BeginDateTime";
    public static final String PROPERTY_EndDateTime = "EndDateTime";
    public static final String P_EndDateTime = "EndDateTime";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_Text = "Text";
    public static final String P_Text = "Text";
     
     
    public static final String PROPERTY_Location = "Location";
    public static final String P_Location = "Location";
    public static final String PROPERTY_Program = "Program";
    public static final String P_Program = "Program";
     
    protected int id;
    protected OADate created;
    protected OADateTime beginDateTime;
    protected OADateTime endDateTime;
    protected String name;
    protected String text;
     
    // Links to other objects.
    protected transient Location location;
    protected transient Program program;
     
    public ProgramEvent() {
        if (!isLoading()) {
            setCreated(new OADate());
        }
    }
     
    public ProgramEvent(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADate()", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getCreated() {
        return created;
    }
    
    public void setCreated(OADate newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADate old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(displayName = "Begin", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getBeginDateTime() {
        return beginDateTime;
    }
    
    public void setBeginDateTime(OADateTime newValue) {
        fireBeforePropertyChange(P_BeginDateTime, this.beginDateTime, newValue);
        OADateTime old = beginDateTime;
        this.beginDateTime = newValue;
        firePropertyChange(P_BeginDateTime, old, this.beginDateTime);
    }
    @OAProperty(displayName = "End", displayLength = 13)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getEndDateTime() {
        return endDateTime;
    }
    
    public void setEndDateTime(OADateTime newValue) {
        fireBeforePropertyChange(P_EndDateTime, this.endDateTime, newValue);
        OADateTime old = endDateTime;
        this.endDateTime = newValue;
        firePropertyChange(P_EndDateTime, old, this.endDateTime);
    }
    @OAProperty(maxLength = 175, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 175)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(maxLength = 4, displayLength = 4)
    @OAColumn(name = "TextValue", sqlType = java.sql.Types.CLOB)
    public String getText() {
        return text;
    }
    
    public void setText(String newValue) {
        fireBeforePropertyChange(P_Text, this.text, newValue);
        String old = text;
        this.text = newValue;
        firePropertyChange(P_Text, old, this.text);
    }
    @OAOne(
        reverseName = Location.P_ProgramEvents, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"LocationId"})
    public Location getLocation() {
        if (location == null) {
            location = (Location) getObject(P_Location);
        }
        return location;
    }
    
    public void setLocation(Location newValue) {
        fireBeforePropertyChange(P_Location, this.location, newValue);
        Location old = this.location;
        this.location = newValue;
        firePropertyChange(P_Location, old, this.location);
    }
    
    @OAOne(
        reverseName = Program.P_ProgramEvents, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ProgramId"})
    public Program getProgram() {
        if (program == null) {
            program = (Program) getObject(P_Program);
        }
        return program;
    }
    
    public void setProgram(Program newValue) {
        fireBeforePropertyChange(P_Program, this.program, newValue);
        Program old = this.program;
        this.program = newValue;
        firePropertyChange(P_Program, old, this.program);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Date date;
        date = rs.getDate(2);
        if (date != null) this.created = new OADate(date);
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.beginDateTime = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.endDateTime = new OADateTime(timestamp);
        this.name = rs.getString(5);
        this.text = rs.getString(6);
        int locationFkey = rs.getInt(7);
        if (!rs.wasNull() && locationFkey > 0) {
            setProperty(P_Location, new OAObjectKey(locationFkey));
        }
        int programFkey = rs.getInt(8);
        if (!rs.wasNull() && programFkey > 0) {
            setProperty(P_Program, new OAObjectKey(programFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

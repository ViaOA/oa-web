// Generated by OABuilder
package test.hifive.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.hifive.model.oa.filter.*;
import test.hifive.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "sec",
    displayName = "Section",
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[Catalog]."+Catalog.P_Sections
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "SectionCatalog", columns = { @OAIndexColumn(name = "CatalogId") }), 
        @OAIndex(name = "SectionParentSection", columns = { @OAIndexColumn(name = "ParentSectionId") })
    }
)
public class Section extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Seq = "Seq";
    public static final String P_Seq = "Seq";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
     
     
    public static final String PROPERTY_AwardTypes = "AwardTypes";
    public static final String P_AwardTypes = "AwardTypes";
    public static final String PROPERTY_Catalog = "Catalog";
    public static final String P_Catalog = "Catalog";
    public static final String PROPERTY_Items = "Items";
    public static final String P_Items = "Items";
    public static final String PROPERTY_ParentSection = "ParentSection";
    public static final String P_ParentSection = "ParentSection";
    public static final String PROPERTY_Sections = "Sections";
    public static final String P_Sections = "Sections";
     
    protected int id;
    protected int seq;
    protected String name;
     
    // Links to other objects.
    protected transient Catalog catalog;
    protected transient Hub<Item> hubItems;
    protected transient Section parentSection;
    protected transient Hub<Section> hubSections;
     
    public Section() {
    }
     
    public Section(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayLength = 5, isAutoSeq = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getSeq() {
        return seq;
    }
    
    public void setSeq(int newValue) {
        fireBeforePropertyChange(P_Seq, this.seq, newValue);
        int old = seq;
        this.seq = newValue;
        firePropertyChange(P_Seq, old, this.seq);
    }
    @OAProperty(maxLength = 75, displayLength = 25, columnLength = 20)
    @OAColumn(maxLength = 75)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAMany(
        displayName = "Award Types", 
        toClass = AwardType.class, 
        reverseName = AwardType.P_Section, 
        createMethod = false
    )
    private Hub<AwardType> getAwardTypes() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Catalog.P_Sections, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"CatalogId"})
    public Catalog getCatalog() {
        if (catalog == null) {
            catalog = (Catalog) getObject(P_Catalog);
        }
        return catalog;
    }
    
    public void setCatalog(Catalog newValue) {
        fireBeforePropertyChange(P_Catalog, this.catalog, newValue);
        Catalog old = this.catalog;
        this.catalog = newValue;
        firePropertyChange(P_Catalog, old, this.catalog);
    }
    
    @OAMany(
        toClass = Item.class, 
        reverseName = Item.P_Sections
    )
    @OALinkTable(name = "SectionItem", indexName = "ItemSection", columns = {"SectionId"})
    public Hub<Item> getItems() {
        if (hubItems == null) {
            hubItems = (Hub<Item>) getHub(P_Items);
        }
        return hubItems;
    }
    
    @OAOne(
        displayName = "Parent Section", 
        reverseName = Section.P_Sections, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ParentSectionId"})
    public Section getParentSection() {
        if (parentSection == null) {
            parentSection = (Section) getObject(P_ParentSection);
        }
        return parentSection;
    }
    
    public void setParentSection(Section newValue) {
        fireBeforePropertyChange(P_ParentSection, this.parentSection, newValue);
        Section old = this.parentSection;
        this.parentSection = newValue;
        firePropertyChange(P_ParentSection, old, this.parentSection);
    }
    
    @OAMany(
        displayName = "Sub Sections", 
        toClass = Section.class, 
        recursive = true, 
        reverseName = Section.P_ParentSection, 
        seqProperty = Section.P_Seq, 
        sortProperty = Section.P_Seq
    )
    public Hub<Section> getSections() {
        if (hubSections == null) {
            hubSections = (Hub<Section>) getHub(P_Sections);
        }
        return hubSections;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.seq = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Section.P_Seq, true);
        }
        this.name = rs.getString(3);
        int catalogFkey = rs.getInt(4);
        if (!rs.wasNull() && catalogFkey > 0) {
            setProperty(P_Catalog, new OAObjectKey(catalogFkey));
        }
        int parentSectionFkey = rs.getInt(5);
        if (!rs.wasNull() && parentSectionFkey > 0) {
            setProperty(P_ParentSection, new OAObjectKey(parentSectionFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.hifive.model.oa.propertypath;
 
import java.io.Serializable;

import test.hifive.model.oa.*;
 
public class PointsRequestPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private EmployeePPx approvingEmployee;
    private UserPPx approvingUser;
    private EmailPPx emails;
    private PointsApprovalPPx pointsApprovals;
    private PointsAwardLevelPPx pointsAwardLevel;
    private PointsRecordPPx pointsRecords;
    private QuizResultPPx quizResult;
    private EmployeePPx requestingEmployee;
     
    public PointsRequestPPx(String name) {
        this(null, name);
    }

    public PointsRequestPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public EmployeePPx approvingEmployee() {
        if (approvingEmployee == null) approvingEmployee = new EmployeePPx(this, PointsRequest.P_ApprovingEmployee);
        return approvingEmployee;
    }

    public UserPPx approvingUser() {
        if (approvingUser == null) approvingUser = new UserPPx(this, PointsRequest.P_ApprovingUser);
        return approvingUser;
    }

    public EmailPPx emails() {
        if (emails == null) emails = new EmailPPx(this, PointsRequest.P_Emails);
        return emails;
    }

    public PointsApprovalPPx pointsApprovals() {
        if (pointsApprovals == null) pointsApprovals = new PointsApprovalPPx(this, PointsRequest.P_PointsApprovals);
        return pointsApprovals;
    }

    public PointsAwardLevelPPx pointsAwardLevel() {
        if (pointsAwardLevel == null) pointsAwardLevel = new PointsAwardLevelPPx(this, PointsRequest.P_PointsAwardLevel);
        return pointsAwardLevel;
    }

    public PointsRecordPPx pointsRecords() {
        if (pointsRecords == null) pointsRecords = new PointsRecordPPx(this, PointsRequest.P_PointsRecords);
        return pointsRecords;
    }

    public QuizResultPPx quizResult() {
        if (quizResult == null) quizResult = new QuizResultPPx(this, PointsRequest.P_QuizResult);
        return quizResult;
    }

    public EmployeePPx requestingEmployee() {
        if (requestingEmployee == null) requestingEmployee = new EmployeePPx(this, PointsRequest.P_RequestingEmployee);
        return requestingEmployee;
    }

    public String id() {
        return pp + "." + PointsRequest.P_Id;
    }

    public String created() {
        return pp + "." + PointsRequest.P_Created;
    }

    public String approved() {
        return pp + "." + PointsRequest.P_Approved;
    }

    public String notes() {
        return pp + "." + PointsRequest.P_Notes;
    }

    public String errorNotes() {
        return pp + "." + PointsRequest.P_ErrorNotes;
    }

    public String filename() {
        return pp + "." + PointsRequest.P_Filename;
    }

    public String approvedDate() {
        return pp + "." + PointsRequest.P_ApprovedDate;
    }

    public String requestType() {
        return pp + "." + PointsRequest.P_RequestType;
    }

    public String totalValue() {
        return pp + "." + PointsRequest.P_TotalValue;
    }

    public String totalPoints() {
        return pp + "." + PointsRequest.P_TotalPoints;
    }

    public String unapprovedPurchaseRequestsFilter() {
        return pp + ":unapprovedPurchaseRequests()";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

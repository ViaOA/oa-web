// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac.delegate.ServerModelDelegate;
import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "app",
    displayName = "Application",
    displayProperty = "applicationType"
)
@OATable(
    indexes = {
        @OAIndex(name = "ApplicationServer", columns = { @OAIndexColumn(name = "ServerId") })
    }
)
public class Application extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_InstanceNumber = "InstanceNumber";
    public static final String P_InstanceNumber = "InstanceNumber";
    public static final String PROPERTY_TradingSystemId = "TradingSystemId";
    public static final String P_TradingSystemId = "TradingSystemId";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_UserId = "UserId";
    public static final String P_UserId = "UserId";
     
    public static final String PROPERTY_Autocomplete = "Autocomplete";
    public static final String P_Autocomplete = "Autocomplete";
     
    public static final String PROPERTY_ApplicationGroups = "ApplicationGroups";
    public static final String P_ApplicationGroups = "ApplicationGroups";
    public static final String PROPERTY_ApplicationStatus = "ApplicationStatus";
    public static final String P_ApplicationStatus = "ApplicationStatus";
    public static final String PROPERTY_ApplicationType = "ApplicationType";
    public static final String P_ApplicationType = "ApplicationType";
    public static final String PROPERTY_ApplicationVersions = "ApplicationVersions";
    public static final String P_ApplicationVersions = "ApplicationVersions";
    public static final String PROPERTY_GSMRClient = "GSMRClient";
    public static final String P_GSMRClient = "GSMRClient";
    public static final String PROPERTY_GSMRServer = "GSMRServer";
    public static final String P_GSMRServer = "GSMRServer";
    public static final String PROPERTY_LLADClient = "LLADClient";
    public static final String P_LLADClient = "LLADClient";
    public static final String PROPERTY_LLADServer = "LLADServer";
    public static final String P_LLADServer = "LLADServer";
    public static final String PROPERTY_MRADClient = "MRADClient";
    public static final String P_MRADClient = "MRADClient";
    public static final String PROPERTY_MRADServer = "MRADServer";
    public static final String P_MRADServer = "MRADServer";
    public static final String PROPERTY_RCServerListDetails = "RCServerListDetails";
    public static final String P_RCServerListDetails = "RCServerListDetails";
    public static final String PROPERTY_Schedules = "Schedules";
    public static final String P_Schedules = "Schedules";
    public static final String PROPERTY_Server = "Server";
    public static final String P_Server = "Server";
    public static final String PROPERTY_ServerFiles = "ServerFiles";
    public static final String P_ServerFiles = "ServerFiles";
     
    protected int id;
    protected int instanceNumber;
    protected int tradingSystemId;
    protected String name;
    protected String userId;
     
    // Links to other objects.
    protected transient Hub<ApplicationGroup> hubApplicationGroups;
    protected transient ApplicationStatus applicationStatus;
    protected transient ApplicationType applicationType;
    protected transient Hub<ApplicationVersion> hubApplicationVersions;
    protected transient Hub<Schedule> hubSchedules;
    protected transient Server server;
    protected transient Hub<ServerFile> hubServerFiles;
     
    public Application() {
    }
     
    public Application(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Instance Number", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getInstanceNumber() {
        return instanceNumber;
    }
    
    public void setInstanceNumber(int newValue) {
        fireBeforePropertyChange(P_InstanceNumber, this.instanceNumber, newValue);
        int old = instanceNumber;
        this.instanceNumber = newValue;
        firePropertyChange(P_InstanceNumber, old, this.instanceNumber);
    }
    @OAProperty(displayName = "Trading System Id", displayLength = 10, columnLength = 14)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getTradingSystemId() {
        return tradingSystemId;
    }
    
    public void setTradingSystemId(int newValue) {
        fireBeforePropertyChange(P_TradingSystemId, this.tradingSystemId, newValue);
        int old = tradingSystemId;
        this.tradingSystemId = newValue;
        firePropertyChange(P_TradingSystemId, old, this.tradingSystemId);
    }
    @OAProperty(maxLength = 55, displayLength = 15, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }
    
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    @OAProperty(displayName = "User Id", maxLength = 25, displayLength = 25, columnLength = 10)
    @OAColumn(maxLength = 25)
    public String getUserId() {
        return userId;
    }
    
    public void setUserId(String newValue) {
        fireBeforePropertyChange(P_UserId, this.userId, newValue);
        String old = userId;
        this.userId = newValue;
        firePropertyChange(P_UserId, old, this.userId);
    }
    @OACalculatedProperty(displayLength = 12, properties = {P_Server+"."+Server.P_HostName, P_ApplicationType+"."+ApplicationType.P_Code})
    public String getAutocomplete() {
        String autocomplete = "";
        Server server = this.getServer();
        if (server != null) {
            String hostName = server.getHostName();
            if (hostName != null)  autocomplete += hostName;
        }
    
        // applicationType.code
        ApplicationType applicationType = this.getApplicationType();
        if (applicationType != null) {
            String code = applicationType.getCode();
            if (autocomplete.length() > 0) autocomplete += " ";
            autocomplete += "(" + code + ")";
        }
        return autocomplete;
    }
    
     
    @OAMany(
        displayName = "Application Groups", 
        toClass = ApplicationGroup.class, 
        reverseName = ApplicationGroup.P_Applications
    )
    @OALinkTable(name = "ApplicationGroupApplication", indexName = "ApplicationGroupApplication", columns = {"ApplicationId"})
    public Hub<ApplicationGroup> getApplicationGroups() {
        if (hubApplicationGroups == null) {
            hubApplicationGroups = (Hub<ApplicationGroup>) getHub(P_ApplicationGroups);
        }
        return hubApplicationGroups;
    }
    
    @OAOne(
        displayName = "Application Status", 
        reverseName = ApplicationStatus.P_Applications, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationStatusId"})
    public ApplicationStatus getApplicationStatus() {
        if (applicationStatus == null) {
            applicationStatus = (ApplicationStatus) getObject(P_ApplicationStatus);
        }
        return applicationStatus;
    }
    
    public void setApplicationStatus(ApplicationStatus newValue) {
        fireBeforePropertyChange(P_ApplicationStatus, this.applicationStatus, newValue);
        ApplicationStatus old = this.applicationStatus;
        this.applicationStatus = newValue;
        firePropertyChange(P_ApplicationStatus, old, this.applicationStatus);
    }
    
    @OAOne(
        displayName = "Application Type", 
        reverseName = ApplicationType.P_Applications, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationTypeId"})
    public ApplicationType getApplicationType() {
        if (applicationType == null) {
            applicationType = (ApplicationType) getObject(P_ApplicationType);
        }
        return applicationType;
    }
    
    public void setApplicationType(ApplicationType newValue) {
        fireBeforePropertyChange(P_ApplicationType, this.applicationType, newValue);
        ApplicationType old = this.applicationType;
        this.applicationType = newValue;
        firePropertyChange(P_ApplicationType, old, this.applicationType);
    }
    
    @OAMany(
        displayName = "Application Versions", 
        toClass = ApplicationVersion.class, 
        owner = true, 
        reverseName = ApplicationVersion.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (Application.P_ApplicationType+"."+ApplicationType.P_PackageTypes), 
        matchProperty = ApplicationVersion.P_PackageType
    )
    public Hub<ApplicationVersion> getApplicationVersions() {
        if (hubApplicationVersions == null) {
            hubApplicationVersions = (Hub<ApplicationVersion>) getHub(P_ApplicationVersions);
        }
        return hubApplicationVersions;
    }
    
    @OAOne(
        reverseName = GSMRClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private GSMRClient getGSMRClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = GSMRServer.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private GSMRServer getGSMRServer() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = LLADClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private LLADClient getLLADClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = LLADServer.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private LLADServer getLLADServer() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "MRAD Client", 
        reverseName = MRADClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private MRADClient getMRADClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "MRAD Server", 
        reverseName = MRADServer.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private MRADServer getMRADServer() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "RCServer List Details", 
        toClass = RCServerListDetail.class, 
        reverseName = RCServerListDetail.P_Applications, 
        createMethod = false
    )
    @OALinkTable(name = "RCServerListDetailApplication", indexName = "RCServerListDetailApplication", columns = {"ApplicationId"})
    private Hub<RCServerListDetail> getRCServerListDetails() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        toClass = Schedule.class, 
        reverseName = Schedule.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Schedule> getSchedules() {
        if (hubSchedules == null) {
            hubSchedules = (Hub<Schedule>) getHub(P_Schedules);
        }
        return hubSchedules;
    }
    
    @OAOne(
        reverseName = Server.P_Applications, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerId"})
    public Server getServer() {
        if (server == null) {
            server = (Server) getObject(P_Server);
        }
        return server;
    }
    
    public void setServer(Server newValue) {
        fireBeforePropertyChange(P_Server, this.server, newValue);
        Server old = this.server;
        this.server = newValue;
        firePropertyChange(P_Server, old, this.server);
    }
    
    @OAMany(
        displayName = "Server Files", 
        toClass = ServerFile.class, 
        owner = true, 
        reverseName = ServerFile.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<ServerFile> getServerFiles() {
        if (hubServerFiles == null) {
            hubServerFiles = (Hub<ServerFile>) getHub(P_ServerFiles);
        }
        return hubServerFiles;
    }
    
    // start - Start
    public void start() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().application_start(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.start(this);
    */
    }
     
    // stop - Stop
    public void stop() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().application_stop(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.stop(this);
    */
    }
     
    // kill - Kill
    public void kill() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().application_kill(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.hardKill(this);
    */
    }
     
    // suspend - Suspend
    public void suspend() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().application_suspend(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.suspend(this);
    */
    }
     
    // resume - Resume
    public void resume() throws Exception {
    /*
        if (!isServer()) {
            RemoteDelegate.getRemoteModel().application_resume(this);
            return;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        remote.resume(this);
    */
    }
     
    // ping - Ping
    public boolean ping() throws Exception {
    /*
        if (!isServer()) {
            boolean b = RemoteDelegate.getRemoteModel().application_ping(this);
            return b;
        }
        RemoteMRADInterface remote = RemoteDelegate.getRemoteMRADClient();
        if (remote == null) {
            throw new RuntimeException("AdminServer is not available");
        }
        return remote.ping(this);
    */
    return true;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.instanceNumber = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_InstanceNumber, true);
        }
        this.tradingSystemId = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_TradingSystemId, true);
        }
        this.name = rs.getString(4);
        this.userId = rs.getString(5);
        int applicationStatusFkey = rs.getInt(6);
        if (!rs.wasNull() && applicationStatusFkey > 0) {
            setProperty(P_ApplicationStatus, new OAObjectKey(applicationStatusFkey));
        }
        int applicationTypeFkey = rs.getInt(7);
        if (!rs.wasNull() && applicationTypeFkey > 0) {
            setProperty(P_ApplicationType, new OAObjectKey(applicationTypeFkey));
        }
        int serverFkey = rs.getInt(8);
        if (!rs.wasNull() && serverFkey > 0) {
            setProperty(P_Server, new OAObjectKey(serverFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

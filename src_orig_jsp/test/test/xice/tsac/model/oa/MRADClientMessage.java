// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "mradcm",
    displayName = "MRAD Client Message",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "MRADClientMessageMradClient", columns = { @OAIndexColumn(name = "MradClientId") })
    }
)
public class MRADClientMessage extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Text = "Text";
    public static final String P_Text = "Text";
    public static final String PROPERTY_Type = "Type";
    public static final String P_Type = "Type";
    public static final String PROPERTY_TypeAsString = "TypeAsString";
    public static final String P_TypeAsString = "TypeAsString";
     
     
    public static final String PROPERTY_MRADClient = "MRADClient";
    public static final String P_MRADClient = "MRADClient";
    public static final String PROPERTY_MRADClient2 = "MRADClient2";
    public static final String P_MRADClient2 = "MRADClient2";
     
    protected int id;
    protected OADateTime created;
    protected String text;
    protected int type;
    public static final int TYPE_Info = 0;
    public static final int TYPE_Warn = 1;
    public static final int TYPE_Fatal = 2;
    public static final Hub<String> hubType;
    static {
        hubType = new Hub<String>(String.class);
        hubType.addElement("Info");
        hubType.addElement("Warn");
        hubType.addElement("Fatal");
    }
     
    // Links to other objects.
    protected transient MRADClient mradClient;
    protected transient MRADClient mradClient2;
     
    public MRADClientMessage() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public MRADClientMessage(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 254, displayLength = 25, columnLength = 18)
    @OAColumn(name = "TextValue", maxLength = 254)
    public String getText() {
        return text;
    }
    
    public void setText(String newValue) {
        fireBeforePropertyChange(P_Text, this.text, newValue);
        String old = text;
        this.text = newValue;
        firePropertyChange(P_Text, old, this.text);
    }
    @OAProperty(displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getType() {
        return type;
    }
    
    public void setType(int newValue) {
        fireBeforePropertyChange(P_Type, this.type, newValue);
        int old = type;
        this.type = newValue;
        firePropertyChange(P_Type, old, this.type);
    }
    public String getTypeAsString() {
        if (isNull(P_Type)) return "";
        String s = hubType.getAt(getType());
        if (s == null) s = "";
        return s;
    }
    @OAOne(
        displayName = "MRAD Client", 
        reverseName = MRADClient.P_MRADClientMessages, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MradClientId"})
    public MRADClient getMRADClient() {
        if (mradClient == null) {
            mradClient = (MRADClient) getObject(P_MRADClient);
        }
        return mradClient;
    }
    
    public void setMRADClient(MRADClient newValue) {
        fireBeforePropertyChange(P_MRADClient, this.mradClient, newValue);
        MRADClient old = this.mradClient;
        this.mradClient = newValue;
        firePropertyChange(P_MRADClient, old, this.mradClient);
    }
    
    @OAOne(
        displayName = "MRAD Client", 
        isCalculated = true, 
        reverseName = MRADClient.P_LastMRADClientMessage
    )
    public MRADClient getMRADClient2() {
        if (mradClient2 == null) {
            mradClient2 = (MRADClient) getObject(P_MRADClient2);
        }
        return mradClient2;
    }
    
    public void setMRADClient2(MRADClient newValue) {
        fireBeforePropertyChange(P_MRADClient2, this.mradClient2, newValue);
        MRADClient old = this.mradClient2;
        this.mradClient2 = newValue;
        firePropertyChange(P_MRADClient2, old, this.mradClient2);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.text = rs.getString(3);
        this.type = (int) rs.getInt(4);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MRADClientMessage.P_Type, true);
        }
        int mradClientFkey = rs.getInt(5);
        if (!rs.wasNull() && mradClientFkey > 0) {
            setProperty(P_MRADClient, new OAObjectKey(mradClientFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

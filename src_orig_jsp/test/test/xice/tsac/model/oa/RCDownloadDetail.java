// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "rcdd",
    displayName = "RCDownload Detail",
    displayProperty = "packageName"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCDownloadDetailPackageVersion", columns = { @OAIndexColumn(name = "PackageVersionId") }), 
        @OAIndex(name = "RCDownloadDetailRcDownload", columns = { @OAIndexColumn(name = "RcDownloadId") })
    }
)
public class RCDownloadDetail extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Selected = "Selected";
    public static final String P_Selected = "Selected";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_Message = "Message";
    public static final String P_Message = "Message";
    public static final String PROPERTY_PackageId = "PackageId";
    public static final String P_PackageId = "PackageId";
    public static final String PROPERTY_PackageName = "PackageName";
    public static final String P_PackageName = "PackageName";
    public static final String PROPERTY_PackageFile = "PackageFile";
    public static final String P_PackageFile = "PackageFile";
    public static final String PROPERTY_PomFile = "PomFile";
    public static final String P_PomFile = "PomFile";
    public static final String PROPERTY_Version = "Version";
    public static final String P_Version = "Version";
    public static final String PROPERTY_TotalTime = "TotalTime";
    public static final String P_TotalTime = "TotalTime";
    public static final String PROPERTY_InvalidMessage = "InvalidMessage";
    public static final String P_InvalidMessage = "InvalidMessage";
     
     
    public static final String PROPERTY_PackageVersion = "PackageVersion";
    public static final String P_PackageVersion = "PackageVersion";
    public static final String PROPERTY_RCDeployDetails = "RCDeployDetails";
    public static final String P_RCDeployDetails = "RCDeployDetails";
    public static final String PROPERTY_RCDownload = "RCDownload";
    public static final String P_RCDownload = "RCDownload";
     
    protected int id;
    protected boolean selected;
    protected String error;
    protected String message;
    protected String packageId;
    protected String packageName;
    protected String packageFile;
    protected String pomFile;
    protected String version;
    protected int totalTime;
    protected String invalidMessage;
     
    // Links to other objects.
    protected transient PackageVersion packageVersion;
    protected transient Hub<RCDeployDetail> hubRCDeployDetails;
    protected transient RCDownload rcDownload;
     
    public RCDownloadDetail() {
    }
     
    public RCDownloadDetail(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSelected() {
        return selected;
    }
    
    public void setSelected(boolean newValue) {
        fireBeforePropertyChange(P_Selected, this.selected, newValue);
        boolean old = selected;
        this.selected = newValue;
        firePropertyChange(P_Selected, old, this.selected);
    }
    @OAProperty(maxLength = 128, displayLength = 40, columnLength = 18)
    @OAColumn(maxLength = 128)
    public String getError() {
        return error;
    }
    
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    @OAProperty(maxLength = 128, displayLength = 40, columnLength = 18)
    @OAColumn(name = "Error", maxLength = 128)
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String newValue) {
        fireBeforePropertyChange(P_Message, this.message, newValue);
        String old = message;
        this.message = newValue;
        firePropertyChange(P_Message, old, this.message);
    }
    @OAProperty(displayName = "Package Id", maxLength = 55, displayLength = 20, columnLength = 11)
    @OAColumn(maxLength = 55)
    public String getPackageId() {
        return packageId;
    }
    
    public void setPackageId(String newValue) {
        fireBeforePropertyChange(P_PackageId, this.packageId, newValue);
        String old = packageId;
        this.packageId = newValue;
        firePropertyChange(P_PackageId, old, this.packageId);
    }
    @OAProperty(displayName = "Package Name", maxLength = 55, displayLength = 20, columnLength = 11)
    @OAColumn(maxLength = 55)
    public String getPackageName() {
        return packageName;
    }
    
    public void setPackageName(String newValue) {
        fireBeforePropertyChange(P_PackageName, this.packageName, newValue);
        String old = packageName;
        this.packageName = newValue;
        firePropertyChange(P_PackageName, old, this.packageName);
    }
    @OAProperty(displayName = "Package File", maxLength = 55, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getPackageFile() {
        return packageFile;
    }
    
    public void setPackageFile(String newValue) {
        fireBeforePropertyChange(P_PackageFile, this.packageFile, newValue);
        String old = packageFile;
        this.packageFile = newValue;
        firePropertyChange(P_PackageFile, old, this.packageFile);
    }
    @OAProperty(displayName = "Pom File", maxLength = 55, displayLength = 20, columnLength = 12)
    @OAColumn(maxLength = 55)
    public String getPomFile() {
        return pomFile;
    }
    
    public void setPomFile(String newValue) {
        fireBeforePropertyChange(P_PomFile, this.pomFile, newValue);
        String old = pomFile;
        this.pomFile = newValue;
        firePropertyChange(P_PomFile, old, this.pomFile);
    }
    @OAProperty(maxLength = 20, displayLength = 15, columnLength = 8)
    @OAColumn(maxLength = 20)
    public String getVersion() {
        return version;
    }
    
    public void setVersion(String newValue) {
        fireBeforePropertyChange(P_Version, this.version, newValue);
        String old = version;
        this.version = newValue;
        firePropertyChange(P_Version, old, this.version);
    }
    @OAProperty(displayName = "Total Time", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getTotalTime() {
        return totalTime;
    }
    
    public void setTotalTime(int newValue) {
        fireBeforePropertyChange(P_TotalTime, this.totalTime, newValue);
        int old = totalTime;
        this.totalTime = newValue;
        firePropertyChange(P_TotalTime, old, this.totalTime);
    }
    @OAProperty(displayName = "Invalid Message", maxLength = 120, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 120)
    public String getInvalidMessage() {
        return invalidMessage;
    }
    
    public void setInvalidMessage(String newValue) {
        fireBeforePropertyChange(P_InvalidMessage, this.invalidMessage, newValue);
        String old = invalidMessage;
        this.invalidMessage = newValue;
        firePropertyChange(P_InvalidMessage, old, this.invalidMessage);
    }
    @OAOne(
        displayName = "Package Version", 
        reverseName = PackageVersion.P_RCDownloadDetails
    )
    @OAFkey(columns = {"PackageVersionId"})
    public PackageVersion getPackageVersion() {
        if (packageVersion == null) {
            packageVersion = (PackageVersion) getObject(P_PackageVersion);
        }
        return packageVersion;
    }
    
    public void setPackageVersion(PackageVersion newValue) {
        fireBeforePropertyChange(P_PackageVersion, this.packageVersion, newValue);
        PackageVersion old = this.packageVersion;
        this.packageVersion = newValue;
        firePropertyChange(P_PackageVersion, old, this.packageVersion);
    }
    
    @OAMany(
        displayName = "RC Deploy Details", 
        toClass = RCDeployDetail.class, 
        reverseName = RCDeployDetail.P_RCDownloadDetail
    )
    public Hub<RCDeployDetail> getRCDeployDetails() {
        if (hubRCDeployDetails == null) {
            hubRCDeployDetails = (Hub<RCDeployDetail>) getHub(P_RCDeployDetails);
        }
        return hubRCDeployDetails;
    }
    
    @OAOne(
        reverseName = RCDownload.P_RCDownloadDetails, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"RcDownloadId"})
    public RCDownload getRCDownload() {
        if (rcDownload == null) {
            rcDownload = (RCDownload) getObject(P_RCDownload);
        }
        return rcDownload;
    }
    
    public void setRCDownload(RCDownload newValue) {
        fireBeforePropertyChange(P_RCDownload, this.rcDownload, newValue);
        RCDownload old = this.rcDownload;
        this.rcDownload = newValue;
        firePropertyChange(P_RCDownload, old, this.rcDownload);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.selected = rs.getBoolean(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCDownloadDetail.P_Selected, true);
        }
        this.error = rs.getString(3);
        this.message = rs.getString(4);
        this.packageId = rs.getString(5);
        this.packageName = rs.getString(6);
        this.packageFile = rs.getString(7);
        this.pomFile = rs.getString(8);
        this.version = rs.getString(9);
        this.totalTime = (int) rs.getInt(10);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCDownloadDetail.P_TotalTime, true);
        }
        this.invalidMessage = rs.getString(11);
        int packageVersionFkey = rs.getInt(12);
        if (!rs.wasNull() && packageVersionFkey > 0) {
            setProperty(P_PackageVersion, new OAObjectKey(packageVersionFkey));
        }
        int rcDownloadFkey = rs.getInt(13);
        if (!rs.wasNull() && rcDownloadFkey > 0) {
            setProperty(P_RCDownload, new OAObjectKey(rcDownloadFkey));
        }
        if (rs.getMetaData().getColumnCount() != 13) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

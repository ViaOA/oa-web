// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.delegate.RemoteDelegate;
import test.xice.tsac.delegate.ServerModelDelegate;
import test.xice.tsac.delegate.oa.RCInstallDelegate;
import test.xice.tsac.delegate.oa.RemoteClientDelegate;
import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rci",
    displayName = "RC Install",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCInstallRcDeploy", columns = { @OAIndexColumn(name = "RcDeployId") })
    }
)
public class RCInstall extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
     
     
    public static final String PROPERTY_RCDeploy = "RCDeploy";
    public static final String P_RCDeploy = "RCDeploy";
    public static final String PROPERTY_RCExecute = "RCExecute";
    public static final String P_RCExecute = "RCExecute";
    public static final String PROPERTY_RCInstallDetails = "RCInstallDetails";
    public static final String P_RCInstallDetails = "RCInstallDetails";
     
    protected int id;
    protected OADateTime created;
     
    // Links to other objects.
    protected transient RCDeploy rcDeploy;
    protected transient RCExecute rcExecute;
    protected transient Hub<RCInstallDetail> hubRCInstallDetails;
     
    public RCInstall() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public RCInstall(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAOne(
        displayName = "RC Deploy", 
        reverseName = RCDeploy.P_RCInstall
    )
    @OAFkey(columns = {"RcDeployId"})
    public RCDeploy getRCDeploy() {
        if (rcDeploy == null) {
            rcDeploy = (RCDeploy) getObject(P_RCDeploy);
        }
        return rcDeploy;
    }
    
    public void setRCDeploy(RCDeploy newValue) {
        fireBeforePropertyChange(P_RCDeploy, this.rcDeploy, newValue);
        RCDeploy old = this.rcDeploy;
        this.rcDeploy = newValue;
        firePropertyChange(P_RCDeploy, old, this.rcDeploy);
    }
    
    @OAOne(
        displayName = "RC Execute", 
        reverseName = RCExecute.P_RCInstalls
    )
    @OAFkey(columns = {"RcExecuteId"})
    public RCExecute getRCExecute() {
        if (rcExecute == null) {
            rcExecute = (RCExecute) getObject(P_RCExecute);
        }
        return rcExecute;
    }
    
    public void setRCExecute(RCExecute newValue) {
        fireBeforePropertyChange(P_RCExecute, this.rcExecute, newValue);
        RCExecute old = this.rcExecute;
        this.rcExecute = newValue;
        firePropertyChange(P_RCExecute, old, this.rcExecute);
    }
    
    @OAMany(
        displayName = "RC Install Details", 
        toClass = RCInstallDetail.class, 
        owner = true, 
        reverseName = RCInstallDetail.P_RCInstall, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<RCInstallDetail> getRCInstallDetails() {
        if (hubRCInstallDetails == null) {
            hubRCInstallDetails = (Hub<RCInstallDetail>) getHub(P_RCInstallDetails);
        }
        return hubRCInstallDetails;
    }
    
    // run
    public void run() throws Exception {
        RCInstallDelegate.run(this);
    }
     
    // process
    public void process() throws Exception {
        RCInstallDelegate.process(this);
    }
     
    // load
    public void load() throws Exception {
        RCInstallDelegate.load(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        int rcDeployFkey = rs.getInt(3);
        if (!rs.wasNull() && rcDeployFkey > 0) {
            setProperty(P_RCDeploy, new OAObjectKey(rcDeployFkey));
        }
        int rcExecuteFkey = rs.getInt(4);
        if (!rs.wasNull() && rcExecuteFkey > 0) {
            setProperty(P_RCExecute, new OAObjectKey(rcExecuteFkey));
        }
        if (rs.getMetaData().getColumnCount() != 4) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rcvd",
    displayName = "RC Verify Detail",
    displayProperty = "hostName"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCVerifyDetailRcVerify", columns = { @OAIndexColumn(name = "RcVerifyId") })
    }
)
public class RCVerifyDetail extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_HostName = "HostName";
    public static final String P_HostName = "HostName";
    public static final String PROPERTY_PackageId = "PackageId";
    public static final String P_PackageId = "PackageId";
    public static final String PROPERTY_InstalledDate = "InstalledDate";
    public static final String P_InstalledDate = "InstalledDate";
    public static final String PROPERTY_Version = "Version";
    public static final String P_Version = "Version";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_InvalidMessage = "InvalidMessage";
    public static final String P_InvalidMessage = "InvalidMessage";
     
     
    public static final String PROPERTY_PackageType = "PackageType";
    public static final String P_PackageType = "PackageType";
    public static final String PROPERTY_PackageVersion = "PackageVersion";
    public static final String P_PackageVersion = "PackageVersion";
    public static final String PROPERTY_RCDeployDetail = "RCDeployDetail";
    public static final String P_RCDeployDetail = "RCDeployDetail";
    public static final String PROPERTY_RCVerify = "RCVerify";
    public static final String P_RCVerify = "RCVerify";
     
    protected int id;
    protected String hostName;
    protected String packageId;
    protected OADate installedDate;
    protected String version;
    protected String error;
    protected String invalidMessage;
     
    // Links to other objects.
    protected transient PackageType packageType;
    protected transient PackageVersion packageVersion;
    protected transient RCDeployDetail rcDeployDetail;
    protected transient RCVerify rcVerify;
     
    public RCVerifyDetail() {
    }
     
    public RCVerifyDetail(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Host Name", maxLength = 50, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 50)
    public String getHostName() {
        return hostName;
    }
    
    public void setHostName(String newValue) {
        fireBeforePropertyChange(P_HostName, this.hostName, newValue);
        String old = hostName;
        this.hostName = newValue;
        firePropertyChange(P_HostName, old, this.hostName);
    }
    @OAProperty(displayName = "Package Id", maxLength = 50, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 50)
    public String getPackageId() {
        return packageId;
    }
    
    public void setPackageId(String newValue) {
        fireBeforePropertyChange(P_PackageId, this.packageId, newValue);
        String old = packageId;
        this.packageId = newValue;
        firePropertyChange(P_PackageId, old, this.packageId);
    }
    @OAProperty(displayName = "Installed Date", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInstalledDate() {
        return installedDate;
    }
    
    public void setInstalledDate(OADate newValue) {
        fireBeforePropertyChange(P_InstalledDate, this.installedDate, newValue);
        OADate old = installedDate;
        this.installedDate = newValue;
        firePropertyChange(P_InstalledDate, old, this.installedDate);
    }
    @OAProperty(maxLength = 35, displayLength = 14, columnLength = 10, isProcessed = true)
    @OAColumn(maxLength = 35)
    public String getVersion() {
        return version;
    }
    
    public void setVersion(String newValue) {
        fireBeforePropertyChange(P_Version, this.version, newValue);
        String old = version;
        this.version = newValue;
        firePropertyChange(P_Version, old, this.version);
    }
    @OAProperty(maxLength = 250, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 250)
    public String getError() {
        return error;
    }
    
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    @OAProperty(displayName = "Invalid Message", maxLength = 120, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 120)
    public String getInvalidMessage() {
        return invalidMessage;
    }
    
    public void setInvalidMessage(String newValue) {
        fireBeforePropertyChange(P_InvalidMessage, this.invalidMessage, newValue);
        String old = invalidMessage;
        this.invalidMessage = newValue;
        firePropertyChange(P_InvalidMessage, old, this.invalidMessage);
    }
    @OAOne(
        displayName = "Package Type", 
        reverseName = PackageType.P_RCVerifyDetails, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"PackageTypeId"})
    public PackageType getPackageType() {
        if (packageType == null) {
            packageType = (PackageType) getObject(P_PackageType);
        }
        return packageType;
    }
    
    public void setPackageType(PackageType newValue) {
        fireBeforePropertyChange(P_PackageType, this.packageType, newValue);
        PackageType old = this.packageType;
        this.packageType = newValue;
        firePropertyChange(P_PackageType, old, this.packageType);
    }
    
    @OAOne(
        displayName = "Package Version", 
        reverseName = PackageVersion.P_RCVerifyDetails
    )
    @OAFkey(columns = {"PackageVersionId"})
    public PackageVersion getPackageVersion() {
        if (packageVersion == null) {
            packageVersion = (PackageVersion) getObject(P_PackageVersion);
        }
        return packageVersion;
    }
    
    public void setPackageVersion(PackageVersion newValue) {
        fireBeforePropertyChange(P_PackageVersion, this.packageVersion, newValue);
        PackageVersion old = this.packageVersion;
        this.packageVersion = newValue;
        firePropertyChange(P_PackageVersion, old, this.packageVersion);
    }
    
    @OAOne(
        displayName = "RC Deploy Detail", 
        reverseName = RCDeployDetail.P_RCVerifyDetail
    )
    public RCDeployDetail getRCDeployDetail() {
        if (rcDeployDetail == null) {
            rcDeployDetail = (RCDeployDetail) getObject(P_RCDeployDetail);
        }
        return rcDeployDetail;
    }
    
    public void setRCDeployDetail(RCDeployDetail newValue) {
        fireBeforePropertyChange(P_RCDeployDetail, this.rcDeployDetail, newValue);
        RCDeployDetail old = this.rcDeployDetail;
        this.rcDeployDetail = newValue;
        firePropertyChange(P_RCDeployDetail, old, this.rcDeployDetail);
    }
    
    @OAOne(
        displayName = "RC Verify", 
        reverseName = RCVerify.P_RCVerifyDetails
    )
    @OAFkey(columns = {"RcVerifyId"})
    public RCVerify getRCVerify() {
        if (rcVerify == null) {
            rcVerify = (RCVerify) getObject(P_RCVerify);
        }
        return rcVerify;
    }
    
    public void setRCVerify(RCVerify newValue) {
        fireBeforePropertyChange(P_RCVerify, this.rcVerify, newValue);
        RCVerify old = this.rcVerify;
        this.rcVerify = newValue;
        firePropertyChange(P_RCVerify, old, this.rcVerify);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.hostName = rs.getString(2);
        this.packageId = rs.getString(3);
        java.sql.Date date;
        date = rs.getDate(4);
        if (date != null) this.installedDate = new OADate(date);
        this.version = rs.getString(5);
        this.error = rs.getString(6);
        this.invalidMessage = rs.getString(7);
        int packageTypeFkey = rs.getInt(8);
        if (!rs.wasNull() && packageTypeFkey > 0) {
            setProperty(P_PackageType, new OAObjectKey(packageTypeFkey));
        }
        int packageVersionFkey = rs.getInt(9);
        if (!rs.wasNull() && packageVersionFkey > 0) {
            setProperty(P_PackageVersion, new OAObjectKey(packageVersionFkey));
        }
        int rcVerifyFkey = rs.getInt(10);
        if (!rs.wasNull() && rcVerifyFkey > 0) {
            setProperty(P_RCVerify, new OAObjectKey(rcVerifyFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsac.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsac.model.oa.filter.*;
import test.xice.tsac.model.oa.propertypath.*;
 
@OAClass(
    shortName = "war",
    displayName = "Warning",
    displayProperty = "created"
)
@OATable(
)
public class Warning extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Message = "Message";
    public static final String P_Message = "Message";
    public static final String PROPERTY_ExceptionMessage = "ExceptionMessage";
    public static final String P_ExceptionMessage = "ExceptionMessage";
    public static final String PROPERTY_StackTrace = "StackTrace";
    public static final String P_StackTrace = "StackTrace";
    public static final String PROPERTY_ActionTaken = "ActionTaken";
    public static final String P_ActionTaken = "ActionTaken";
    public static final String PROPERTY_ActionTakenAsString = "ActionTakenAsString";
    public static final String P_ActionTakenAsString = "ActionTakenAsString";
    public static final String PROPERTY_ActionComment = "ActionComment";
    public static final String P_ActionComment = "ActionComment";
     
     
    public static final String PROPERTY_GSMRWarning = "GSMRWarning";
    public static final String P_GSMRWarning = "GSMRWarning";
     
    protected int id;
    protected OADateTime created;
    protected String message;
    protected String exceptionMessage;
    protected String stackTrace;
    protected int actionTaken;
    public static final int ACTIONTAKEN_OPEN = 0;
    public static final int ACTIONTAKEN_LOOKING = 1;
    public static final int ACTIONTAKEN_IGNORE = 2;
    public static final int ACTIONTAKEN_RESOLVED = 3;
    public static final int ACTIONTAKEN_KNOWNISSUE = 4;
    public static final Hub<String> hubActionTaken;
    static {
        hubActionTaken = new Hub<String>(String.class);
        hubActionTaken.addElement("Open");
        hubActionTaken.addElement("Looking");
        hubActionTaken.addElement("Ignore");
        hubActionTaken.addElement("Resolved");
        hubActionTaken.addElement("Known issue");
    }
    protected String actionComment;
     
    // Links to other objects.
     
    public Warning() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public Warning(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 15, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    @OAProperty(maxLength = 254, displayLength = 25, columnLength = 18, isProcessed = true)
    @OAColumn(maxLength = 254)
    public String getMessage() {
        return message;
    }
    
    public void setMessage(String newValue) {
        fireBeforePropertyChange(P_Message, this.message, newValue);
        String old = message;
        this.message = newValue;
        firePropertyChange(P_Message, old, this.message);
    }
    @OAProperty(displayName = "Exception Message", maxLength = 254, displayLength = 25, columnLength = 18, isProcessed = true)
    @OAColumn(maxLength = 254)
    public String getExceptionMessage() {
        return exceptionMessage;
    }
    
    public void setExceptionMessage(String newValue) {
        fireBeforePropertyChange(P_ExceptionMessage, this.exceptionMessage, newValue);
        String old = exceptionMessage;
        this.exceptionMessage = newValue;
        firePropertyChange(P_ExceptionMessage, old, this.exceptionMessage);
    }
    @OAProperty(displayName = "Stack Trace", maxLength = 10, displayLength = 10, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getStackTrace() {
        return stackTrace;
    }
    
    public void setStackTrace(String newValue) {
        fireBeforePropertyChange(P_StackTrace, this.stackTrace, newValue);
        String old = stackTrace;
        this.stackTrace = newValue;
        firePropertyChange(P_StackTrace, old, this.stackTrace);
    }
    @OAProperty(displayName = "Action Taken", displayLength = 5, isNameValue = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getActionTaken() {
        return actionTaken;
    }
    
    public void setActionTaken(int newValue) {
        fireBeforePropertyChange(P_ActionTaken, this.actionTaken, newValue);
        int old = actionTaken;
        this.actionTaken = newValue;
        firePropertyChange(P_ActionTaken, old, this.actionTaken);
    }
    public String getActionTakenAsString() {
        if (isNull(P_ActionTaken)) return "";
        String s = hubActionTaken.getAt(getActionTaken());
        if (s == null) s = "";
        return s;
    }
    @OAProperty(displayName = "Action Comment", maxLength = 13, displayLength = 13)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getActionComment() {
        return actionComment;
    }
    
    public void setActionComment(String newValue) {
        fireBeforePropertyChange(P_ActionComment, this.actionComment, newValue);
        String old = actionComment;
        this.actionComment = newValue;
        firePropertyChange(P_ActionComment, old, this.actionComment);
    }
    @OAOne(
        reverseName = GSMRWarning.P_Warning, 
        allowCreateNew = false, 
        allowAddExisting = false, 
        mustBeEmptyForDelete = true
    )
    private GSMRWarning getGSMRWarning() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.message = rs.getString(3);
        this.exceptionMessage = rs.getString(4);
        this.stackTrace = rs.getString(5);
        this.actionTaken = (int) rs.getInt(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Warning.P_ActionTaken, true);
        }
        this.actionComment = rs.getString(7);
        if (rs.getMetaData().getColumnCount() != 7) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

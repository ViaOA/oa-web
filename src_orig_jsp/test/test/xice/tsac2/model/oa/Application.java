// Generated by OABuilder
package test.xice.tsac2.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac2.model.oa.filter.*;
import test.xice.tsac2.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "app",
    displayName = "Application",
    displayProperty = "applicationType"
)
@OATable(
    indexes = {
        @OAIndex(name = "ApplicationApplicationGroup", columns = { @OAIndexColumn(name = "ApplicationGroupId") }), 
        @OAIndex(name = "ApplicationServer", columns = { @OAIndexColumn(name = "ServerId") })
    }
)
public class Application extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_InstanceNumber = "InstanceNumber";
    public static final String P_InstanceNumber = "InstanceNumber";
    public static final String PROPERTY_TradingSystemId = "TradingSystemId";
    public static final String P_TradingSystemId = "TradingSystemId";
    public static final String PROPERTY_Directory = "Directory";
    public static final String P_Directory = "Directory";
    public static final String PROPERTY_StartCommand = "StartCommand";
    public static final String P_StartCommand = "StartCommand";
    public static final String PROPERTY_StopCommand = "StopCommand";
    public static final String P_StopCommand = "StopCommand";
     
     
    public static final String PROPERTY_AdminClient = "AdminClient";
    public static final String P_AdminClient = "AdminClient";
    public static final String PROPERTY_AdminServer = "AdminServer";
    public static final String P_AdminServer = "AdminServer";
    public static final String PROPERTY_ApplicationGroup = "ApplicationGroup";
    public static final String P_ApplicationGroup = "ApplicationGroup";
    public static final String PROPERTY_ApplicationStatus = "ApplicationStatus";
    public static final String P_ApplicationStatus = "ApplicationStatus";
    public static final String PROPERTY_ApplicationType = "ApplicationType";
    public static final String P_ApplicationType = "ApplicationType";
    public static final String PROPERTY_ApplicationVersions = "ApplicationVersions";
    public static final String P_ApplicationVersions = "ApplicationVersions";
    public static final String PROPERTY_GSMRClient = "GSMRClient";
    public static final String P_GSMRClient = "GSMRClient";
    public static final String PROPERTY_GSMRServer = "GSMRServer";
    public static final String P_GSMRServer = "GSMRServer";
    public static final String PROPERTY_InstallVersions = "InstallVersions";
    public static final String P_InstallVersions = "InstallVersions";
    public static final String PROPERTY_LLADClient = "LLADClient";
    public static final String P_LLADClient = "LLADClient";
    public static final String PROPERTY_LLADServer = "LLADServer";
    public static final String P_LLADServer = "LLADServer";
    public static final String PROPERTY_RCInstalledVersionDetails = "RCInstalledVersionDetails";
    public static final String P_RCInstalledVersionDetails = "RCInstalledVersionDetails";
    public static final String PROPERTY_RCServerListDetails = "RCServerListDetails";
    public static final String P_RCServerListDetails = "RCServerListDetails";
    public static final String PROPERTY_Schedules = "Schedules";
    public static final String P_Schedules = "Schedules";
    public static final String PROPERTY_Server = "Server";
    public static final String P_Server = "Server";
    public static final String PROPERTY_ServerFiles = "ServerFiles";
    public static final String P_ServerFiles = "ServerFiles";
     
    protected int id;
    protected int instanceNumber;
    protected int tradingSystemId;
    protected String directory;
    protected String startCommand;
    protected String stopCommand;
     
    // Links to other objects.
    protected transient ApplicationGroup applicationGroup;
    protected transient ApplicationStatus applicationStatus;
    protected transient ApplicationType applicationType;
    protected transient Hub<ApplicationVersion> hubApplicationVersions;
    protected transient Hub<InstallVersion> hubInstallVersions;
    protected transient Hub<Schedule> hubSchedules;
    protected transient Server server;
    protected transient Hub<ServerFile> hubServerFiles;
     
    public Application() {
    }
     
    public Application(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayName = "Instance Number", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getInstanceNumber() {
        return instanceNumber;
    }
    
    public void setInstanceNumber(int newValue) {
        fireBeforePropertyChange(P_InstanceNumber, this.instanceNumber, newValue);
        int old = instanceNumber;
        this.instanceNumber = newValue;
        firePropertyChange(P_InstanceNumber, old, this.instanceNumber);
    }
    @OAProperty(displayName = "Trading System Id", displayLength = 10, columnLength = 14)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getTradingSystemId() {
        return tradingSystemId;
    }
    
    public void setTradingSystemId(int newValue) {
        fireBeforePropertyChange(P_TradingSystemId, this.tradingSystemId, newValue);
        int old = tradingSystemId;
        this.tradingSystemId = newValue;
        firePropertyChange(P_TradingSystemId, old, this.tradingSystemId);
    }
    @OAProperty(maxLength = 254, displayLength = 30, columnLength = 18)
    @OAColumn(maxLength = 254)
    public String getDirectory() {
        return directory;
    }
    
    public void setDirectory(String newValue) {
        fireBeforePropertyChange(P_Directory, this.directory, newValue);
        String old = directory;
        this.directory = newValue;
        firePropertyChange(P_Directory, old, this.directory);
    }
    @OAProperty(displayName = "Start Command", maxLength = 254, displayLength = 30, columnLength = 20)
    @OAColumn(maxLength = 254)
    public String getStartCommand() {
        return startCommand;
    }
    
    public void setStartCommand(String newValue) {
        fireBeforePropertyChange(P_StartCommand, this.startCommand, newValue);
        String old = startCommand;
        this.startCommand = newValue;
        firePropertyChange(P_StartCommand, old, this.startCommand);
    }
    @OAProperty(displayName = "Stop Command", maxLength = 254, displayLength = 30, columnLength = 20)
    @OAColumn(maxLength = 254)
    public String getStopCommand() {
        return stopCommand;
    }
    
    public void setStopCommand(String newValue) {
        fireBeforePropertyChange(P_StopCommand, this.stopCommand, newValue);
        String old = stopCommand;
        this.stopCommand = newValue;
        firePropertyChange(P_StopCommand, old, this.stopCommand);
    }
    @OAOne(
        displayName = "Admin Client", 
        reverseName = AdminClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private AdminClient getAdminClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Admin Server", 
        reverseName = AdminServer.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private AdminServer getAdminServer() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "Application Group", 
        reverseName = ApplicationGroup.P_Applications
    )
    @OAFkey(columns = {"ApplicationGroupId"})
    public ApplicationGroup getApplicationGroup() {
        if (applicationGroup == null) {
            applicationGroup = (ApplicationGroup) getObject(P_ApplicationGroup);
        }
        return applicationGroup;
    }
    
    public void setApplicationGroup(ApplicationGroup newValue) {
        fireBeforePropertyChange(P_ApplicationGroup, this.applicationGroup, newValue);
        ApplicationGroup old = this.applicationGroup;
        this.applicationGroup = newValue;
        firePropertyChange(P_ApplicationGroup, old, this.applicationGroup);
    }
    
    @OAOne(
        displayName = "Application Status", 
        reverseName = ApplicationStatus.P_Applications, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationStatusId"})
    public ApplicationStatus getApplicationStatus() {
        if (applicationStatus == null) {
            applicationStatus = (ApplicationStatus) getObject(P_ApplicationStatus);
        }
        return applicationStatus;
    }
    
    public void setApplicationStatus(ApplicationStatus newValue) {
        fireBeforePropertyChange(P_ApplicationStatus, this.applicationStatus, newValue);
        ApplicationStatus old = this.applicationStatus;
        this.applicationStatus = newValue;
        firePropertyChange(P_ApplicationStatus, old, this.applicationStatus);
    }
    
    @OAOne(
        displayName = "Application Type", 
        reverseName = ApplicationType.P_Applications, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationTypeId"})
    public ApplicationType getApplicationType() {
        if (applicationType == null) {
            applicationType = (ApplicationType) getObject(P_ApplicationType);
        }
        return applicationType;
    }
    
    public void setApplicationType(ApplicationType newValue) {
        fireBeforePropertyChange(P_ApplicationType, this.applicationType, newValue);
        ApplicationType old = this.applicationType;
        this.applicationType = newValue;
        firePropertyChange(P_ApplicationType, old, this.applicationType);
    }
    
    @OAMany(
        displayName = "Application Versions", 
        toClass = ApplicationVersion.class, 
        owner = true, 
        reverseName = ApplicationVersion.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (Application.P_ApplicationType+"."+ApplicationType.P_PackageTypes), 
        matchProperty = ApplicationVersion.P_PackageType
    )
    public Hub<ApplicationVersion> getApplicationVersions() {
        if (hubApplicationVersions == null) {
            hubApplicationVersions = (Hub<ApplicationVersion>) getHub(P_ApplicationVersions);
        }
        return hubApplicationVersions;
    }
    
    @OAOne(
        reverseName = GSMRClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private GSMRClient getGSMRClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = GSMRServer.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private GSMRServer getGSMRServer() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Install Versions", 
        toClass = InstallVersion.class, 
        owner = true, 
        reverseName = InstallVersion.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (Application.P_ApplicationType+"."+ApplicationType.P_PackageTypes), 
        matchProperty = InstallVersion.P_PackageType
    )
    public Hub<InstallVersion> getInstallVersions() {
        if (hubInstallVersions == null) {
            hubInstallVersions = (Hub<InstallVersion>) getHub(P_InstallVersions);
        }
        return hubInstallVersions;
    }
    
    @OAOne(
        reverseName = LLADClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private LLADClient getLLADClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = LLADServer.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private LLADServer getLLADServer() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "RCInstalled Version Details", 
        toClass = RCInstalledVersionDetail.class, 
        reverseName = RCInstalledVersionDetail.P_Application, 
        createMethod = false
    )
    private Hub<RCInstalledVersionDetail> getRCInstalledVersionDetails() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "RCServer List Details", 
        toClass = RCServerListDetail.class, 
        reverseName = RCServerListDetail.P_Applications, 
        createMethod = false
    )
    @OALinkTable(name = "RCServerListDetailApplication", indexName = "RCServerListDetailApplication", columns = {"ApplicationId"})
    private Hub<RCServerListDetail> getRCServerListDetails() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        toClass = Schedule.class, 
        reverseName = Schedule.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Schedule> getSchedules() {
        if (hubSchedules == null) {
            hubSchedules = (Hub<Schedule>) getHub(P_Schedules);
        }
        return hubSchedules;
    }
    
    @OAOne(
        reverseName = Server.P_Applications, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerId"})
    public Server getServer() {
        if (server == null) {
            server = (Server) getObject(P_Server);
        }
        return server;
    }
    
    public void setServer(Server newValue) {
        fireBeforePropertyChange(P_Server, this.server, newValue);
        Server old = this.server;
        this.server = newValue;
        firePropertyChange(P_Server, old, this.server);
    }
    
    @OAMany(
        displayName = "Server Files", 
        toClass = ServerFile.class, 
        owner = true, 
        reverseName = ServerFile.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<ServerFile> getServerFiles() {
        if (hubServerFiles == null) {
            hubServerFiles = (Hub<ServerFile>) getHub(P_ServerFiles);
        }
        return hubServerFiles;
    }
    
    // start - Start
    public void start() {
    }
     
    // stop - Stop
    public void stop() {
    }
     
    // kill - Kill
    public void kill() {
    }
     
    // suspend - Suspend
    public void suspend() {
    }
     
    // resume - Resume
    public void resume() {
    }
     
    // ping - Ping
    public boolean ping() {
        return true;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.instanceNumber = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_InstanceNumber, true);
        }
        this.tradingSystemId = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_TradingSystemId, true);
        }
        this.directory = rs.getString(4);
        this.startCommand = rs.getString(5);
        this.stopCommand = rs.getString(6);
        int applicationGroupFkey = rs.getInt(7);
        if (!rs.wasNull() && applicationGroupFkey > 0) {
            setProperty(P_ApplicationGroup, new OAObjectKey(applicationGroupFkey));
        }
        int applicationStatusFkey = rs.getInt(8);
        if (!rs.wasNull() && applicationStatusFkey > 0) {
            setProperty(P_ApplicationStatus, new OAObjectKey(applicationStatusFkey));
        }
        int applicationTypeFkey = rs.getInt(9);
        if (!rs.wasNull() && applicationTypeFkey > 0) {
            setProperty(P_ApplicationType, new OAObjectKey(applicationTypeFkey));
        }
        int serverFkey = rs.getInt(10);
        if (!rs.wasNull() && serverFkey > 0) {
            setProperty(P_Server, new OAObjectKey(serverFkey));
        }
        if (rs.getMetaData().getColumnCount() != 10) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

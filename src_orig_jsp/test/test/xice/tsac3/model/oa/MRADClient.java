// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;

import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "mradc",
    displayName = "MRADClient",
    displayProperty = "server"
)
@OATable(
    indexes = {
        @OAIndex(name = "MRADClientMradServer", columns = { @OAIndexColumn(name = "MradServerId") }), 
        @OAIndex(name = "MRADClientServerGroup", columns = { @OAIndexColumn(name = "ServerGroupId") })
    }
)
public class MRADClient extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Directory = "Directory";
    public static final String P_Directory = "Directory";
    public static final String PROPERTY_StartCommand = "StartCommand";
    public static final String P_StartCommand = "StartCommand";
    public static final String PROPERTY_StopCommand = "StopCommand";
    public static final String P_StopCommand = "StopCommand";
    public static final String PROPERTY_RequestPending = "RequestPending";
    public static final String P_RequestPending = "RequestPending";
     
    public static final String PROPERTY_IsOkToStart = "IsOkToStart";
    public static final String P_IsOkToStart = "IsOkToStart";
    public static final String PROPERTY_IsRemoteClientConnected = "IsRemoteClientConnected";
    public static final String P_IsRemoteClientConnected = "IsRemoteClientConnected";
     
    public static final String PROPERTY_MRADServer = "MRADServer";
    public static final String P_MRADServer = "MRADServer";
    public static final String PROPERTY_Schedules = "Schedules";
    public static final String P_Schedules = "Schedules";
    public static final String PROPERTY_Server = "Server";
    public static final String P_Server = "Server";
    public static final String PROPERTY_ServerGroup = "ServerGroup";
    public static final String P_ServerGroup = "ServerGroup";
     
    protected int id;
    protected String directory;
    protected String startCommand;
    protected String stopCommand;
    protected boolean requestPending;
     
    // Links to other objects.
    protected transient MRADServer mradServer;
    protected transient Hub<Schedule> hubSchedules;
    protected transient Server server;
    protected transient ServerGroup serverGroup;
     
    public MRADClient() {
    }
     
    public MRADClient(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(maxLength = 254, displayLength = 30, columnLength = 18)
    @OAColumn(maxLength = 254)
    public String getDirectory() {
        return directory;
    }
    
    public void setDirectory(String newValue) {
        fireBeforePropertyChange(P_Directory, this.directory, newValue);
        String old = directory;
        this.directory = newValue;
        firePropertyChange(P_Directory, old, this.directory);
    }
    @OAProperty(displayName = "Start Command", maxLength = 254, displayLength = 30, columnLength = 20)
    @OAColumn(maxLength = 254)
    public String getStartCommand() {
        return startCommand;
    }
    
    public void setStartCommand(String newValue) {
        fireBeforePropertyChange(P_StartCommand, this.startCommand, newValue);
        String old = startCommand;
        this.startCommand = newValue;
        firePropertyChange(P_StartCommand, old, this.startCommand);
    }
    @OAProperty(displayName = "Stop Command", maxLength = 254, displayLength = 30, columnLength = 20)
    @OAColumn(maxLength = 254)
    public String getStopCommand() {
        return stopCommand;
    }
    
    public void setStopCommand(String newValue) {
        fireBeforePropertyChange(P_StopCommand, this.stopCommand, newValue);
        String old = stopCommand;
        this.stopCommand = newValue;
        firePropertyChange(P_StopCommand, old, this.stopCommand);
    }
    @OAProperty(displayName = "Request Pending", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getRequestPending() {
        return requestPending;
    }
    
    public void setRequestPending(boolean newValue) {
        fireBeforePropertyChange(P_RequestPending, this.requestPending, newValue);
        boolean old = requestPending;
        this.requestPending = newValue;
        firePropertyChange(P_RequestPending, old, this.requestPending);
    }
    @OACalculatedProperty(displayName = "Is Ok To Start", description = "is ", displayLength = 5, properties = {P_Server+"."+Server.P_ServerStatus})
    public boolean getIsOkToStart() {
        Server server = getServer();
        if (server == null) return false;
        ServerStatus serverStatus = server.getServerStatus();
        if (serverStatus == null) return true;
        int x = serverStatus.getType();
        if (x != ServerStatus.TYPE_REQUESTCONNECT) {
            if (x != ServerStatus.TYPE_CONNECTED) {
                if (x != ServerStatus.TYPE_CONNECTING) {
                    return true;
                }            
            }            
        }
        return false;
    }
     
    @OACalculatedProperty(displayName = "Is Remote Client Connected", displayLength = 5)
    public boolean getIsRemoteClientConnected() {
        return true;
    }
     
    @OAOne(
        reverseName = MRADServer.P_MRADClients, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MradServerId"})
    public MRADServer getMRADServer() {
        if (mradServer == null) {
            mradServer = (MRADServer) getObject(P_MRADServer);
        }
        return mradServer;
    }
    
    public void setMRADServer(MRADServer newValue) {
        fireBeforePropertyChange(P_MRADServer, this.mradServer, newValue);
        MRADServer old = this.mradServer;
        this.mradServer = newValue;
        firePropertyChange(P_MRADServer, old, this.mradServer);
    }
    
    @OAMany(
        toClass = Schedule.class, 
        reverseName = Schedule.P_MRADClient, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<Schedule> getSchedules() {
        if (hubSchedules == null) {
            hubSchedules = (Hub<Schedule>) getHub(P_Schedules);
        }
        return hubSchedules;
    }
    
    @OAOne(
        reverseName = Server.P_MRADClient, 
        required = true
    )
    @OAFkey(columns = {"ServerId"})
    public Server getServer() {
        if (server == null) {
            server = (Server) getObject(P_Server);
        }
        return server;
    }
    
    public void setServer(Server newValue) {
        fireBeforePropertyChange(P_Server, this.server, newValue);
        Server old = this.server;
        this.server = newValue;
        firePropertyChange(P_Server, old, this.server);
    }
    
    @OAOne(
        displayName = "Server Group", 
        reverseName = ServerGroup.P_MRADClients, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerGroupId"})
    public ServerGroup getServerGroup() {
        if (serverGroup == null) {
            serverGroup = (ServerGroup) getObject(P_ServerGroup);
        }
        return serverGroup;
    }
    
    public void setServerGroup(ServerGroup newValue) {
        fireBeforePropertyChange(P_ServerGroup, this.serverGroup, newValue);
        ServerGroup old = this.serverGroup;
        this.serverGroup = newValue;
        firePropertyChange(P_ServerGroup, old, this.serverGroup);
    }
    
    // start - Start
    public void start() {
    }
     
    // stop - Stop
    public void stop() {
    }
     
    // kill - Kill
    public void kill() {
    }
     
    // suspend - Suspend
    public void suspend() {
    }
     
    // resume - Resume
    public void resume() {
    }
     
    // ping - Ping
    public boolean ping() {
        return true;
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.directory = rs.getString(2);
        this.startCommand = rs.getString(3);
        this.stopCommand = rs.getString(4);
        this.requestPending = rs.getBoolean(5);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, MRADClient.P_RequestPending, true);
        }
        int mradServerFkey = rs.getInt(6);
        if (!rs.wasNull() && mradServerFkey > 0) {
            setProperty(P_MRADServer, new OAObjectKey(mradServerFkey));
        }
        int serverFkey = rs.getInt(7);
        if (!rs.wasNull() && serverFkey > 0) {
            setProperty(P_Server, new OAObjectKey(serverFkey));
        }
        int serverGroupFkey = rs.getInt(8);
        if (!rs.wasNull() && serverGroupFkey > 0) {
            setProperty(P_ServerGroup, new OAObjectKey(serverGroupFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

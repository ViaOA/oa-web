// Generated by OABuilder
package test.xice.tsac3.model.oa;
 
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.annotation.*;
import com.viaoa.util.OADate;

import test.xice.tsac3.model.oa.filter.*;
import test.xice.tsac3.model.oa.propertypath.*;
 
@OAClass(
    shortName = "rcivd",
    displayName = "RCInstalled Version Detail",
    displayProperty = "hostName"
)
@OATable(
    indexes = {
        @OAIndex(name = "RCInstalledVersionDetailRcInstalledVersion", columns = { @OAIndexColumn(name = "RcInstalledVersionId") })
    }
)
public class RCInstalledVersionDetail extends OAObject {
    private static final long serialVersionUID = 1L;
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Selected = "Selected";
    public static final String P_Selected = "Selected";
    public static final String PROPERTY_HostName = "HostName";
    public static final String P_HostName = "HostName";
    public static final String PROPERTY_PackageName = "PackageName";
    public static final String P_PackageName = "PackageName";
    public static final String PROPERTY_InstalledDate = "InstalledDate";
    public static final String P_InstalledDate = "InstalledDate";
    public static final String PROPERTY_Version = "Version";
    public static final String P_Version = "Version";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_InvalidMessage = "InvalidMessage";
    public static final String P_InvalidMessage = "InvalidMessage";
    public static final String PROPERTY_Loaded = "Loaded";
    public static final String P_Loaded = "Loaded";
     
     
    public static final String PROPERTY_RCInstalledVersion = "RCInstalledVersion";
    public static final String P_RCInstalledVersion = "RCInstalledVersion";
    public static final String PROPERTY_Server = "Server";
    public static final String P_Server = "Server";
    public static final String PROPERTY_ServerTypeVersion = "ServerTypeVersion";
    public static final String P_ServerTypeVersion = "ServerTypeVersion";
     
    protected int id;
    protected boolean selected;
    protected String hostName;
    protected String packageName;
    protected OADate installedDate;
    protected String version;
    protected String error;
    protected String invalidMessage;
    protected boolean loaded;
     
    // Links to other objects.
    protected transient RCInstalledVersion rcInstalledVersion;
    protected transient Server server;
    protected transient ServerTypeVersion serverTypeVersion;
     
    public RCInstalledVersionDetail() {
    }
     
    public RCInstalledVersionDetail(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSelected() {
        return selected;
    }
    
    public void setSelected(boolean newValue) {
        fireBeforePropertyChange(P_Selected, this.selected, newValue);
        boolean old = selected;
        this.selected = newValue;
        firePropertyChange(P_Selected, old, this.selected);
    }
    @OAProperty(displayName = "Host Name", maxLength = 50, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 50)
    public String getHostName() {
        return hostName;
    }
    
    public void setHostName(String newValue) {
        fireBeforePropertyChange(P_HostName, this.hostName, newValue);
        String old = hostName;
        this.hostName = newValue;
        firePropertyChange(P_HostName, old, this.hostName);
    }
    @OAProperty(displayName = "Package Name", maxLength = 50, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 50)
    public String getPackageName() {
        return packageName;
    }
    
    public void setPackageName(String newValue) {
        fireBeforePropertyChange(P_PackageName, this.packageName, newValue);
        String old = packageName;
        this.packageName = newValue;
        firePropertyChange(P_PackageName, old, this.packageName);
    }
    @OAProperty(displayName = "Installed Date", displayLength = 8, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.DATE)
    public OADate getInstalledDate() {
        return installedDate;
    }
    
    public void setInstalledDate(OADate newValue) {
        fireBeforePropertyChange(P_InstalledDate, this.installedDate, newValue);
        OADate old = installedDate;
        this.installedDate = newValue;
        firePropertyChange(P_InstalledDate, old, this.installedDate);
    }
    @OAProperty(maxLength = 35, displayLength = 35, isProcessed = true)
    @OAColumn(maxLength = 35)
    public String getVersion() {
        return version;
    }
    
    public void setVersion(String newValue) {
        fireBeforePropertyChange(P_Version, this.version, newValue);
        String old = version;
        this.version = newValue;
        firePropertyChange(P_Version, old, this.version);
    }
    @OAProperty(maxLength = 250, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 250)
    public String getError() {
        return error;
    }
    
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    @OAProperty(displayName = "Invalid Message", maxLength = 120, displayLength = 40, isProcessed = true)
    @OAColumn(maxLength = 120)
    public String getInvalidMessage() {
        return invalidMessage;
    }
    
    public void setInvalidMessage(String newValue) {
        fireBeforePropertyChange(P_InvalidMessage, this.invalidMessage, newValue);
        String old = invalidMessage;
        this.invalidMessage = newValue;
        firePropertyChange(P_InvalidMessage, old, this.invalidMessage);
    }
    @OAProperty(displayLength = 5, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getLoaded() {
        return loaded;
    }
    
    public void setLoaded(boolean newValue) {
        fireBeforePropertyChange(P_Loaded, this.loaded, newValue);
        boolean old = loaded;
        this.loaded = newValue;
        firePropertyChange(P_Loaded, old, this.loaded);
    }
    @OAOne(
        displayName = "RCInstalled Version", 
        reverseName = RCInstalledVersion.P_RCInstalledVersionDetails, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"RcInstalledVersionId"})
    public RCInstalledVersion getRCInstalledVersion() {
        if (rcInstalledVersion == null) {
            rcInstalledVersion = (RCInstalledVersion) getObject(P_RCInstalledVersion);
        }
        return rcInstalledVersion;
    }
    
    public void setRCInstalledVersion(RCInstalledVersion newValue) {
        fireBeforePropertyChange(P_RCInstalledVersion, this.rcInstalledVersion, newValue);
        RCInstalledVersion old = this.rcInstalledVersion;
        this.rcInstalledVersion = newValue;
        firePropertyChange(P_RCInstalledVersion, old, this.rcInstalledVersion);
    }
    
    @OAOne(
        reverseName = Server.P_RCInstalledVersionDetails
    )
    @OAFkey(columns = {"ServerId"})
    public Server getServer() {
        if (server == null) {
            server = (Server) getObject(P_Server);
        }
        return server;
    }
    
    public void setServer(Server newValue) {
        fireBeforePropertyChange(P_Server, this.server, newValue);
        Server old = this.server;
        this.server = newValue;
        firePropertyChange(P_Server, old, this.server);
    }
    
    @OAOne(
        displayName = "Server Type Version", 
        reverseName = ServerTypeVersion.P_RCInstalledVersionDetails
    )
    @OAFkey(columns = {"ServerTypeVersionId"})
    public ServerTypeVersion getServerTypeVersion() {
        if (serverTypeVersion == null) {
            serverTypeVersion = (ServerTypeVersion) getObject(P_ServerTypeVersion);
        }
        return serverTypeVersion;
    }
    
    public void setServerTypeVersion(ServerTypeVersion newValue) {
        fireBeforePropertyChange(P_ServerTypeVersion, this.serverTypeVersion, newValue);
        ServerTypeVersion old = this.serverTypeVersion;
        this.serverTypeVersion = newValue;
        firePropertyChange(P_ServerTypeVersion, old, this.serverTypeVersion);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.selected = rs.getBoolean(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCInstalledVersionDetail.P_Selected, true);
        }
        this.hostName = rs.getString(3);
        this.packageName = rs.getString(4);
        java.sql.Date date;
        date = rs.getDate(5);
        if (date != null) this.installedDate = new OADate(date);
        this.version = rs.getString(6);
        this.error = rs.getString(7);
        this.invalidMessage = rs.getString(8);
        this.loaded = rs.getBoolean(9);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, RCInstalledVersionDetail.P_Loaded, true);
        }
        int rcInstalledVersionFkey = rs.getInt(10);
        if (!rs.wasNull() && rcInstalledVersionFkey > 0) {
            setProperty(P_RCInstalledVersion, new OAObjectKey(rcInstalledVersionFkey));
        }
        int serverFkey = rs.getInt(11);
        if (!rs.wasNull() && serverFkey > 0) {
            setProperty(P_Server, new OAObjectKey(serverFkey));
        }
        int serverTypeVersionFkey = rs.getInt(12);
        if (!rs.wasNull() && serverTypeVersionFkey > 0) {
            setProperty(P_ServerTypeVersion, new OAObjectKey(serverTypeVersionFkey));
        }
        if (rs.getMetaData().getColumnCount() != 12) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

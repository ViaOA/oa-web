// Generated by OABuilder
package test.xice.tsac3.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsac3.model.oa.*;
 
public class MRADClientPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private MRADServerPPx mradServer;
    private SchedulePPx schedules;
    private ServerPPx server;
    private ServerGroupPPx serverGroup;
     
    public MRADClientPPx(String name) {
        this(null, name);
    }

    public MRADClientPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public MRADServerPPx mradServer() {
        if (mradServer == null) mradServer = new MRADServerPPx(this, MRADClient.P_MRADServer);
        return mradServer;
    }

    public SchedulePPx schedules() {
        if (schedules == null) schedules = new SchedulePPx(this, MRADClient.P_Schedules);
        return schedules;
    }

    public ServerPPx server() {
        if (server == null) server = new ServerPPx(this, MRADClient.P_Server);
        return server;
    }

    public ServerGroupPPx serverGroup() {
        if (serverGroup == null) serverGroup = new ServerGroupPPx(this, MRADClient.P_ServerGroup);
        return serverGroup;
    }

    public String id() {
        return pp + "." + MRADClient.P_Id;
    }

    public String directory() {
        return pp + "." + MRADClient.P_Directory;
    }

    public String startCommand() {
        return pp + "." + MRADClient.P_StartCommand;
    }

    public String stopCommand() {
        return pp + "." + MRADClient.P_StopCommand;
    }

    public String requestPending() {
        return pp + "." + MRADClient.P_RequestPending;
    }

    public String isOkToStart() {
        return pp + "." + MRADClient.P_IsOkToStart;
    }

    public String isRemoteClientConnected() {
        return pp + "." + MRADClient.P_IsRemoteClientConnected;
    }

    public String start() {
        return pp + ".start";
    }

    public String stop() {
        return pp + ".stop";
    }

    public String kill() {
        return pp + ".kill";
    }

    public String suspend() {
        return pp + ".suspend";
    }

    public String resume() {
        return pp + ".resume";
    }

    public String ping() {
        return pp + ".ping";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

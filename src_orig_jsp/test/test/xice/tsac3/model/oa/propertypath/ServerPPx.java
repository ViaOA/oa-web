// Generated by OABuilder
package test.xice.tsac3.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsac3.model.oa.*;
 
public class ServerPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private GSMRClientPPx gsmrClients;
    private GSMRServerPPx gsmrServer;
    private LLADClientPPx lladClient;
    private LLADServerPPx lladServer;
    private MRADClientPPx mradClient;
    private MRADServerPPx mradServer;
    private RCInstalledVersionDetailPPx rcInstalledVersionDetails;
    private ServerFilePPx serverFiles;
    private ServerInstallPPx serverInstalls;
    private ServerStatusPPx serverStatus;
    private ServerTypePPx serverType;
    private ServerTypeVersionPPx serverTypeVersion;
    private SiloPPx silo;
    private WarningPPx warnings;
     
    public ServerPPx(String name) {
        this(null, name);
    }

    public ServerPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public GSMRClientPPx gsmrClients() {
        if (gsmrClients == null) gsmrClients = new GSMRClientPPx(this, Server.P_GSMRClients);
        return gsmrClients;
    }

    public GSMRServerPPx gsmrServer() {
        if (gsmrServer == null) gsmrServer = new GSMRServerPPx(this, Server.P_GSMRServer);
        return gsmrServer;
    }

    public LLADClientPPx lladClient() {
        if (lladClient == null) lladClient = new LLADClientPPx(this, Server.P_LLADClient);
        return lladClient;
    }

    public LLADServerPPx lladServer() {
        if (lladServer == null) lladServer = new LLADServerPPx(this, Server.P_LLADServer);
        return lladServer;
    }

    public MRADClientPPx mradClient() {
        if (mradClient == null) mradClient = new MRADClientPPx(this, Server.P_MRADClient);
        return mradClient;
    }

    public MRADServerPPx mradServer() {
        if (mradServer == null) mradServer = new MRADServerPPx(this, Server.P_MRADServer);
        return mradServer;
    }

    public RCInstalledVersionDetailPPx rcInstalledVersionDetails() {
        if (rcInstalledVersionDetails == null) rcInstalledVersionDetails = new RCInstalledVersionDetailPPx(this, Server.P_RCInstalledVersionDetails);
        return rcInstalledVersionDetails;
    }

    public ServerFilePPx serverFiles() {
        if (serverFiles == null) serverFiles = new ServerFilePPx(this, Server.P_ServerFiles);
        return serverFiles;
    }

    public ServerInstallPPx serverInstalls() {
        if (serverInstalls == null) serverInstalls = new ServerInstallPPx(this, Server.P_ServerInstalls);
        return serverInstalls;
    }

    public ServerStatusPPx serverStatus() {
        if (serverStatus == null) serverStatus = new ServerStatusPPx(this, Server.P_ServerStatus);
        return serverStatus;
    }

    public ServerTypePPx serverType() {
        if (serverType == null) serverType = new ServerTypePPx(this, Server.P_ServerType);
        return serverType;
    }

    public ServerTypeVersionPPx serverTypeVersion() {
        if (serverTypeVersion == null) serverTypeVersion = new ServerTypeVersionPPx(this, Server.P_ServerTypeVersion);
        return serverTypeVersion;
    }

    public SiloPPx silo() {
        if (silo == null) silo = new SiloPPx(this, Server.P_Silo);
        return silo;
    }

    public WarningPPx warnings() {
        if (warnings == null) warnings = new WarningPPx(this, Server.P_Warnings);
        return warnings;
    }

    public String id() {
        return pp + "." + Server.P_Id;
    }

    public String created() {
        return pp + "." + Server.P_Created;
    }

    public String lastStart() {
        return pp + "." + Server.P_LastStart;
    }

    public String name() {
        return pp + "." + Server.P_Name;
    }

    public String hostName() {
        return pp + "." + Server.P_HostName;
    }

    public String ipAddress() {
        return pp + "." + Server.P_IpAddress;
    }

    public String dnsName() {
        return pp + "." + Server.P_DnsName;
    }

    public String shortDnsName() {
        return pp + "." + Server.P_ShortDnsName;
    }

    public String serverId() {
        return pp + "." + Server.P_ServerId;
    }

    public String started() {
        return pp + "." + Server.P_Started;
    }

    public String serverFromId() {
        return pp + "." + Server.P_ServerFromId;
    }

    public String verifiedVersion() {
        return pp + "." + Server.P_VerifiedVersion;
    }

    public String installed() {
        return pp + "." + Server.P_Installed;
    }

    public String displayName() {
        return pp + "." + Server.P_DisplayName;
    }

    public String newVersionSelectedFilter() {
        return pp + ":newVersionSelected()";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

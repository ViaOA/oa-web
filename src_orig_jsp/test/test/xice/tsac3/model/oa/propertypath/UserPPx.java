// Generated by OABuilder
package test.xice.tsac3.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsac3.model.oa.*;
 
public class UserPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
    private EnvironmentPPx calcEnvironment;
    private EnvironmentPPx calcEnvironment1;
    private LLADServerPPx calcLLADServer;
    private CompanyPPx company;
    private LLADServerPPx lladServers;
    private MarketTypePPx marketTypes;
    private UserLoginHistoryPPx userLoginHistories;
    private UserLoginPPx userLogins;
     
    public UserPPx(String name) {
        this(null, name);
    }

    public UserPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null) {
            if (s.length() > 0) s += ".";
            s += name;
        }
        pp = s;
    }

    public EnvironmentPPx calcEnvironment() {
        if (calcEnvironment == null) calcEnvironment = new EnvironmentPPx(this, User.P_CalcEnvironment);
        return calcEnvironment;
    }

    public EnvironmentPPx calcEnvironment1() {
        if (calcEnvironment1 == null) calcEnvironment1 = new EnvironmentPPx(this, User.P_CalcEnvironment1);
        return calcEnvironment1;
    }

    public LLADServerPPx calcLLADServer() {
        if (calcLLADServer == null) calcLLADServer = new LLADServerPPx(this, User.P_CalcLLADServer);
        return calcLLADServer;
    }

    public CompanyPPx company() {
        if (company == null) company = new CompanyPPx(this, User.P_Company);
        return company;
    }

    public LLADServerPPx lladServers() {
        if (lladServers == null) lladServers = new LLADServerPPx(this, User.P_LLADServers);
        return lladServers;
    }

    public MarketTypePPx marketTypes() {
        if (marketTypes == null) marketTypes = new MarketTypePPx(this, User.P_MarketTypes);
        return marketTypes;
    }

    public UserLoginHistoryPPx userLoginHistories() {
        if (userLoginHistories == null) userLoginHistories = new UserLoginHistoryPPx(this, User.P_UserLoginHistories);
        return userLoginHistories;
    }

    public UserLoginPPx userLogins() {
        if (userLogins == null) userLogins = new UserLoginPPx(this, User.P_UserLogins);
        return userLogins;
    }

    public String id() {
        return pp + "." + User.P_Id;
    }

    public String userId() {
        return pp + "." + User.P_UserId;
    }

    public String firstName() {
        return pp + "." + User.P_FirstName;
    }

    public String lastName() {
        return pp + "." + User.P_LastName;
    }

    public String email() {
        return pp + "." + User.P_Email;
    }

    public String phone() {
        return pp + "." + User.P_Phone;
    }

    public String screenAccessType() {
        return pp + "." + User.P_ScreenAccessType;
    }

    public String isGatewayUser() {
        return pp + "." + User.P_IsGatewayUser;
    }

    public String traderMnemonic() {
        return pp + "." + User.P_TraderMnemonic;
    }

    public String endexTradingAccount() {
        return pp + "." + User.P_EndexTradingAccount;
    }

    public String endexShipperCode() {
        return pp + "." + User.P_EndexShipperCode;
    }

    public String userFunctionType() {
        return pp + "." + User.P_UserFunctionType;
    }

    public String isLoggedIn() {
        return pp + "." + User.P_IsLoggedIn;
    }

    public String fullName() {
        return pp + "." + User.P_FullName;
    }

    public String fullNameAndUserId() {
        return pp + "." + User.P_FullNameAndUserId;
    }

    public String totalUsers() {
        return pp + "." + User.P_TotalUsers;
    }

    public String enableLLADCommands() {
        return pp + "." + User.P_EnableLLADCommands;
    }

    public String enableLLADCommandsAndLoggedIn() {
        return pp + "." + User.P_EnableLLADCommandsAndLoggedIn;
    }

    public String fastCompanyName() {
        return pp + "." + User.P_FastCompanyName;
    }

    public String sendText() {
        return pp + ".sendText";
    }

    public String forceLogout() {
        return pp + ".forceLogout";
    }

    public String resetPassword() {
        return pp + ".resetPassword";
    }

    public String requestUserLoginHistory() {
        return pp + ".requestUserLoginHistory";
    }

    public String refreshUserCache() {
        return pp + ".refreshUserCache";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

// Generated by OABuilder

package test.xice.tsam.datasource;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.logging.Logger;

import com.viaoa.annotation.OATable;
import com.viaoa.datasource.jdbc.OADataSourceJDBC;
import com.viaoa.datasource.jdbc.db.Column;
import com.viaoa.datasource.jdbc.db.DBMetaData;
import com.viaoa.datasource.jdbc.db.DataAccessObject;
import com.viaoa.datasource.jdbc.db.Database;
import com.viaoa.datasource.jdbc.db.Index;
import com.viaoa.datasource.jdbc.db.Link;
import com.viaoa.datasource.jdbc.db.Table;
import com.viaoa.object.OAAnnotationDelegate;
import com.viaoa.object.OAObject;
import com.viaoa.object.OAObjectCacheDelegate;
import com.viaoa.util.Base64;
import com.viaoa.util.OAArray;
import com.viaoa.util.OAReflect;
import com.viaoa.util.OAString;

import test.xice.tsam.model.oa.AdminUser;
import test.xice.tsam.model.oa.AdminUserCategory;
import test.xice.tsam.model.oa.Application;
import test.xice.tsam.model.oa.ApplicationGroup;
import test.xice.tsam.model.oa.ApplicationStatus;
import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.ApplicationTypeCommand;
import test.xice.tsam.model.oa.ApplicationVersion;
import test.xice.tsam.model.oa.Command;
import test.xice.tsam.model.oa.Developer;
import test.xice.tsam.model.oa.Environment;
import test.xice.tsam.model.oa.EnvironmentType;
import test.xice.tsam.model.oa.HostInfo;
import test.xice.tsam.model.oa.IDL;
import test.xice.tsam.model.oa.MRADClient;
import test.xice.tsam.model.oa.MRADClientCommand;
import test.xice.tsam.model.oa.MRADClientMessage;
import test.xice.tsam.model.oa.MRADServer;
import test.xice.tsam.model.oa.MRADServerCommand;
import test.xice.tsam.model.oa.OSVersion;
import test.xice.tsam.model.oa.OperatingSystem;
import test.xice.tsam.model.oa.PackageType;
import test.xice.tsam.model.oa.PackageVersion;
import test.xice.tsam.model.oa.SSHExecute;
import test.xice.tsam.model.oa.Server;
import test.xice.tsam.model.oa.Silo;
import test.xice.tsam.model.oa.SiloConfig;
import test.xice.tsam.model.oa.SiloConfigVersioin;
import test.xice.tsam.model.oa.SiloType;
import test.xice.tsam.model.oa.Site;
import test.xice.tsam.model.oa.Timezone;
import test.xice.tsam.resource.Resource;

public class DataSource {
	private static Logger LOG = Logger.getLogger(DataSource.class.getName());
	protected OADataSourceJDBC jdbcDataSource;
	protected Database database;

	public DataSource() {
	}

	public void open() throws Exception {
		String driver = Resource.getValue(Resource.DB_JDBC_Driver);
		String jdbcUrl = Resource.getValue(Resource.DB_JDBC_URL);
		String user = Resource.getValue(Resource.DB_User);
		String pw = Resource.getValue(Resource.DB_Password);
		String pwBase64 = Resource.getValue(Resource.DB_Password_Base64);
		int dbmdType = Resource.getInt(Resource.DB_DBMD_Type);
		int minConnections = Resource.getInt(Resource.DB_MinConnections);
		int maxConnections = Resource.getInt(Resource.DB_MaxConnections);

		if (OAString.isEmpty(pw)) {
			String s = Base64.decode(pwBase64);
			if (!OAString.isEmpty(s)) {
				pw = s;
			}
		}
		open(driver, jdbcUrl, dbmdType, user, pw, minConnections, maxConnections);
	}

	protected void open(String driver, String jdbcUrl, int dbmdType, String user, String password, int min, int max) throws Exception {
		if (jdbcDataSource != null) {
			return;
		}
		String s = String.format("JDBC: driver=%s, url=%s, dbmdType=%d, user=%s", driver, jdbcUrl, dbmdType, user);
		LOG.fine(s);
		Database db = getDatabase();

		createDAO(db);
		DBMetaData dbmd = new DBMetaData(dbmdType, user, password, driver, jdbcUrl);
		dbmd.setMinConnections(min);
		dbmd.setMaxConnections(max);
		jdbcDataSource = new OADataSourceJDBC(db, dbmd);
	}

	public void close() {
		getOADataSource().close();
	}

	public OADataSourceJDBC getOADataSource() {
		return jdbcDataSource;
	}

	public Database getDatabase() {
		if (database != null) {
			return database;
		}
		try {
			database = createDatabaseFromClasses();
		} catch (Exception e) {
			throw new RuntimeException("error creating database", e);
		}
		return database;
	}

	private Database createDatabaseFromClasses() throws Exception {
		Database database = new Database();

		Table table = new Table("NextNumber", com.viaoa.datasource.autonumber.NextNumber.class); // ** Used by all OADataSource Database
		// NextNumber COLUMNS
		Column[] columns = new Column[2];
		columns[0] = new Column("nextNumberId", "nextNumberId", Types.VARCHAR, 75);
		columns[0].primaryKey = true;
		columns[1] = new Column("nextNumber", "nextNumber", Types.INTEGER);
		table.setColumns(columns);
		database.addTable(table);
		String packageName = AdminUser.class.getPackage().getName();
		String[] fnames = OAReflect.getClasses(packageName);

		Class[] classes = null;
		for (String fn : fnames) {
			Class c = Class.forName(packageName + "." + fn);
			if (c.getAnnotation(OATable.class) == null) {
				continue;
			}
			classes = (Class[]) OAArray.add(Class.class, classes, c);
		}
		OAAnnotationDelegate.update(database, classes);
		return database;
	}

	private Database createDatabase() {
		int NextNumber = 0;
		// TABLES
		int ADMINUSER = 1;
		int ADMINUSERCATEGORY = 2;
		int APPLICATION = 3;
		int APPLICATIONGROUP = 4;
		int APPLICATIONSTATUS = 5;
		int APPLICATIONTYPE = 6;
		int APPLICATIONTYPECOMMAND = 7;
		int APPLICATIONVERSION = 8;
		int COMMAND = 9;
		int DEVELOPER = 10;
		int ENVIRONMENT = 11;
		int ENVIRONMENTTYPE = 12;
		int HOSTINFO = 13;
		int IDL = 14;
		int MRADCLIENT = 15;
		int MRADCLIENTCOMMAND = 16;
		int MRADCLIENTMESSAGE = 17;
		int MRADSERVER = 18;
		int MRADSERVERCOMMAND = 19;
		int OPERATINGSYSTEM = 20;
		int OSVERSION = 21;
		int PACKAGETYPE = 22;
		int PACKAGEVERSION = 23;
		int SERVER = 24;
		int SILO = 25;
		int SILOCONFIG = 26;
		int SILOCONFIGVERSIOIN = 27;
		int SILOTYPE = 28;
		int SITE = 29;
		int SSHEXECUTE = 30;
		int TIMEZONE = 31;

		// LINK TABLES
		int SILOTYPEAPPLICATIONTYPE = 32;
		int APPLICATIONTYPEPACKAGETYPE = 33;
		int APPLICATIONGROUPINCLUDEAPPLICATION = 34;
		int APPLICATIONGROUPINCLUDEAPPLICATIONTYPE = 35;
		int DEVELOPERAPPLICATIONTYPE = 36;
		int APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE = 37;
		int APPLICATIONGROUPEXCLUDEAPPLICATION = 38;
		int MAX = 39;

		Database db = new Database();
		Table[] tables = new Table[MAX];
		Column[] columns;
		Link[] links;
		Column[] fkeys;

		// TABLES
		tables[NextNumber] = new Table("NextNumber", com.viaoa.datasource.autonumber.NextNumber.class); // ** Used by all OADataSource Database
		tables[ADMINUSER] = new Table("AdminUser", AdminUser.class);
		tables[ADMINUSERCATEGORY] = new Table("AdminUserCategory", AdminUserCategory.class);
		tables[APPLICATION] = new Table("Application", Application.class);
		tables[APPLICATIONGROUP] = new Table("ApplicationGroup", ApplicationGroup.class);
		tables[APPLICATIONSTATUS] = new Table("ApplicationStatus", ApplicationStatus.class);
		tables[APPLICATIONTYPE] = new Table("ApplicationType", ApplicationType.class);
		tables[APPLICATIONTYPECOMMAND] = new Table("ApplicationTypeCommand", ApplicationTypeCommand.class);
		tables[APPLICATIONVERSION] = new Table("ApplicationVersion", ApplicationVersion.class);
		tables[COMMAND] = new Table("Command", Command.class);
		tables[DEVELOPER] = new Table("Developer", Developer.class);
		tables[ENVIRONMENT] = new Table("Environment", Environment.class);
		tables[ENVIRONMENTTYPE] = new Table("EnvironmentType", EnvironmentType.class);
		tables[HOSTINFO] = new Table("HostInfo", HostInfo.class);
		tables[IDL] = new Table("Idl", IDL.class);
		tables[MRADCLIENT] = new Table("MRADClient", MRADClient.class);
		tables[MRADCLIENTCOMMAND] = new Table("MRADClientCommand", MRADClientCommand.class);
		tables[MRADCLIENTMESSAGE] = new Table("MRADClientMessage", MRADClientMessage.class);
		tables[MRADSERVER] = new Table("MRADServer", MRADServer.class);
		tables[MRADSERVERCOMMAND] = new Table("MRADServerCommand", MRADServerCommand.class);
		tables[OPERATINGSYSTEM] = new Table("OperatingSystem", OperatingSystem.class);
		tables[OSVERSION] = new Table("OSVersion", OSVersion.class);
		tables[PACKAGETYPE] = new Table("PackageType", PackageType.class);
		tables[PACKAGEVERSION] = new Table("PackageVersion", PackageVersion.class);
		tables[SERVER] = new Table("Server", Server.class);
		tables[SILO] = new Table("Silo", Silo.class);
		tables[SILOCONFIG] = new Table("SiloConfig", SiloConfig.class);
		tables[SILOCONFIGVERSIOIN] = new Table("SiloConfigVersioin", SiloConfigVersioin.class);
		tables[SILOTYPE] = new Table("SiloType", SiloType.class);
		tables[SITE] = new Table("Site", Site.class);
		tables[SSHEXECUTE] = new Table("SSHExecute", SSHExecute.class);
		tables[TIMEZONE] = new Table("TimeZone", Timezone.class);

		// LINK TABLES
		tables[SILOTYPEAPPLICATIONTYPE] = new Table("SiloTypeApplicationType", true);
		tables[APPLICATIONTYPEPACKAGETYPE] = new Table("ApplicationTypePackageType", true);
		tables[APPLICATIONGROUPINCLUDEAPPLICATION] = new Table("ApplicationGroupIncludeApplication", true);
		tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE] = new Table("ApplicationGroupIncludeApplicationType", true);
		tables[DEVELOPERAPPLICATIONTYPE] = new Table("DeveloperApplicationType", true);
		tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE] = new Table("ApplicationGroupExcludeApplicationType", true);
		tables[APPLICATIONGROUPEXCLUDEAPPLICATION] = new Table("ApplicationGroupExcludeApplication", true);

		// TABLE COLUMNS
		// NextNumber COLUMNS
		columns = new Column[2];
		columns[0] = new Column("nextNumberId", "nextNumberId", Types.VARCHAR, 75);
		columns[0].primaryKey = true;
		columns[1] = new Column("nextNumber", "nextNumber", Types.INTEGER);
		tables[NextNumber].setColumns(columns);

		// AdminUser COLUMNS
		columns = new Column[17];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("LoginId", "loginId", Types.VARCHAR, 25);
		columns[3] = new Column("Password", "password", Types.VARCHAR, 75);
		columns[4] = new Column("FirstName", "firstName", Types.VARCHAR, 25);
		columns[5] = new Column("LastName", "lastName", Types.VARCHAR, 35);
		columns[6] = new Column("Title", "title", Types.VARCHAR, 35);
		columns[7] = new Column("PrefixName", "prefixName", Types.VARCHAR, 20);
		columns[8] = new Column("InactiveDate", "inactiveDate", Types.DATE);
		columns[9] = new Column("InactiveReason", "inactiveReason", Types.VARCHAR, 125);
		columns[10] = new Column("LoggedIn", "loggedIn", Types.BOOLEAN);
		columns[11] = new Column("Admin", "admin", Types.BOOLEAN);
		columns[12] = new Column("EditProcessed", "editProcessed", Types.BOOLEAN);
		columns[13] = new Column("CanUseLLADCommands", "enableLLADCommands", Types.BOOLEAN);
		columns[14] = new Column("EnableGSMR", "enableGSMR", Types.BOOLEAN);
		columns[15] = new Column("EnableMRAD", "enableMRAD", Types.BOOLEAN);
		columns[16] = new Column("MiscPassword", "miscPassword", Types.VARCHAR, 75);
		tables[ADMINUSER].setColumns(columns);

		// AdminUserCategory COLUMNS
		columns = new Column[3];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Name", "name", Types.VARCHAR, 25);
		columns[2] = new Column("ParentAdminUserCategoryId", true);
		tables[ADMINUSERCATEGORY].setColumns(columns);
		tables[ADMINUSERCATEGORY].addIndex(new Index("AdminUserCategoryParentAdminUserCategory", "ParentAdminUserCategoryId"));

		// Application COLUMNS
		columns = new Column[9];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("InstanceNumber", "instanceNumber", Types.INTEGER);
		columns[2] = new Column("TradingSystemId", "tradingSystemId", Types.INTEGER);
		columns[3] = new Column("Name", "name", Types.VARCHAR, 55);
		columns[4] = new Column("UserId", "userId", Types.VARCHAR, 25);
		columns[5] = new Column("ShowInMRAD", "showInMRAD", Types.BOOLEAN);
		columns[6] = new Column("ApplicationStatusId", true);
		columns[7] = new Column("ApplicationTypeId", true);
		columns[8] = new Column("ServerId", true);
		tables[APPLICATION].setColumns(columns);
		tables[APPLICATION].addIndex(new Index("ApplicationServer", "ServerId"));

		// ApplicationGroup COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Code", "code", Types.VARCHAR, 15);
		columns[2] = new Column("Name", "name", Types.VARCHAR, 55);
		columns[3] = new Column("Seq", "seq", Types.INTEGER);
		columns[4] = new Column("SiloId", true);
		tables[APPLICATIONGROUP].setColumns(columns);
		tables[APPLICATIONGROUP].addIndex(new Index("ApplicationGroupSilo", "SiloId"));

		// ApplicationStatus COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("Name", "name", Types.VARCHAR, 35);
		columns[3] = new Column("Type", "type", Types.INTEGER);
		columns[4] = new Column("Color", "color", Types.VARCHAR, 16);
		tables[APPLICATIONSTATUS].setColumns(columns);

		// ApplicationType COLUMNS
		columns = new Column[29];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Code", "code", Types.VARCHAR, 32);
		columns[2] = new Column("Description", "description", Types.VARCHAR, 250);
		columns[3] = new Column("ServerTypeId", "serverTypeId", Types.INTEGER);
		columns[4] = new Column("Registered", "registered", Types.BOOLEAN);
		columns[5] = new Column("DefaultHostName", "defaultHostName", Types.VARCHAR, 18);
		columns[6] = new Column("UsesCron", "usesCron", Types.BOOLEAN);
		columns[7] = new Column("UsesPool", "usesPool", Types.BOOLEAN);
		columns[8] = new Column("UsesDns", "usesDns", Types.BOOLEAN);
		columns[9] = new Column("DnsName", "dnsName", Types.VARCHAR, 75);
		columns[10] = new Column("DnsShortName", "dnsShortName", Types.VARCHAR, 75);
		columns[11] = new Column("ClientPort", "clientPort", Types.INTEGER);
		columns[12] = new Column("WebPort", "webPort", Types.INTEGER);
		columns[13] = new Column("SSLPort", "sslPort", Types.INTEGER);
		columns[14] = new Column("VIPClientPort", "vipClientPort", Types.INTEGER);
		columns[15] = new Column("VIPWebPort", "vipWebPort", Types.INTEGER);
		columns[16] = new Column("VIPSSLPort", "vipSSLPort", Types.INTEGER);
		columns[17] = new Column("F5Port", "f5Port", Types.INTEGER);
		columns[18] = new Column("HasClient", "hasClient", Types.BOOLEAN);
		columns[19] = new Column("UserId", "userId", Types.VARCHAR, 25);
		columns[20] = new Column("UsesIDL", "usesIDL", Types.BOOLEAN);
		columns[21] = new Column("Directory", "directory", Types.VARCHAR, 254);
		columns[22] = new Column("JarDirectoryName", "jarDirectoryName", Types.VARCHAR, 45);
		columns[23] = new Column("StartCommand", "startCommand", Types.VARCHAR, 254);
		columns[24] = new Column("SnapshotStartCommand", "snapshotStartCommand", Types.VARCHAR, 254);
		columns[25] = new Column("StopCommand", "stopCommand", Types.VARCHAR, 254);
		columns[26] = new Column("ConnectsToMRAD", "connectsToMRAD", Types.BOOLEAN);
		columns[27] = new Column("ShowInMRAD", "showInMRAD", Types.BOOLEAN);
		columns[28] = new Column("ShowInDeploy", "showInDeploy", Types.BOOLEAN);
		tables[APPLICATIONTYPE].setColumns(columns);

		// ApplicationTypeCommand COLUMNS
		columns = new Column[6];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.DATE);
		columns[2] = new Column("CommandLine", "commandLine", Types.VARCHAR, 254);
		columns[3] = new Column("NotSupported", "notSupported", Types.BOOLEAN);
		columns[4] = new Column("ApplicationTypeId", true);
		columns[5] = new Column("CommandId", true);
		tables[APPLICATIONTYPECOMMAND].setColumns(columns);
		tables[APPLICATIONTYPECOMMAND].addIndex(new Index("ApplicationTypeCommandApplicationType", "ApplicationTypeId"));

		// ApplicationVersion COLUMNS
		columns = new Column[6];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("CurrentVersion", "currentVersion", Types.VARCHAR, 55);
		columns[2] = new Column("ApplicationId", true);
		columns[3] = new Column("CurrentPackageVersionId", true);
		columns[4] = new Column("NewPackageVersionId", true);
		columns[5] = new Column("PackageTypeId", true);
		tables[APPLICATIONVERSION].setColumns(columns);
		tables[APPLICATIONVERSION].addIndex(new Index("ApplicationVersionApplication", "ApplicationId"));

		// Command COLUMNS
		columns = new Column[8];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.DATE);
		columns[2] = new Column("Seq", "seq", Types.INTEGER);
		columns[3] = new Column("Name", "name", Types.VARCHAR, 35);
		columns[4] = new Column("Description", "description", Types.VARCHAR, 135);
		columns[5] = new Column("CommandLine", "commandLine", Types.VARCHAR, 400);
		columns[6] = new Column("Type", "type", Types.INTEGER);
		columns[7] = new Column("InAPI", "inAPI", Types.BOOLEAN);
		tables[COMMAND].setColumns(columns);

		// Developer COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.DATE);
		columns[2] = new Column("FirstName", "firstName", Types.VARCHAR, 35);
		columns[3] = new Column("LastName", "lastName", Types.VARCHAR, 55);
		columns[4] = new Column("InactiveDate", "inactiveDate", Types.DATE);
		tables[DEVELOPER].setColumns(columns);

		// Environment COLUMNS
		columns = new Column[12];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Name", "name", Types.VARCHAR, 35);
		columns[2] = new Column("AbbrevName", "abbrevName", Types.VARCHAR, 15);
		columns[3] = new Column("AbbrevName", "teAbbrevName", Types.VARCHAR, 15);
		columns[4] = new Column("AbbrevName", "ceAbbrevName", Types.VARCHAR, 15);
		columns[5] = new Column("HasDNS", "usesDNS", Types.BOOLEAN);
		columns[6] = new Column("HasFirewall", "usesFirewall", Types.BOOLEAN);
		columns[7] = new Column("UsesVip", "usesVip", Types.BOOLEAN);
		columns[8] = new Column("ColorCode", "colorCode", Types.VARCHAR, 16);
		columns[9] = new Column("EnvironmentTypeId", true);
		columns[10] = new Column("IdLId", true);
		columns[11] = new Column("SiteId", true);
		tables[ENVIRONMENT].setColumns(columns);
		tables[ENVIRONMENT].addIndex(new Index("EnvironmentIdL", "IdLId"));
		tables[ENVIRONMENT].addIndex(new Index("EnvironmentSite", "SiteId"));

		// EnvironmentType COLUMNS
		columns = new Column[3];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Type", "type", Types.INTEGER);
		columns[2] = new Column("Name", "name", Types.VARCHAR, 35);
		tables[ENVIRONMENTTYPE].setColumns(columns);

		// HostInfo COLUMNS
		columns = new Column[11];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("LastSSHCheck", "lastSSHCheck", Types.TIMESTAMP);
		columns[2] = new Column("SSHError", "sshError", Types.VARCHAR, 200);
		columns[3] = new Column("HostDate", "hostDate", Types.VARCHAR, 35);
		columns[4] = new Column("HostName", "hostName", Types.VARCHAR, 35);
		columns[5] = new Column("UnixName", "unixName", Types.VARCHAR, 35);
		columns[6] = new Column("CronTab", "cronTab", Types.CLOB, 7);
		columns[7] = new Column("JarDirectory", "jarDirectory", Types.CLOB, 12);
		columns[8] = new Column("TsamTelnet", "tsamTelnet", Types.VARCHAR, 400);
		columns[9] = new Column("InstallVersion", "installVersion", Types.VARCHAR, 35);
		columns[10] = new Column("MradClientId", true);
		tables[HOSTINFO].setColumns(columns);
		tables[HOSTINFO].addIndex(new Index("HostInfoMradClient", "MradClientId"));

		// IDL COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("Version", "version", Types.VARCHAR, 25);
		columns[3] = new Column("ReleaseDate", "releaseDate", Types.DATE);
		columns[4] = new Column("Seq", "seq", Types.INTEGER);
		tables[IDL].setColumns(columns);

		// MRADClient COLUMNS
		columns = new Column[35];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("HostName", "hostName", Types.VARCHAR, 35);
		columns[3] = new Column("IpAddress", "ipAddress", Types.VARCHAR, 15);
		columns[4] = new Column("Name", "name", Types.VARCHAR, 35);
		columns[5] = new Column("Description", "description", Types.VARCHAR, 75);
		columns[6] = new Column("RouterAbsolutePath", "routerAbsolutePath", Types.VARCHAR, 254);
		columns[7] = new Column("StartScript", "startScript", Types.VARCHAR, 254);
		columns[8] = new Column("StartScript", "stopScript", Types.VARCHAR, 254);
		columns[9] = new Column("StartScript", "snapshotStartScript", Types.VARCHAR, 254);
		columns[10] = new Column("Directory", "directory", Types.VARCHAR, 75);
		columns[11] = new Column("Version", "version", Types.VARCHAR, 35);
		columns[12] = new Column("RemoteSocketAddress", "remoteSocketAddress", Types.VARCHAR, 55);
		columns[13] = new Column("ApplicationStatus", "applicationStatus", Types.VARCHAR, 35);
		columns[14] = new Column("Started", "started", Types.TIMESTAMP);
		columns[15] = new Column("Ready", "ready", Types.TIMESTAMP);
		columns[16] = new Column("ServerTypeId", "serverTypeId", Types.INTEGER);
		columns[17] = new Column("ApplicationTypeCode", "applicationTypeCode", Types.VARCHAR, 20);
		columns[18] = new Column("DtConnected", "dtConnected", Types.TIMESTAMP);
		columns[19] = new Column("DtDisconnected", "dtDisconnected", Types.TIMESTAMP);
		columns[20] = new Column("TotalMemory", "totalMemory", Types.INTEGER);
		columns[21] = new Column("FreeMemory", "freeMemory", Types.INTEGER);
		columns[22] = new Column("JavaVendor", "javaVendor", Types.VARCHAR, 35);
		columns[23] = new Column("JavaVersion", "javaVersion", Types.VARCHAR, 35);
		columns[24] = new Column("OsArch", "osArch", Types.VARCHAR, 25);
		columns[25] = new Column("OsName", "osName", Types.VARCHAR, 25);
		columns[26] = new Column("OsVersion", "osVersion", Types.VARCHAR, 55);
		columns[27] = new Column("ProcessId", "processId", Types.VARCHAR, 12);
		columns[28] = new Column("InstalledVersion", "installedVersion", Types.VARCHAR, 32);
		columns[29] = new Column("DtInstall", "dtInstall", Types.TIMESTAMP);
		columns[30] = new Column("DtLastUpdated", "dtLastUpdated", Types.TIMESTAMP);
		columns[31] = new Column("LastConnectionId", "lastConnectionId", Types.INTEGER);
		columns[32] = new Column("MRADClientVersion", "mradClientVersion", Types.VARCHAR, 17);
		columns[33] = new Column("ApplicationId", true);
		columns[34] = new Column("MradServerId", true);
		tables[MRADCLIENT].setColumns(columns);
		tables[MRADCLIENT].addIndex(new Index("MRADClientMradServer", "MradServerId"));

		// MRADClientCommand COLUMNS
		columns = new Column[8];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("DtStatus", "created", Types.TIMESTAMP);
		columns[2] = new Column("Started", "started", Types.TIMESTAMP);
		columns[3] = new Column("Ended", "ended", Types.TIMESTAMP);
		columns[4] = new Column("Error", "error", Types.VARCHAR, 175);
		columns[5] = new Column("MradClientId", true);
		columns[6] = new Column("MradServerCommandId", true);
		columns[7] = new Column("SshExecuteId", true);
		tables[MRADCLIENTCOMMAND].setColumns(columns);
		tables[MRADCLIENTCOMMAND].addIndex(new Index("MRADClientCommandMradClient", "MradClientId"));
		tables[MRADCLIENTCOMMAND].addIndex(new Index("MRADClientCommandMradServerCommand", "MradServerCommandId"));

		// MRADClientMessage COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("TextValue", "text", Types.VARCHAR, 254);
		columns[3] = new Column("Type", "type", Types.INTEGER);
		columns[4] = new Column("MradClientId", true);
		tables[MRADCLIENTMESSAGE].setColumns(columns);
		tables[MRADCLIENTMESSAGE].addIndex(new Index("MRADClientMessageMradClient", "MradClientId"));

		// MRADServer COLUMNS
		columns = new Column[2];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("SiloId", true);
		tables[MRADSERVER].setColumns(columns);
		tables[MRADSERVER].addIndex(new Index("MRADServerSilo", "SiloId"));

		// MRADServerCommand COLUMNS
		columns = new Column[9];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("Started", "started", Types.TIMESTAMP);
		columns[3] = new Column("Error", "error", Types.VARCHAR, 75);
		columns[4] = new Column("Param", "param", Types.VARCHAR, 200);
		columns[5] = new Column("ParamInteger", "paramInteger", Types.INTEGER);
		columns[6] = new Column("AdminUserId", true);
		columns[7] = new Column("CommandId", true);
		columns[8] = new Column("MradServerId", true);
		tables[MRADSERVERCOMMAND].setColumns(columns);
		tables[MRADSERVERCOMMAND].addIndex(new Index("MRADServerCommandMradServer", "MradServerId"));

		// OperatingSystem COLUMNS
		columns = new Column[4];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Name", "name", Types.VARCHAR, 35);
		columns[2] = new Column("Type", "type", Types.INTEGER);
		columns[3] = new Column("UserId", "userId", Types.VARCHAR, 12);
		tables[OPERATINGSYSTEM].setColumns(columns);

		// OSVersion COLUMNS
		columns = new Column[3];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Name", "name", Types.VARCHAR, 35);
		columns[2] = new Column("OperatingSystemId", true);
		tables[OSVERSION].setColumns(columns);
		tables[OSVERSION].addIndex(new Index("OSVersionOperatingSystem", "OperatingSystemId"));

		// PackageType COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Code", "code", Types.VARCHAR, 14);
		columns[2] = new Column("PackageName", "packageName", Types.VARCHAR, 55);
		columns[3] = new Column("PomGroupId", "pomGroupId", Types.VARCHAR, 55);
		columns[4] = new Column("PomArtifactId", "pomArtifactId", Types.VARCHAR, 25);
		tables[PACKAGETYPE].setColumns(columns);

		// PackageVersion COLUMNS
		columns = new Column[8];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("Version", "version", Types.VARCHAR, 25);
		columns[3] = new Column("BuildDate", "buildDate", Types.DATE);
		columns[4] = new Column("FileSize", "fileSize", Types.INTEGER);
		columns[5] = new Column("FileName", "fileName", Types.VARCHAR, 55);
		columns[6] = new Column("IdLId", true);
		columns[7] = new Column("PackageTypeId", true);
		tables[PACKAGEVERSION].setColumns(columns);
		tables[PACKAGEVERSION].addIndex(new Index("PackageVersionPackageType", "PackageTypeId"));

		// Server COLUMNS
		columns = new Column[10];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("Name", "name", Types.VARCHAR, 55);
		columns[3] = new Column("HostName", "hostName", Types.VARCHAR, 35);
		columns[4] = new Column("IpAddress", "ipAddress", Types.VARCHAR, 24);
		columns[5] = new Column("DnsName", "dnsName", Types.VARCHAR, 50);
		columns[6] = new Column("ShortDnsName", "shortDnsName", Types.VARCHAR, 25);
		columns[7] = new Column("UserId", "userId", Types.VARCHAR, 25);
		columns[8] = new Column("OSVersionId", true);
		columns[9] = new Column("SiloId", true);
		tables[SERVER].setColumns(columns);
		tables[SERVER].addIndex(new Index("ServerSilo", "SiloId"));

		// Silo COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("NetworkMask", "networkMask", Types.VARCHAR, 25);
		columns[2] = new Column("CurrentTime", "currentTime", Types.TIMESTAMP);
		columns[3] = new Column("EnvironmentId", true);
		columns[4] = new Column("SiloTypeId", true);
		tables[SILO].setColumns(columns);
		tables[SILO].addIndex(new Index("SiloEnvironment", "EnvironmentId"));

		// SiloConfig COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("MinCount", "minCount", Types.INTEGER);
		columns[2] = new Column("MaxCount", "maxCount", Types.INTEGER);
		columns[3] = new Column("ApplicationTypeId", true);
		columns[4] = new Column("SiloId", true);
		tables[SILOCONFIG].setColumns(columns);
		tables[SILOCONFIG].addIndex(new Index("SiloConfigSilo", "SiloId"));

		// SiloConfigVersioin COLUMNS
		columns = new Column[4];
		columns[0] = new Column("Id", "id", Types.INTEGER, 3);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("PackageTypeId", true);
		columns[2] = new Column("PackageVersionId", true);
		columns[3] = new Column("SiloConfigId", true);
		tables[SILOCONFIGVERSIOIN].setColumns(columns);
		tables[SILOCONFIGVERSIOIN].addIndex(new Index("SiloConfigVersioinSiloConfig", "SiloConfigId"));

		// SiloType COLUMNS
		columns = new Column[3];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Name", "name", Types.VARCHAR, 55);
		columns[2] = new Column("Type", "type", Types.INTEGER);
		tables[SILOTYPE].setColumns(columns);

		// Site COLUMNS
		columns = new Column[5];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("AbbrevName", "abbrevName", Types.VARCHAR, 6);
		columns[2] = new Column("Name", "name", Types.VARCHAR, 25);
		columns[3] = new Column("Production", "production", Types.BOOLEAN);
		columns[4] = new Column("TimezoneId", true);
		tables[SITE].setColumns(columns);
		tables[SITE].addIndex(new Index("SiteTimezone", "TimezoneId"));

		// SSHExecute COLUMNS
		columns = new Column[14];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Created", "created", Types.TIMESTAMP);
		columns[2] = new Column("HostName", "hostName", Types.VARCHAR, 55);
		columns[3] = new Column("UserId", "userId", Types.VARCHAR, 35);
		columns[4] = new Column("SSHKeyFile", "sshKeyFile", Types.VARCHAR, 135);
		columns[5] = new Column("CommandLine", "commandLine", Types.VARCHAR, 500);
		columns[6] = new Column("Started", "started", Types.TIMESTAMP);
		columns[7] = new Column("Connected", "connected", Types.TIMESTAMP);
		columns[8] = new Column("Authenticated", "authenticated", Types.TIMESTAMP);
		columns[9] = new Column("Completed", "completed", Types.TIMESTAMP);
		columns[10] = new Column("Successful", "successful", Types.BOOLEAN);
		columns[11] = new Column("Output", "output", Types.CLOB, 6);
		columns[12] = new Column("Error", "error", Types.CLOB, 150);
		columns[13] = new Column("MRADServerCommandId", true);
		tables[SSHEXECUTE].setColumns(columns);
		tables[SSHEXECUTE].addIndex(new Index("SSHExecuteMradServerCommand", "MRADServerCommandId"));

		// Timezone COLUMNS
		columns = new Column[3];
		columns[0] = new Column("Id", "id", Types.INTEGER, 5);
		columns[0].primaryKey = true;
		columns[0].assignNextNumber = true;
		columns[1] = new Column("Name", "name", Types.VARCHAR, 55);
		columns[2] = new Column("UTCOffset", "utcOffset", Types.INTEGER);
		tables[TIMEZONE].setColumns(columns);

		// Link Tables Columns

		// SiloTypeApplicationType COLUMNS
		columns = new Column[2];
		columns[0] = new Column("SiloTypeId", null);
		columns[1] = new Column("ApplicationTypeId", null);
		tables[SILOTYPEAPPLICATIONTYPE].setColumns(columns);
		tables[SILOTYPEAPPLICATIONTYPE].addIndex(new Index("ServerTypeSiloType", new String[] { "SiloTypeId" }));
		tables[SILOTYPEAPPLICATIONTYPE].addIndex(new Index("SiloTypeApplicationType", new String[] { "ApplicationTypeId" }));

		// ApplicationTypePackageType COLUMNS
		columns = new Column[2];
		columns[0] = new Column("ApplicationTypeId", null);
		columns[1] = new Column("PackageTypeId", null);
		tables[APPLICATIONTYPEPACKAGETYPE].setColumns(columns);
		tables[APPLICATIONTYPEPACKAGETYPE].addIndex(new Index("PackageTypeApplicationType", new String[] { "ApplicationTypeId" }));
		tables[APPLICATIONTYPEPACKAGETYPE].addIndex(new Index("ApplicationTypePackageType", new String[] { "PackageTypeId" }));

		// ApplicationGroupIncludeApplication COLUMNS
		columns = new Column[2];
		columns[0] = new Column("ApplicationGroupId", null);
		columns[1] = new Column("ApplicationId", null);
		tables[APPLICATIONGROUPINCLUDEAPPLICATION].setColumns(columns);
		tables[APPLICATIONGROUPINCLUDEAPPLICATION]
				.addIndex(new Index("ApplicationIncludeApplicationGroup", new String[] { "ApplicationGroupId" }));
		tables[APPLICATIONGROUPINCLUDEAPPLICATION]
				.addIndex(new Index("ApplicationGroupIncludeApplication", new String[] { "ApplicationId" }));

		// ApplicationGroupIncludeApplicationType COLUMNS
		columns = new Column[2];
		columns[0] = new Column("ApplicationGroupId", null);
		columns[1] = new Column("ApplicationTypeId", null);
		tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE].setColumns(columns);
		tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE]
				.addIndex(new Index("ApplicationTypeIncludeApplicationGroup", new String[] { "ApplicationGroupId" }));
		tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE]
				.addIndex(new Index("ApplicationGroupIncludeApplicationType", new String[] { "ApplicationTypeId" }));

		// DeveloperApplicationType COLUMNS
		columns = new Column[2];
		columns[0] = new Column("DeveloperId", null);
		columns[1] = new Column("ApplicationTypeId", null);
		tables[DEVELOPERAPPLICATIONTYPE].setColumns(columns);
		tables[DEVELOPERAPPLICATIONTYPE].addIndex(new Index("ApplicationTypeDeveloper", new String[] { "DeveloperId" }));
		tables[DEVELOPERAPPLICATIONTYPE].addIndex(new Index("DeveloperApplicationType", new String[] { "ApplicationTypeId" }));

		// ApplicationGroupExcludeApplicationType COLUMNS
		columns = new Column[2];
		columns[0] = new Column("ApplicationGroupId", null);
		columns[1] = new Column("ApplicationTypeId", null);
		tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE].setColumns(columns);
		tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE]
				.addIndex(new Index("ApplicationTypeExcludeApplicationGroup", new String[] { "ApplicationGroupId" }));
		tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE]
				.addIndex(new Index("ApplicationGroupExcludeApplicationType", new String[] { "ApplicationTypeId" }));

		// ApplicationGroupExcludeApplication COLUMNS
		columns = new Column[2];
		columns[0] = new Column("ApplicationGroupId", null);
		columns[1] = new Column("ApplicationId", null);
		tables[APPLICATIONGROUPEXCLUDEAPPLICATION].setColumns(columns);
		tables[APPLICATIONGROUPEXCLUDEAPPLICATION]
				.addIndex(new Index("ApplicationExcludeApplicationGroup", new String[] { "ApplicationGroupId" }));
		tables[APPLICATIONGROUPEXCLUDEAPPLICATION]
				.addIndex(new Index("ApplicationGroupExcludeApplication", new String[] { "ApplicationId" }));

		// LINKS
		// table.addLink( propertyName, toTableName, reversePropertyName, FKey ColumnNumber(s))
		tables[ADMINUSER].addLink("mradServerCommands", tables[MRADSERVERCOMMAND], "adminUser", new int[] { 0 });
		tables[ADMINUSERCATEGORY].addLink("adminUserCategories", tables[ADMINUSERCATEGORY], "parentAdminUserCategory", new int[] { 0 });
		tables[ADMINUSERCATEGORY].addLink("parentAdminUserCategory", tables[ADMINUSERCATEGORY], "adminUserCategories", new int[] { 2 });
		tables[APPLICATION].addLink("applicationStatus", tables[APPLICATIONSTATUS], "applications", new int[] { 6 });
		tables[APPLICATION].addLink("applicationType", tables[APPLICATIONTYPE], "applications", new int[] { 7 });
		tables[APPLICATION].addLink("applicationVersions", tables[APPLICATIONVERSION], "application", new int[] { 0 });
		tables[APPLICATION].addLink("mradClient", tables[MRADCLIENT], "application", new int[] { 0 });
		tables[APPLICATION].addLink("server", tables[SERVER], "applications", new int[] { 8 });
		tables[APPLICATIONGROUP].addLink("silo", tables[SILO], "applicationGroups", new int[] { 4 });
		tables[APPLICATIONSTATUS].addLink("applications", tables[APPLICATION], "applicationStatus", new int[] { 0 });
		tables[APPLICATIONTYPE].addLink("applications", tables[APPLICATION], "applicationType", new int[] { 0 });
		tables[APPLICATIONTYPE].addLink("applicationTypeCommands", tables[APPLICATIONTYPECOMMAND], "applicationType", new int[] { 0 });
		tables[APPLICATIONTYPE].addLink("siloConfigs", tables[SILOCONFIG], "applicationType", new int[] { 0 });
		tables[APPLICATIONTYPECOMMAND].addLink("applicationType", tables[APPLICATIONTYPE], "applicationTypeCommands", new int[] { 4 });
		tables[APPLICATIONTYPECOMMAND].addLink("command", tables[COMMAND], "applicationTypeCommands", new int[] { 5 });
		tables[APPLICATIONVERSION].addLink("application", tables[APPLICATION], "applicationVersions", new int[] { 2 });
		tables[APPLICATIONVERSION].addLink("currentPackageVersion", tables[PACKAGEVERSION], "currentApplicationVersions", new int[] { 3 });
		tables[APPLICATIONVERSION].addLink("newPackageVersion", tables[PACKAGEVERSION], "nepApplicationVersions", new int[] { 4 });
		tables[APPLICATIONVERSION].addLink("packageType", tables[PACKAGETYPE], "applicationVersions", new int[] { 5 });
		tables[COMMAND].addLink("applicationTypeCommands", tables[APPLICATIONTYPECOMMAND], "command", new int[] { 0 });
		tables[COMMAND].addLink("mradServerCommands", tables[MRADSERVERCOMMAND], "command", new int[] { 0 });
		tables[ENVIRONMENT].addLink("environmentType", tables[ENVIRONMENTTYPE], "environments", new int[] { 9 });
		tables[ENVIRONMENT].addLink("idL", tables[IDL], "environments", new int[] { 10 });
		tables[ENVIRONMENT].addLink("silos", tables[SILO], "environment", new int[] { 0 });
		tables[ENVIRONMENT].addLink("site", tables[SITE], "environments", new int[] { 11 });
		tables[ENVIRONMENTTYPE].addLink("environments", tables[ENVIRONMENT], "environmentType", new int[] { 0 });
		tables[HOSTINFO].addLink("mradClient", tables[MRADCLIENT], "hostInfo", new int[] { 10 });
		tables[IDL].addLink("environments", tables[ENVIRONMENT], "idL", new int[] { 0 });
		tables[IDL].addLink("packageVersions", tables[PACKAGEVERSION], "idL", new int[] { 0 });
		tables[MRADCLIENT].addLink("application", tables[APPLICATION], "mradClient", new int[] { 33 });
		tables[MRADCLIENT].addLink("hostInfo", tables[HOSTINFO], "mradClient", new int[] { 0 });
		tables[MRADCLIENT].addLink("mradClientCommands", tables[MRADCLIENTCOMMAND], "mradClient", new int[] { 0 });
		tables[MRADCLIENT].addLink("mradClientMessages", tables[MRADCLIENTMESSAGE], "mradClient", new int[] { 0 });
		tables[MRADCLIENT].addLink("mradServer", tables[MRADSERVER], "mradClients", new int[] { 34 });
		tables[MRADCLIENTCOMMAND].addLink("mradClient", tables[MRADCLIENT], "mradClientCommands", new int[] { 5 });
		tables[MRADCLIENTCOMMAND].addLink("mradServerCommand", tables[MRADSERVERCOMMAND], "mradClientCommands", new int[] { 6 });
		tables[MRADCLIENTCOMMAND].addLink("sshExecute", tables[SSHEXECUTE], "mradClientCommand", new int[] { 7 });
		tables[MRADCLIENTMESSAGE].addLink("mradClient", tables[MRADCLIENT], "mradClientMessages", new int[] { 4 });
		tables[MRADSERVER].addLink("mradClients", tables[MRADCLIENT], "mradServer", new int[] { 0 });
		tables[MRADSERVER].addLink("mradServerCommands", tables[MRADSERVERCOMMAND], "mradServer", new int[] { 0 });
		tables[MRADSERVER].addLink("silo", tables[SILO], "mradServer", new int[] { 1 });
		tables[MRADSERVERCOMMAND].addLink("adminUser", tables[ADMINUSER], "mradServerCommands", new int[] { 6 });
		tables[MRADSERVERCOMMAND].addLink("command", tables[COMMAND], "mradServerCommands", new int[] { 7 });
		tables[MRADSERVERCOMMAND].addLink("mradClientCommands", tables[MRADCLIENTCOMMAND], "mradServerCommand", new int[] { 0 });
		tables[MRADSERVERCOMMAND].addLink("mradServer", tables[MRADSERVER], "mradServerCommands", new int[] { 8 });
		tables[MRADSERVERCOMMAND].addLink("sshExecutes", tables[SSHEXECUTE], "mradServerCommand", new int[] { 0 });
		tables[OPERATINGSYSTEM].addLink("osVersions", tables[OSVERSION], "operatingSystem", new int[] { 0 });
		tables[OSVERSION].addLink("operatingSystem", tables[OPERATINGSYSTEM], "osVersions", new int[] { 2 });
		tables[OSVERSION].addLink("servers", tables[SERVER], "osVersion", new int[] { 0 });
		tables[PACKAGETYPE].addLink("applicationVersions", tables[APPLICATIONVERSION], "packageType", new int[] { 0 });
		tables[PACKAGETYPE].addLink("packageVersions", tables[PACKAGEVERSION], "packageType", new int[] { 0 });
		tables[PACKAGETYPE].addLink("siloConfigVersioins", tables[SILOCONFIGVERSIOIN], "packageType", new int[] { 0 });
		tables[PACKAGEVERSION].addLink("currentApplicationVersions", tables[APPLICATIONVERSION], "currentPackageVersion", new int[] { 0 });
		tables[PACKAGEVERSION].addLink("idL", tables[IDL], "packageVersions", new int[] { 6 });
		tables[PACKAGEVERSION].addLink("nepApplicationVersions", tables[APPLICATIONVERSION], "newPackageVersion", new int[] { 0 });
		tables[PACKAGEVERSION].addLink("packageType", tables[PACKAGETYPE], "packageVersions", new int[] { 7 });
		tables[PACKAGEVERSION].addLink("siloConfigVersioins", tables[SILOCONFIGVERSIOIN], "packageVersion", new int[] { 0 });
		tables[SERVER].addLink("applications", tables[APPLICATION], "server", new int[] { 0 });
		tables[SERVER].addLink("osVersion", tables[OSVERSION], "servers", new int[] { 8 });
		tables[SERVER].addLink("silo", tables[SILO], "servers", new int[] { 9 });
		tables[SILO].addLink("applicationGroups", tables[APPLICATIONGROUP], "silo", new int[] { 0 });
		tables[SILO].addLink("environment", tables[ENVIRONMENT], "silos", new int[] { 3 });
		tables[SILO].addLink("mradServer", tables[MRADSERVER], "silo", new int[] { 0 });
		tables[SILO].addLink("servers", tables[SERVER], "silo", new int[] { 0 });
		tables[SILO].addLink("siloConfigs", tables[SILOCONFIG], "silo", new int[] { 0 });
		tables[SILO].addLink("siloType", tables[SILOTYPE], "silos", new int[] { 4 });
		tables[SILOCONFIG].addLink("applicationType", tables[APPLICATIONTYPE], "siloConfigs", new int[] { 3 });
		tables[SILOCONFIG].addLink("silo", tables[SILO], "siloConfigs", new int[] { 4 });
		tables[SILOCONFIG].addLink("siloConfigVersioins", tables[SILOCONFIGVERSIOIN], "siloConfig", new int[] { 0 });
		tables[SILOCONFIGVERSIOIN].addLink("packageType", tables[PACKAGETYPE], "siloConfigVersioins", new int[] { 1 });
		tables[SILOCONFIGVERSIOIN].addLink("packageVersion", tables[PACKAGEVERSION], "siloConfigVersioins", new int[] { 2 });
		tables[SILOCONFIGVERSIOIN].addLink("siloConfig", tables[SILOCONFIG], "siloConfigVersioins", new int[] { 3 });
		tables[SILOTYPE].addLink("silos", tables[SILO], "siloType", new int[] { 0 });
		tables[SITE].addLink("environments", tables[ENVIRONMENT], "site", new int[] { 0 });
		tables[SITE].addLink("timezone", tables[TIMEZONE], "sites", new int[] { 4 });
		tables[SSHEXECUTE].addLink("mradClientCommand", tables[MRADCLIENTCOMMAND], "sshExecute", new int[] { 0 });
		tables[SSHEXECUTE].addLink("mradServerCommand", tables[MRADSERVERCOMMAND], "sshExecutes", new int[] { 13 });
		tables[TIMEZONE].addLink("sites", tables[SITE], "timezone", new int[] { 0 });

		// Links for Link Tables

		// SiloTypeApplicationType LINKS
		tables[SILOTYPEAPPLICATIONTYPE].addLink("siloTypes", tables[SILOTYPE], "applicationTypes", new int[] { 0 });
		tables[SILOTYPE].addLink("applicationTypes", tables[SILOTYPEAPPLICATIONTYPE], "siloTypes", new int[] { 0 });
		tables[SILOTYPEAPPLICATIONTYPE].addLink("applicationTypes", tables[APPLICATIONTYPE], "siloTypes", new int[] { 1 });
		tables[APPLICATIONTYPE].addLink("siloTypes", tables[SILOTYPEAPPLICATIONTYPE], "applicationTypes", new int[] { 0 });

		// ApplicationTypePackageType LINKS
		tables[APPLICATIONTYPEPACKAGETYPE].addLink("applicationTypes", tables[APPLICATIONTYPE], "packageTypes", new int[] { 0 });
		tables[APPLICATIONTYPE].addLink("packageTypes", tables[APPLICATIONTYPEPACKAGETYPE], "applicationTypes", new int[] { 0 });
		tables[APPLICATIONTYPEPACKAGETYPE].addLink("packageTypes", tables[PACKAGETYPE], "applicationTypes", new int[] { 1 });
		tables[PACKAGETYPE].addLink("applicationTypes", tables[APPLICATIONTYPEPACKAGETYPE], "packageTypes", new int[] { 0 });

		// ApplicationGroupIncludeApplication LINKS
		tables[APPLICATIONGROUPINCLUDEAPPLICATION].addLink(	"includeApplicationGroups", tables[APPLICATIONGROUP], "includeApplications",
															new int[] { 0 });
		tables[APPLICATIONGROUP].addLink(	"includeApplications", tables[APPLICATIONGROUPINCLUDEAPPLICATION], "includeApplicationGroups",
											new int[] { 0 });
		tables[APPLICATIONGROUPINCLUDEAPPLICATION].addLink(	"includeApplications", tables[APPLICATION], "includeApplicationGroups",
															new int[] { 1 });
		tables[APPLICATION].addLink("includeApplicationGroups", tables[APPLICATIONGROUPINCLUDEAPPLICATION], "includeApplications",
									new int[] { 0 });

		// ApplicationGroupIncludeApplicationType LINKS
		tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE].addLink(	"includeApplicationGroups", tables[APPLICATIONGROUP],
																"includeApplicationTypes", new int[] { 0 });
		tables[APPLICATIONGROUP].addLink(	"includeApplicationTypes", tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE],
											"includeApplicationGroups", new int[] { 0 });
		tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE].addLink(	"includeApplicationTypes", tables[APPLICATIONTYPE],
																"includeApplicationGroups", new int[] { 1 });
		tables[APPLICATIONTYPE].addLink("includeApplicationGroups", tables[APPLICATIONGROUPINCLUDEAPPLICATIONTYPE],
										"includeApplicationTypes", new int[] { 0 });

		// DeveloperApplicationType LINKS
		tables[DEVELOPERAPPLICATIONTYPE].addLink("developers", tables[DEVELOPER], "applicationTypes", new int[] { 0 });
		tables[DEVELOPER].addLink("applicationTypes", tables[DEVELOPERAPPLICATIONTYPE], "developers", new int[] { 0 });
		tables[DEVELOPERAPPLICATIONTYPE].addLink("applicationTypes", tables[APPLICATIONTYPE], "developers", new int[] { 1 });
		tables[APPLICATIONTYPE].addLink("developers", tables[DEVELOPERAPPLICATIONTYPE], "applicationTypes", new int[] { 0 });

		// ApplicationGroupExcludeApplicationType LINKS
		tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE].addLink(	"excludeApplicationGroups", tables[APPLICATIONGROUP],
																"excludeApplicationTypes", new int[] { 0 });
		tables[APPLICATIONGROUP].addLink(	"excludeApplicationTypes", tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE],
											"excludeApplicationGroups", new int[] { 0 });
		tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE].addLink(	"excludeApplicationTypes", tables[APPLICATIONTYPE],
																"excludeApplicationGroups", new int[] { 1 });
		tables[APPLICATIONTYPE].addLink("excludeApplicationGroups", tables[APPLICATIONGROUPEXCLUDEAPPLICATIONTYPE],
										"excludeApplicationTypes", new int[] { 0 });

		// ApplicationGroupExcludeApplication LINKS
		tables[APPLICATIONGROUPEXCLUDEAPPLICATION].addLink(	"excludeApplicationGroups", tables[APPLICATIONGROUP], "excludeApplications",
															new int[] { 0 });
		tables[APPLICATIONGROUP].addLink(	"excludeApplications", tables[APPLICATIONGROUPEXCLUDEAPPLICATION], "excludeApplicationGroups",
											new int[] { 0 });
		tables[APPLICATIONGROUPEXCLUDEAPPLICATION].addLink(	"excludeApplications", tables[APPLICATION], "excludeApplicationGroups",
															new int[] { 1 });
		tables[APPLICATION].addLink("excludeApplicationGroups", tables[APPLICATIONGROUPEXCLUDEAPPLICATION], "excludeApplications",
									new int[] { 0 });
		db.setTables(tables);
		return db;
	}

	protected void createDAO(Database db) {
		DataAccessObject dao;

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "AdminUser.Id";
			private static final String columns = "AdminUser.Id, AdminUser.Created, AdminUser.LoginId, AdminUser.Password, AdminUser.FirstName, AdminUser.LastName, AdminUser.Title, AdminUser.PrefixName, AdminUser.InactiveDate, AdminUser.InactiveReason, AdminUser.LoggedIn, AdminUser.Admin, AdminUser.EditProcessed, AdminUser.CanUseLLADCommands, AdminUser.EnableGSMR, AdminUser.EnableMRAD, AdminUser.MiscPassword";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getAdminUser(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("AdminUser").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "AdminUserCategory.Id";
			private static final String columns = "AdminUserCategory.Id, AdminUserCategory.Name, AdminUserCategory.ParentAdminUserCategoryId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getAdminUserCategory(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("AdminUserCategory").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Application.Id";
			private static final String columns = "Application.Id, Application.InstanceNumber, Application.TradingSystemId, Application.Name, Application.UserId, Application.ShowInMRAD, Application.ApplicationStatusId, Application.ApplicationTypeId, Application.ServerId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getApplication(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Application").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "ApplicationGroup.Id";
			private static final String columns = "ApplicationGroup.Id, ApplicationGroup.Code, ApplicationGroup.Name, ApplicationGroup.Seq, ApplicationGroup.SiloId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getApplicationGroup(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("ApplicationGroup").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "ApplicationStatus.Id";
			private static final String columns = "ApplicationStatus.Id, ApplicationStatus.Created, ApplicationStatus.Name, ApplicationStatus.Type, ApplicationStatus.Color";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getApplicationStatus(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("ApplicationStatus").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "ApplicationType.Id";
			private static final String columns = "ApplicationType.Id, ApplicationType.Code, ApplicationType.Description, ApplicationType.ServerTypeId, ApplicationType.Registered, ApplicationType.DefaultHostName, ApplicationType.UsesCron, ApplicationType.UsesPool, ApplicationType.UsesDns, ApplicationType.DnsName, ApplicationType.DnsShortName, ApplicationType.ClientPort, ApplicationType.WebPort, ApplicationType.SSLPort, ApplicationType.VIPClientPort, ApplicationType.VIPWebPort, ApplicationType.VIPSSLPort, ApplicationType.F5Port, ApplicationType.HasClient, ApplicationType.UserId, ApplicationType.UsesIDL, ApplicationType.Directory, ApplicationType.JarDirectoryName, ApplicationType.StartCommand, ApplicationType.SnapshotStartCommand, ApplicationType.StopCommand, ApplicationType.ConnectsToMRAD, ApplicationType.ShowInMRAD, ApplicationType.ShowInDeploy";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getApplicationType(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("ApplicationType").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "ApplicationTypeCommand.Id";
			private static final String columns = "ApplicationTypeCommand.Id, ApplicationTypeCommand.Created, ApplicationTypeCommand.CommandLine, ApplicationTypeCommand.NotSupported, ApplicationTypeCommand.ApplicationTypeId, ApplicationTypeCommand.CommandId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getApplicationTypeCommand(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("ApplicationTypeCommand").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "ApplicationVersion.Id";
			private static final String columns = "ApplicationVersion.Id, ApplicationVersion.CurrentVersion, ApplicationVersion.ApplicationId, ApplicationVersion.CurrentPackageVersionId, ApplicationVersion.NewPackageVersionId, ApplicationVersion.PackageTypeId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getApplicationVersion(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("ApplicationVersion").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Command.Id";
			private static final String columns = "Command.Id, Command.Created, Command.Seq, Command.Name, Command.Description, Command.CommandLine, Command.Type, Command.InAPI";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getCommand(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Command").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Developer.Id";
			private static final String columns = "Developer.Id, Developer.Created, Developer.FirstName, Developer.LastName, Developer.InactiveDate";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getDeveloper(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Developer").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Environment.Id";
			private static final String columns = "Environment.Id, Environment.Name, Environment.AbbrevName, Environment.AbbrevName, Environment.AbbrevName, Environment.HasDNS, Environment.HasFirewall, Environment.UsesVip, Environment.ColorCode, Environment.EnvironmentTypeId, Environment.IdLId, Environment.SiteId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getEnvironment(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Environment").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "EnvironmentType.Id";
			private static final String columns = "EnvironmentType.Id, EnvironmentType.Type, EnvironmentType.Name";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getEnvironmentType(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("EnvironmentType").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "HostInfo.Id";
			private static final String columns = "HostInfo.Id, HostInfo.LastSSHCheck, HostInfo.SSHError, HostInfo.HostDate, HostInfo.HostName, HostInfo.UnixName, HostInfo.CronTab, HostInfo.JarDirectory, HostInfo.TsamTelnet, HostInfo.InstallVersion, HostInfo.MradClientId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getHostInfo(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("HostInfo").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Idl.Id";
			private static final String columns = "Idl.Id, Idl.Created, Idl.Version, Idl.ReleaseDate, Idl.Seq";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getIDL(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Idl").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "MRADClient.Id";
			private static final String columns = "MRADClient.Id, MRADClient.Created, MRADClient.HostName, MRADClient.IpAddress, MRADClient.Name, MRADClient.Description, MRADClient.RouterAbsolutePath, MRADClient.StartScript, MRADClient.StartScript, MRADClient.StartScript, MRADClient.Directory, MRADClient.Version, MRADClient.RemoteSocketAddress, MRADClient.ApplicationStatus, MRADClient.Started, MRADClient.Ready, MRADClient.ServerTypeId, MRADClient.ApplicationTypeCode, MRADClient.DtConnected, MRADClient.DtDisconnected, MRADClient.TotalMemory, MRADClient.FreeMemory, MRADClient.JavaVendor, MRADClient.JavaVersion, MRADClient.OsArch, MRADClient.OsName, MRADClient.OsVersion, MRADClient.ProcessId, MRADClient.InstalledVersion, MRADClient.DtInstall, MRADClient.DtLastUpdated, MRADClient.LastConnectionId, MRADClient.MRADClientVersion, MRADClient.ApplicationId, MRADClient.MradServerId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getMRADClient(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("MRADClient").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "MRADClientCommand.Id";
			private static final String columns = "MRADClientCommand.Id, MRADClientCommand.DtStatus, MRADClientCommand.Started, MRADClientCommand.Ended, MRADClientCommand.Error, MRADClientCommand.MradClientId, MRADClientCommand.MradServerCommandId, MRADClientCommand.SshExecuteId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getMRADClientCommand(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("MRADClientCommand").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "MRADClientMessage.Id";
			private static final String columns = "MRADClientMessage.Id, MRADClientMessage.Created, MRADClientMessage.TextValue, MRADClientMessage.Type, MRADClientMessage.MradClientId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getMRADClientMessage(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("MRADClientMessage").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "MRADServer.Id";
			private static final String columns = "MRADServer.Id, MRADServer.SiloId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getMRADServer(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("MRADServer").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "MRADServerCommand.Id";
			private static final String columns = "MRADServerCommand.Id, MRADServerCommand.Created, MRADServerCommand.Started, MRADServerCommand.Error, MRADServerCommand.Param, MRADServerCommand.ParamInteger, MRADServerCommand.AdminUserId, MRADServerCommand.CommandId, MRADServerCommand.MradServerId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getMRADServerCommand(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("MRADServerCommand").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "OperatingSystem.Id";
			private static final String columns = "OperatingSystem.Id, OperatingSystem.Name, OperatingSystem.Type, OperatingSystem.UserId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getOperatingSystem(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("OperatingSystem").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "OSVersion.Id";
			private static final String columns = "OSVersion.Id, OSVersion.Name, OSVersion.OperatingSystemId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getOSVersion(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("OSVersion").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "PackageType.Id";
			private static final String columns = "PackageType.Id, PackageType.Code, PackageType.PackageName, PackageType.PomGroupId, PackageType.PomArtifactId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getPackageType(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("PackageType").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "PackageVersion.Id";
			private static final String columns = "PackageVersion.Id, PackageVersion.Created, PackageVersion.Version, PackageVersion.BuildDate, PackageVersion.FileSize, PackageVersion.FileName, PackageVersion.IdLId, PackageVersion.PackageTypeId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getPackageVersion(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("PackageVersion").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Server.Id";
			private static final String columns = "Server.Id, Server.Created, Server.Name, Server.HostName, Server.IpAddress, Server.DnsName, Server.ShortDnsName, Server.UserId, Server.OSVersionId, Server.SiloId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getServer(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Server").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Silo.Id";
			private static final String columns = "Silo.Id, Silo.NetworkMask, Silo.CurrentTime, Silo.EnvironmentId, Silo.SiloTypeId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getSilo(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Silo").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "SiloConfig.Id";
			private static final String columns = "SiloConfig.Id, SiloConfig.MinCount, SiloConfig.MaxCount, SiloConfig.ApplicationTypeId, SiloConfig.SiloId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getSiloConfig(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("SiloConfig").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "SiloConfigVersioin.Id";
			private static final String columns = "SiloConfigVersioin.Id, SiloConfigVersioin.PackageTypeId, SiloConfigVersioin.PackageVersionId, SiloConfigVersioin.SiloConfigId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getSiloConfigVersioin(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("SiloConfigVersioin").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "SiloType.Id";
			private static final String columns = "SiloType.Id, SiloType.Name, SiloType.Type";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getSiloType(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("SiloType").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "Site.Id";
			private static final String columns = "Site.Id, Site.AbbrevName, Site.Name, Site.Production, Site.TimezoneId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getSite(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("Site").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "SSHExecute.Id";
			private static final String columns = "SSHExecute.Id, SSHExecute.Created, SSHExecute.HostName, SSHExecute.UserId, SSHExecute.SSHKeyFile, SSHExecute.CommandLine, SSHExecute.Started, SSHExecute.Connected, SSHExecute.Authenticated, SSHExecute.Completed, SSHExecute.Successful, SSHExecute.Output, SSHExecute.Error, SSHExecute.MRADServerCommandId";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getSSHExecute(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("SSHExecute").setDataAccessObject(dao);

		dao = new DataAccessObject() {
			private static final String pkeyColumns = "TimeZone.Id";
			private static final String columns = "TimeZone.Id, TimeZone.Name, TimeZone.UTCOffset";

			@Override
			public String getPkeySelectColumns() {
				return pkeyColumns;
			}

			@Override
			public String getSelectColumns() {
				return columns;
			}

			@Override
			public OAObject getObject(DataAccessObject.ResultSetInfo rsi) throws SQLException {
				return getTimezone(rsi.getResultSet(), rsi);
			}
		};
		db.getTable("TimeZone").setDataAccessObject(dao);
	}

	protected AdminUser getAdminUser(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		AdminUser adminUser = (AdminUser) OAObjectCacheDelegate.getObject(AdminUser.class, id);
		if (adminUser == null) {
			adminUser = new AdminUser();
			adminUser.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return adminUser;
	}

	protected AdminUserCategory getAdminUserCategory(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		AdminUserCategory adminUserCategory = (AdminUserCategory) OAObjectCacheDelegate.getObject(AdminUserCategory.class, id);
		if (adminUserCategory == null) {
			adminUserCategory = new AdminUserCategory();
			adminUserCategory.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return adminUserCategory;
	}

	protected Application getApplication(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Application application = (Application) OAObjectCacheDelegate.getObject(Application.class, id);
		if (application == null) {
			application = new Application();
			application.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return application;
	}

	protected ApplicationGroup getApplicationGroup(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		ApplicationGroup applicationGroup = (ApplicationGroup) OAObjectCacheDelegate.getObject(ApplicationGroup.class, id);
		if (applicationGroup == null) {
			applicationGroup = new ApplicationGroup();
			applicationGroup.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return applicationGroup;
	}

	protected ApplicationStatus getApplicationStatus(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		ApplicationStatus applicationStatus = (ApplicationStatus) OAObjectCacheDelegate.getObject(ApplicationStatus.class, id);
		if (applicationStatus == null) {
			applicationStatus = new ApplicationStatus();
			applicationStatus.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return applicationStatus;
	}

	protected ApplicationType getApplicationType(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		ApplicationType applicationType = (ApplicationType) OAObjectCacheDelegate.getObject(ApplicationType.class, id);
		if (applicationType == null) {
			applicationType = new ApplicationType();
			applicationType.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return applicationType;
	}

	protected ApplicationTypeCommand getApplicationTypeCommand(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		ApplicationTypeCommand applicationTypeCommand = (ApplicationTypeCommand) OAObjectCacheDelegate
				.getObject(ApplicationTypeCommand.class, id);
		if (applicationTypeCommand == null) {
			applicationTypeCommand = new ApplicationTypeCommand();
			applicationTypeCommand.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return applicationTypeCommand;
	}

	protected ApplicationVersion getApplicationVersion(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		ApplicationVersion applicationVersion = (ApplicationVersion) OAObjectCacheDelegate.getObject(ApplicationVersion.class, id);
		if (applicationVersion == null) {
			applicationVersion = new ApplicationVersion();
			applicationVersion.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return applicationVersion;
	}

	protected Command getCommand(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Command command = (Command) OAObjectCacheDelegate.getObject(Command.class, id);
		if (command == null) {
			command = new Command();
			command.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return command;
	}

	protected Developer getDeveloper(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Developer developer = (Developer) OAObjectCacheDelegate.getObject(Developer.class, id);
		if (developer == null) {
			developer = new Developer();
			developer.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return developer;
	}

	protected Environment getEnvironment(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Environment environment = (Environment) OAObjectCacheDelegate.getObject(Environment.class, id);
		if (environment == null) {
			environment = new Environment();
			environment.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return environment;
	}

	protected EnvironmentType getEnvironmentType(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		EnvironmentType environmentType = (EnvironmentType) OAObjectCacheDelegate.getObject(EnvironmentType.class, id);
		if (environmentType == null) {
			environmentType = new EnvironmentType();
			environmentType.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return environmentType;
	}

	protected HostInfo getHostInfo(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		HostInfo hostInfo = (HostInfo) OAObjectCacheDelegate.getObject(HostInfo.class, id);
		if (hostInfo == null) {
			hostInfo = new HostInfo();
			hostInfo.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return hostInfo;
	}

	protected IDL getIDL(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		IDL iDL = (IDL) OAObjectCacheDelegate.getObject(IDL.class, id);
		if (iDL == null) {
			iDL = new IDL();
			iDL.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return iDL;
	}

	protected MRADClient getMRADClient(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		MRADClient mRADClient = (MRADClient) OAObjectCacheDelegate.getObject(MRADClient.class, id);
		if (mRADClient == null) {
			mRADClient = new MRADClient();
			mRADClient.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return mRADClient;
	}

	protected MRADClientCommand getMRADClientCommand(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		MRADClientCommand mRADClientCommand = (MRADClientCommand) OAObjectCacheDelegate.getObject(MRADClientCommand.class, id);
		if (mRADClientCommand == null) {
			mRADClientCommand = new MRADClientCommand();
			mRADClientCommand.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return mRADClientCommand;
	}

	protected MRADClientMessage getMRADClientMessage(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		MRADClientMessage mRADClientMessage = (MRADClientMessage) OAObjectCacheDelegate.getObject(MRADClientMessage.class, id);
		if (mRADClientMessage == null) {
			mRADClientMessage = new MRADClientMessage();
			mRADClientMessage.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return mRADClientMessage;
	}

	protected MRADServer getMRADServer(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		MRADServer mRADServer = (MRADServer) OAObjectCacheDelegate.getObject(MRADServer.class, id);
		if (mRADServer == null) {
			mRADServer = new MRADServer();
			mRADServer.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return mRADServer;
	}

	protected MRADServerCommand getMRADServerCommand(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		MRADServerCommand mRADServerCommand = (MRADServerCommand) OAObjectCacheDelegate.getObject(MRADServerCommand.class, id);
		if (mRADServerCommand == null) {
			mRADServerCommand = new MRADServerCommand();
			mRADServerCommand.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return mRADServerCommand;
	}

	protected OperatingSystem getOperatingSystem(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		OperatingSystem operatingSystem = (OperatingSystem) OAObjectCacheDelegate.getObject(OperatingSystem.class, id);
		if (operatingSystem == null) {
			operatingSystem = new OperatingSystem();
			operatingSystem.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return operatingSystem;
	}

	protected OSVersion getOSVersion(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		OSVersion oSVersion = (OSVersion) OAObjectCacheDelegate.getObject(OSVersion.class, id);
		if (oSVersion == null) {
			oSVersion = new OSVersion();
			oSVersion.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return oSVersion;
	}

	protected PackageType getPackageType(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		PackageType packageType = (PackageType) OAObjectCacheDelegate.getObject(PackageType.class, id);
		if (packageType == null) {
			packageType = new PackageType();
			packageType.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return packageType;
	}

	protected PackageVersion getPackageVersion(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		PackageVersion packageVersion = (PackageVersion) OAObjectCacheDelegate.getObject(PackageVersion.class, id);
		if (packageVersion == null) {
			packageVersion = new PackageVersion();
			packageVersion.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return packageVersion;
	}

	protected Server getServer(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Server server = (Server) OAObjectCacheDelegate.getObject(Server.class, id);
		if (server == null) {
			server = new Server();
			server.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return server;
	}

	protected Silo getSilo(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Silo silo = (Silo) OAObjectCacheDelegate.getObject(Silo.class, id);
		if (silo == null) {
			silo = new Silo();
			silo.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return silo;
	}

	protected SiloConfig getSiloConfig(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		SiloConfig siloConfig = (SiloConfig) OAObjectCacheDelegate.getObject(SiloConfig.class, id);
		if (siloConfig == null) {
			siloConfig = new SiloConfig();
			siloConfig.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return siloConfig;
	}

	protected SiloConfigVersioin getSiloConfigVersioin(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		SiloConfigVersioin siloConfigVersioin = (SiloConfigVersioin) OAObjectCacheDelegate.getObject(SiloConfigVersioin.class, id);
		if (siloConfigVersioin == null) {
			siloConfigVersioin = new SiloConfigVersioin();
			siloConfigVersioin.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return siloConfigVersioin;
	}

	protected SiloType getSiloType(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		SiloType siloType = (SiloType) OAObjectCacheDelegate.getObject(SiloType.class, id);
		if (siloType == null) {
			siloType = new SiloType();
			siloType.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return siloType;
	}

	protected Site getSite(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Site site = (Site) OAObjectCacheDelegate.getObject(Site.class, id);
		if (site == null) {
			site = new Site();
			site.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return site;
	}

	protected SSHExecute getSSHExecute(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		SSHExecute sSHExecute = (SSHExecute) OAObjectCacheDelegate.getObject(SSHExecute.class, id);
		if (sSHExecute == null) {
			sSHExecute = new SSHExecute();
			sSHExecute.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return sSHExecute;
	}

	protected Timezone getTimezone(ResultSet rs, DataAccessObject.ResultSetInfo rsi) throws SQLException {
		int id = rs.getInt(1);
		Timezone timezone = (Timezone) OAObjectCacheDelegate.getObject(Timezone.class, id);
		if (timezone == null) {
			timezone = new Timezone();
			timezone.load(rs, id);
		} else {
			rsi.setFoundInCache(true);
		}
		return timezone;
	}
}

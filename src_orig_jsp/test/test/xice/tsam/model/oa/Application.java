// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;

import test.xice.tsam.model.oa.Application;
import test.xice.tsam.model.oa.ApplicationGroup;
import test.xice.tsam.model.oa.ApplicationStatus;
import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.ApplicationVersion;
import test.xice.tsam.model.oa.MRADClient;
import test.xice.tsam.model.oa.Server;
import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "app",
    displayName = "Application",
    displayProperty = "applicationType"
)
@OATable(
    indexes = {
        @OAIndex(name = "ApplicationServer", columns = { @OAIndexColumn(name = "ServerId") })
    }
)
public class Application extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Application.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_InstanceNumber = "InstanceNumber";
    public static final String P_InstanceNumber = "InstanceNumber";
    public static final String PROPERTY_TradingSystemId = "TradingSystemId";
    public static final String P_TradingSystemId = "TradingSystemId";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_UserId = "UserId";
    public static final String P_UserId = "UserId";
    public static final String PROPERTY_ShowInMRAD = "ShowInMRAD";
    public static final String P_ShowInMRAD = "ShowInMRAD";
     
    public static final String PROPERTY_Autocomplete = "Autocomplete";
    public static final String P_Autocomplete = "Autocomplete";
     
    public static final String PROPERTY_ApplicationStatus = "ApplicationStatus";
    public static final String P_ApplicationStatus = "ApplicationStatus";
    public static final String PROPERTY_ApplicationType = "ApplicationType";
    public static final String P_ApplicationType = "ApplicationType";
    public static final String PROPERTY_ApplicationVersions = "ApplicationVersions";
    public static final String P_ApplicationVersions = "ApplicationVersions";
    public static final String PROPERTY_ExcludeApplicationGroups = "ExcludeApplicationGroups";
    public static final String P_ExcludeApplicationGroups = "ExcludeApplicationGroups";
    public static final String PROPERTY_IncludeApplicationGroups = "IncludeApplicationGroups";
    public static final String P_IncludeApplicationGroups = "IncludeApplicationGroups";
    public static final String PROPERTY_MRADClient = "MRADClient";
    public static final String P_MRADClient = "MRADClient";
    public static final String PROPERTY_SelectedApplicationGroups = "SelectedApplicationGroups";
    public static final String P_SelectedApplicationGroups = "SelectedApplicationGroups";
    public static final String PROPERTY_Server = "Server";
    public static final String P_Server = "Server";
     
    protected int id;
    protected int instanceNumber;
    protected int tradingSystemId;
    protected String name;
    protected String userId;
    protected boolean showInMRAD;
     
    // Links to other objects.
    protected transient ApplicationStatus applicationStatus;
    protected transient ApplicationType applicationType;
    protected transient Hub<ApplicationVersion> hubApplicationVersions;
    protected transient Server server;
     
    public Application() {
        if (!isLoading()) {
            setShowInMRAD(true);
        }
    }
     
    public Application(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(displayName = "Instance Number", displayLength = 3, columnLength = 2)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getInstanceNumber() {
        return instanceNumber;
    }
    public void setInstanceNumber(int newValue) {
        fireBeforePropertyChange(P_InstanceNumber, this.instanceNumber, newValue);
        int old = instanceNumber;
        this.instanceNumber = newValue;
        firePropertyChange(P_InstanceNumber, old, this.instanceNumber);
    }
    
    @OAProperty(displayName = "Trading System Id", displayLength = 4)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getTradingSystemId() {
        return tradingSystemId;
    }
    public void setTradingSystemId(int newValue) {
        fireBeforePropertyChange(P_TradingSystemId, this.tradingSystemId, newValue);
        int old = tradingSystemId;
        this.tradingSystemId = newValue;
        firePropertyChange(P_TradingSystemId, old, this.tradingSystemId);
    }
    
    @OAProperty(maxLength = 55, displayLength = 12)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
    @OAProperty(displayName = "User Id", maxLength = 25, displayLength = 12, columnLength = 10)
    @OAColumn(maxLength = 25)
    public String getUserId() {
        return userId;
    }
    public void setUserId(String newValue) {
        fireBeforePropertyChange(P_UserId, this.userId, newValue);
        String old = userId;
        this.userId = newValue;
        firePropertyChange(P_UserId, old, this.userId);
    }
    
    @OAProperty(displayName = "Show In MRAD", defaultValue = "true", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getShowInMRAD() {
        return showInMRAD;
    }
    public void setShowInMRAD(boolean newValue) {
        fireBeforePropertyChange(P_ShowInMRAD, this.showInMRAD, newValue);
        boolean old = showInMRAD;
        this.showInMRAD = newValue;
        firePropertyChange(P_ShowInMRAD, old, this.showInMRAD);
    }
    
    @OACalculatedProperty(displayLength = 10, properties = {P_Server+"."+Server.P_HostName, P_ApplicationType+"."+ApplicationType.P_Code})
    public String getAutocomplete() {
        String autocomplete = "";
        Server server = this.getServer();
        if (server != null) {
            String hostName = server.getHostName();
            if (hostName != null)  autocomplete += hostName;
        }
    
        // applicationType.code
        ApplicationType applicationType = this.getApplicationType();
        if (applicationType != null) {
            String code = applicationType.getCode();
            if (autocomplete.length() > 0) autocomplete += " ";
            autocomplete += "(" + code + ")";
        }
        return autocomplete;
    }
    
     
    @OAOne(
        displayName = "Application Status", 
        reverseName = ApplicationStatus.P_Applications, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationStatusId"})
    public ApplicationStatus getApplicationStatus() {
        if (applicationStatus == null) {
            applicationStatus = (ApplicationStatus) getObject(P_ApplicationStatus);
        }
        return applicationStatus;
    }
    
    public void setApplicationStatus(ApplicationStatus newValue) {
        fireBeforePropertyChange(P_ApplicationStatus, this.applicationStatus, newValue);
        ApplicationStatus old = this.applicationStatus;
        this.applicationStatus = newValue;
        firePropertyChange(P_ApplicationStatus, old, this.applicationStatus);
    }
    
    @OAOne(
        displayName = "Application Type", 
        reverseName = ApplicationType.P_Applications, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationTypeId"})
    public ApplicationType getApplicationType() {
        if (applicationType == null) {
            applicationType = (ApplicationType) getObject(P_ApplicationType);
        }
        return applicationType;
    }
    
    public void setApplicationType(ApplicationType newValue) {
        fireBeforePropertyChange(P_ApplicationType, this.applicationType, newValue);
        ApplicationType old = this.applicationType;
        this.applicationType = newValue;
        firePropertyChange(P_ApplicationType, old, this.applicationType);
    }
    
    @OAMany(
        displayName = "Application Versions", 
        toClass = ApplicationVersion.class, 
        owner = true, 
        reverseName = ApplicationVersion.P_Application, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (Application.P_ApplicationType+"."+ApplicationType.P_PackageTypes), 
        matchProperty = ApplicationVersion.P_PackageType
    )
    public Hub<ApplicationVersion> getApplicationVersions() {
        if (hubApplicationVersions == null) {
            hubApplicationVersions = (Hub<ApplicationVersion>) getHub(P_ApplicationVersions);
        }
        return hubApplicationVersions;
    }
    
    @OAMany(
        displayName = "Exclude Application Groups", 
        toClass = ApplicationGroup.class, 
        reverseName = ApplicationGroup.P_ExcludeApplications, 
        createMethod = false
    )
    @OALinkTable(name = "ApplicationGroupExcludeApplication", indexName = "ApplicationGroupExcludeApplication", columns = {"ApplicationId"})
    private Hub<ApplicationGroup> getExcludeApplicationGroups() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Include Application Groups", 
        toClass = ApplicationGroup.class, 
        reverseName = ApplicationGroup.P_IncludeApplications, 
        createMethod = false
    )
    @OALinkTable(name = "ApplicationGroupIncludeApplication", indexName = "ApplicationGroupIncludeApplication", columns = {"ApplicationId"})
    private Hub<ApplicationGroup> getIncludeApplicationGroups() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "MRAD Client", 
        reverseName = MRADClient.P_Application, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private MRADClient getMRADClient() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAMany(
        displayName = "Selected Application Groups", 
        toClass = ApplicationGroup.class, 
        isCalculated = true, 
        reverseName = ApplicationGroup.P_SelectedApplications, 
        createMethod = false
    )
    private Hub<ApplicationGroup> getSelectedApplicationGroups() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        reverseName = Server.P_Applications, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ServerId"})
    public Server getServer() {
        if (server == null) {
            server = (Server) getObject(P_Server);
        }
        return server;
    }
    
    public void setServer(Server newValue) {
        fireBeforePropertyChange(P_Server, this.server, newValue);
        Server old = this.server;
        this.server = newValue;
        firePropertyChange(P_Server, old, this.server);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.instanceNumber = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_InstanceNumber, true);
        }
        this.tradingSystemId = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_TradingSystemId, true);
        }
        this.name = rs.getString(4);
        this.userId = rs.getString(5);
        this.showInMRAD = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Application.P_ShowInMRAD, true);
        }
        int applicationStatusFkey = rs.getInt(7);
        if (!rs.wasNull() && applicationStatusFkey > 0) {
            setProperty(P_ApplicationStatus, new OAObjectKey(applicationStatusFkey));
        }
        int applicationTypeFkey = rs.getInt(8);
        if (!rs.wasNull() && applicationTypeFkey > 0) {
            setProperty(P_ApplicationType, new OAObjectKey(applicationTypeFkey));
        }
        int serverFkey = rs.getInt(9);
        if (!rs.wasNull() && serverFkey > 0) {
            setProperty(P_Server, new OAObjectKey(serverFkey));
        }
        if (rs.getMetaData().getColumnCount() != 9) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

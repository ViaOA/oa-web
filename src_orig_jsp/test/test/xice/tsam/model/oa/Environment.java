// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import test.xice.tsam.delegate.oa.EnvironmentTypeDelegate;
import test.xice.tsam.model.oa.Environment;
import test.xice.tsam.model.oa.EnvironmentType;
import test.xice.tsam.model.oa.IDL;
import test.xice.tsam.model.oa.Silo;
import test.xice.tsam.model.oa.Site;
import com.viaoa.annotation.*;

import java.awt.Color;
import com.viaoa.util.OAConverter;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
 
@OAClass(
    shortName = "env",
    displayName = "Environment",
    displayProperty = "name",
    rootTreePropertyPaths = {
        "[Site]."+Site.P_Environments
    }
)
@OATable(
    indexes = {
        @OAIndex(name = "EnvironmentIdL", columns = { @OAIndexColumn(name = "IdLId") }), 
        @OAIndex(name = "EnvironmentSite", columns = { @OAIndexColumn(name = "SiteId") })
    }
)
public class Environment extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Environment.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_AbbrevName = "AbbrevName";
    public static final String P_AbbrevName = "AbbrevName";
    public static final String PROPERTY_TEAbbrevName = "TEAbbrevName";
    public static final String P_TEAbbrevName = "TEAbbrevName";
    public static final String PROPERTY_CEAbbrevName = "CEAbbrevName";
    public static final String P_CEAbbrevName = "CEAbbrevName";
    public static final String PROPERTY_UsesDNS = "UsesDNS";
    public static final String P_UsesDNS = "UsesDNS";
    public static final String PROPERTY_UsesFirewall = "UsesFirewall";
    public static final String P_UsesFirewall = "UsesFirewall";
    public static final String PROPERTY_UsesVip = "UsesVip";
    public static final String P_UsesVip = "UsesVip";
    public static final String PROPERTY_ColorCode = "ColorCode";
    public static final String P_ColorCode = "ColorCode";
     
     
    public static final String PROPERTY_EnvironmentType = "EnvironmentType";
    public static final String P_EnvironmentType = "EnvironmentType";
    public static final String PROPERTY_IDL = "IDL";
    public static final String P_IDL = "IDL";
    public static final String PROPERTY_Silos = "Silos";
    public static final String P_Silos = "Silos";
    public static final String PROPERTY_Site = "Site";
    public static final String P_Site = "Site";
     
    public static final String METHOD_EnvImport = "EnvImport";
    public static final String M_EnvImport = "EnvImport";
    public static final String METHOD_EnvExport = "EnvExport";
    public static final String M_EnvExport = "EnvExport";
    public static final String METHOD_MradminImport = "MradminImport";
    public static final String M_MradminImport = "MradminImport";
    protected int id;
    protected String name;
    protected String abbrevName;
    protected String teAbbrevName;
    protected String ceAbbrevName;
    protected boolean usesDNS;
    protected boolean usesFirewall;
    protected boolean usesVip;
    protected Color colorCode;
     
    // Links to other objects.
    protected transient EnvironmentType environmentType;
    protected transient IDL idL;
    // protected transient Hub<Silo> hubSilos;
    protected transient Site site;
     
    public Environment() {
    }
     
    public Environment(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(maxLength = 35, displayLength = 10, columnLength = 8)
    @OAColumn(maxLength = 35)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
    @OAProperty(displayName = "Abbrev Name", maxLength = 15, displayLength = 5, columnLength = 4)
    @OAColumn(maxLength = 15)
    public String getAbbrevName() {
        return abbrevName;
    }
    public void setAbbrevName(String newValue) {
        fireBeforePropertyChange(P_AbbrevName, this.abbrevName, newValue);
        String old = abbrevName;
        this.abbrevName = newValue;
        firePropertyChange(P_AbbrevName, old, this.abbrevName);
    }
    
    @OAProperty(displayName = "TE Abbrev Name", maxLength = 15, displayLength = 5, columnLength = 4)
    @OAColumn(name = "AbbrevName", maxLength = 15)
    public String getTEAbbrevName() {
        if (OAString.isEmpty(teAbbrevName)) {
            teAbbrevName = EnvironmentTypeDelegate.getDefaultTEAbbrevName(getEnvironmentType());
        }
        return teAbbrevName;
    }
    
    public void setTEAbbrevName(String newValue) {
        fireBeforePropertyChange(P_TEAbbrevName, this.teAbbrevName, newValue);
        String old = teAbbrevName;
        this.teAbbrevName = newValue;
        firePropertyChange(P_TEAbbrevName, old, this.teAbbrevName);
    }
    @OAProperty(displayName = "CE Abbrev Name", maxLength = 15, displayLength = 5, columnLength = 4)
    @OAColumn(name = "AbbrevName", maxLength = 15)
    public String getCEAbbrevName() {
        if (OAString.isEmpty(ceAbbrevName)) {
            ceAbbrevName = EnvironmentTypeDelegate.getDefaultCEAbbrevName(getEnvironmentType());
        }
        return ceAbbrevName;
    }
    
    public void setCEAbbrevName(String newValue) {
        fireBeforePropertyChange(P_CEAbbrevName, this.ceAbbrevName, newValue);
        String old = ceAbbrevName;
        this.ceAbbrevName = newValue;
        firePropertyChange(P_CEAbbrevName, old, this.ceAbbrevName);
    }
    @OAProperty(displayName = "Uses DNS", displayLength = 5)
    @OAColumn(name = "HasDNS", sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesDNS() {
        return usesDNS;
    }
    public void setUsesDNS(boolean newValue) {
        fireBeforePropertyChange(P_UsesDNS, this.usesDNS, newValue);
        boolean old = usesDNS;
        this.usesDNS = newValue;
        firePropertyChange(P_UsesDNS, old, this.usesDNS);
    }
    
    @OAProperty(displayName = "Uses Firewall", displayLength = 5)
    @OAColumn(name = "HasFirewall", sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesFirewall() {
        return usesFirewall;
    }
    public void setUsesFirewall(boolean newValue) {
        fireBeforePropertyChange(P_UsesFirewall, this.usesFirewall, newValue);
        boolean old = usesFirewall;
        this.usesFirewall = newValue;
        firePropertyChange(P_UsesFirewall, old, this.usesFirewall);
    }
    
    @OAProperty(displayName = "Uses VIP", displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getUsesVip() {
        return usesVip;
    }
    public void setUsesVip(boolean newValue) {
        fireBeforePropertyChange(P_UsesVip, this.usesVip, newValue);
        boolean old = usesVip;
        this.usesVip = newValue;
        firePropertyChange(P_UsesVip, old, this.usesVip);
    }
    
    @OAProperty(displayName = "Color Code", displayLength = 4, columnLength = 5)
    @OAColumn(maxLength = 16)
    public Color getColorCode() {
        return colorCode;
    }
    public void setColorCode(Color newValue) {
        fireBeforePropertyChange(P_ColorCode, this.colorCode, newValue);
        Color old = colorCode;
        this.colorCode = newValue;
        firePropertyChange(P_ColorCode, old, this.colorCode);
    }
    
    @OAOne(
        displayName = "Environment Type", 
        reverseName = EnvironmentType.P_Environments, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"EnvironmentTypeId"})
    public EnvironmentType getEnvironmentType() {
        if (environmentType == null) {
            environmentType = (EnvironmentType) getObject(P_EnvironmentType);
        }
        return environmentType;
    }
    
    public void setEnvironmentType(EnvironmentType newValue) {
        fireBeforePropertyChange(P_EnvironmentType, this.environmentType, newValue);
        EnvironmentType old = this.environmentType;
        this.environmentType = newValue;
        firePropertyChange(P_EnvironmentType, old, this.environmentType);
    }
    
    @OAOne(
        reverseName = IDL.P_Environments, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"IdLId"})
    public IDL getIDL() {
        if (idL == null) {
            idL = (IDL) getObject(P_IDL);
        }
        return idL;
    }
    
    public void setIDL(IDL newValue) {
        fireBeforePropertyChange(P_IDL, this.idL, newValue);
        IDL old = this.idL;
        this.idL = newValue;
        firePropertyChange(P_IDL, old, this.idL);
    }
    
    @OAMany(
        toClass = Silo.class, 
        owner = true, 
        cacheSize = 100, 
        reverseName = Silo.P_Environment, 
        cascadeSave = true, 
        cascadeDelete = true, 
        uniqueProperty = Silo.P_SiloType
    )
    public Hub<Silo> getSilos() {
        Hub<Silo> hubSilos;
        {
            hubSilos = (Hub<Silo>) getHub(P_Silos);
        }
        return hubSilos;
    }
    
    @OAOne(
        reverseName = Site.P_Environments, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SiteId"})
    public Site getSite() {
        if (site == null) {
            site = (Site) getObject(P_Site);
        }
        return site;
    }
    
    public void setSite(Site newValue) {
        fireBeforePropertyChange(P_Site, this.site, newValue);
        Site old = this.site;
        this.site = newValue;
        firePropertyChange(P_Site, old, this.site);
    }
    
    // envImport - import list of servers from an XML file
    public void envImport() {
            //EnvironmentDelegate.envImport(this);
    }
     
    // envExport - save list of servers in an XML file
    public void envExport() {
        //EnvironmentDelegate.envExport(this);
    }
     
    // mradminImport - Import MRAdmin xml file
    public void mradminImport() {
        //EnvironmentDelegate.mradminImport(this);
    }
     
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.abbrevName = rs.getString(3);
        this.teAbbrevName = rs.getString(4);
        this.ceAbbrevName = rs.getString(5);
        this.usesDNS = rs.getBoolean(6);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Environment.P_UsesDNS, true);
        }
        this.usesFirewall = rs.getBoolean(7);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Environment.P_UsesFirewall, true);
        }
        this.usesVip = rs.getBoolean(8);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Environment.P_UsesVip, true);
        }
        this.colorCode = (Color) OAConverter.convert(Color.class, rs.getString(9));
        int environmentTypeFkey = rs.getInt(10);
        if (!rs.wasNull() && environmentTypeFkey > 0) {
            setProperty(P_EnvironmentType, new OAObjectKey(environmentTypeFkey));
        }
        int idLFkey = rs.getInt(11);
        if (!rs.wasNull() && idLFkey > 0) {
            setProperty(P_IDL, new OAObjectKey(idLFkey));
        }
        int siteFkey = rs.getInt(12);
        if (!rs.wasNull() && siteFkey > 0) {
            setProperty(P_Site, new OAObjectKey(siteFkey));
        }
        if (rs.getMetaData().getColumnCount() != 12) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

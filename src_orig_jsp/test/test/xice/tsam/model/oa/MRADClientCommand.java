// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import test.xice.tsam.model.oa.MRADClient;
import test.xice.tsam.model.oa.MRADClientCommand;
import test.xice.tsam.model.oa.MRADServerCommand;
import test.xice.tsam.model.oa.SSHExecute;
import com.viaoa.annotation.*;
import com.viaoa.sync.OASync;
import com.viaoa.util.OADateTime;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
 
@OAClass(
    shortName = "mradcc",
    displayName = "MRAD Client Command",
    displayProperty = "mradServerCommand"
)
@OATable(
    indexes = {
        @OAIndex(name = "MRADClientCommandMradClient", columns = { @OAIndexColumn(name = "MradClientId") }), 
        @OAIndex(name = "MRADClientCommandMradServerCommand", columns = { @OAIndexColumn(name = "MradServerCommandId") })
    }
)
public class MRADClientCommand extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MRADClientCommand.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_Ended = "Ended";
    public static final String P_Ended = "Ended";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
     
    public static final String PROPERTY_Success = "Success";
    public static final String P_Success = "Success";
     
    public static final String PROPERTY_MRADClient = "MRADClient";
    public static final String P_MRADClient = "MRADClient";
    public static final String PROPERTY_MRADClient2 = "MRADClient2";
    public static final String P_MRADClient2 = "MRADClient2";
    public static final String PROPERTY_MRADServerCommand = "MRADServerCommand";
    public static final String P_MRADServerCommand = "MRADServerCommand";
    public static final String PROPERTY_SSHExecute = "SSHExecute";
    public static final String P_SSHExecute = "SSHExecute";
     
    protected int id;
    protected OADateTime created;
    protected OADateTime started;
    protected OADateTime ended;
    protected String error;
     
    // Links to other objects.
    protected transient MRADClient mradClient;
    protected transient MRADClient mradClient2;
    protected transient MRADServerCommand mradServerCommand;
    protected transient SSHExecute sshExecute;
     
    public MRADClientCommand() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public MRADClientCommand(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(displayName = "Status date/time", defaultValue = "new OADateTime()", displayLength = 12, columnLength = 10, isProcessed = true)
    @OAColumn(name = "DtStatus", sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
    @OAProperty(displayLength = 12)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        fireBeforePropertyChange(P_Started, this.started, newValue);
        OADateTime old = started;
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    
    @OAProperty(displayLength = 12, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getEnded() {
        return ended;
    }
    public void setEnded(OADateTime newValue) {
        fireBeforePropertyChange(P_Ended, this.ended, newValue);
        OADateTime old = ended;
        this.ended = newValue;
        firePropertyChange(P_Ended, old, this.ended);
    }
    
    @OAProperty(maxLength = 175, displayLength = 20, columnLength = 15, isProcessed = true)
    @OAColumn(maxLength = 175)
    public String getError() {
        return error;
    }
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    
    @OACalculatedProperty(displayLength = 5, properties = {P_Started, P_Ended, P_SSHExecute+"."+SSHExecute.P_Successful, P_SSHExecute+"."+SSHExecute.P_Completed})
    public boolean getSuccess() {
        boolean success = false;
        
        SSHExecute sshExecute = this.getSSHExecute();
        if (sshExecute == null) {
            return OAString.isEmpty(getError()) && this.getEnded() != null;
        }
        return sshExecute.getSuccessful();
    }
     
    @OAOne(
        displayName = "MRAD Client", 
        reverseName = MRADClient.P_MRADClientCommands, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MradClientId"})
    public MRADClient getMRADClient() {
        if (mradClient == null) {
            mradClient = (MRADClient) getObject(P_MRADClient);
        }
        return mradClient;
    }
    
    public void setMRADClient(MRADClient newValue) {
        fireBeforePropertyChange(P_MRADClient, this.mradClient, newValue);
        MRADClient old = this.mradClient;
        this.mradClient = newValue;
        firePropertyChange(P_MRADClient, old, this.mradClient);
    }
    
    @OAOne(
        displayName = "MRAD Client", 
        isCalculated = true, 
        reverseName = MRADClient.P_LastMRADClientCommand
    )
    public MRADClient getMRADClient2() {
        if (mradClient2 == null) {
            mradClient2 = (MRADClient) getObject(P_MRADClient2);
        }
        return mradClient2;
    }
    
    public void setMRADClient2(MRADClient newValue) {
        fireBeforePropertyChange(P_MRADClient2, this.mradClient2, newValue);
        MRADClient old = this.mradClient2;
        this.mradClient2 = newValue;
        firePropertyChange(P_MRADClient2, old, this.mradClient2);
    }
    
    @OAOne(
        displayName = "MRAD Server Command", 
        reverseName = MRADServerCommand.P_MRADClientCommands, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"MradServerCommandId"})
    public MRADServerCommand getMRADServerCommand() {
        if (mradServerCommand == null) {
            mradServerCommand = (MRADServerCommand) getObject(P_MRADServerCommand);
        }
        return mradServerCommand;
    }
    
    public void setMRADServerCommand(MRADServerCommand newValue) {
        fireBeforePropertyChange(P_MRADServerCommand, this.mradServerCommand, newValue);
        MRADServerCommand old = this.mradServerCommand;
        this.mradServerCommand = newValue;
        firePropertyChange(P_MRADServerCommand, old, this.mradServerCommand);
    }
    
    @OAOne(
        displayName = "SSH Execute", 
        reverseName = SSHExecute.P_MRADClientCommand
    )
    @OAFkey(columns = {"SshExecuteId"})
    public SSHExecute getSSHExecute() {
        if (sshExecute == null) {
            sshExecute = (SSHExecute) getObject(P_SSHExecute);
        }
        return sshExecute;
    }
    
    public void setSSHExecute(SSHExecute newValue) {
        fireBeforePropertyChange(P_SSHExecute, this.sshExecute, newValue);
        SSHExecute old = this.sshExecute;
        this.sshExecute = newValue;
        firePropertyChange(P_SSHExecute, old, this.sshExecute);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(3);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(4);
        if (timestamp != null) this.ended = new OADateTime(timestamp);
        this.error = rs.getString(5);
        int mradClientFkey = rs.getInt(6);
        if (!rs.wasNull() && mradClientFkey > 0) {
            setProperty(P_MRADClient, new OAObjectKey(mradClientFkey));
        }
        int mradServerCommandFkey = rs.getInt(7);
        if (!rs.wasNull() && mradServerCommandFkey > 0) {
            setProperty(P_MRADServerCommand, new OAObjectKey(mradServerCommandFkey));
        }
        int sshExecuteFkey = rs.getInt(8);
        if (!rs.wasNull() && sshExecuteFkey > 0) {
            setProperty(P_SSHExecute, new OAObjectKey(sshExecuteFkey));
        }
        if (rs.getMetaData().getColumnCount() != 8) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

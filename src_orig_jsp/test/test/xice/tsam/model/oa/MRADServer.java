// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsam.delegate.ModelDelegate;
import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;
import test.xice.tsam.model.oa.trigger.*;
import test.xice.tsam.remote.RemoteMRADInterface;

import test.xice.tsam.model.oa.MRADClient;
import test.xice.tsam.model.oa.MRADServer;
import test.xice.tsam.model.oa.MRADServerCommand;
import test.xice.tsam.model.oa.Server;
import test.xice.tsam.model.oa.Silo;
import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "mrads",
    displayName = "App Manager",
    displayProperty = "silo"
)
@OATable(
    indexes = {
        @OAIndex(name = "MRADServerSilo", columns = { @OAIndexColumn(name = "SiloId") })
    }
)
public class MRADServer extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MRADServer.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Console = "Console";
    public static final String P_Console = "Console";
    public static final String PROPERTY_TEConsole = "TEConsole";
    public static final String P_TEConsole = "TEConsole";
    public static final String PROPERTY_CEConsole = "CEConsole";
    public static final String P_CEConsole = "CEConsole";
     
     
    public static final String PROPERTY_MRADClients = "MRADClients";
    public static final String P_MRADClients = "MRADClients";
    public static final String PROPERTY_MRADServerCommands = "MRADServerCommands";
    public static final String P_MRADServerCommands = "MRADServerCommands";
    public static final String PROPERTY_Silo = "Silo";
    public static final String P_Silo = "Silo";
     
    protected int id;
    protected String console;
    protected String teConsole;
    protected String ceConsole;
     
    // Links to other objects.
    protected transient Hub<MRADClient> hubMRADClients;
    protected transient Hub<MRADServerCommand> hubMRADServerCommands;
    protected transient Silo silo;
     
    public MRADServer() {
    }
     
    public MRADServer(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 5)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(maxLength = 155, displayLength = 20, columnLength = 15)
    public String getConsole() {
        return console;
    }
    public void setConsole(String newValue) {
        fireBeforePropertyChange(P_Console, this.console, newValue);
        String old = console;
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    
    @OAProperty(displayName = "TE Console", maxLength = 50, displayLength = 14)
    public String getTEConsole() {
        return teConsole;
    }
    public void setTEConsole(String newValue) {
        fireBeforePropertyChange(P_TEConsole, this.teConsole, newValue);
        String old = teConsole;
        this.teConsole = newValue;
        firePropertyChange(P_TEConsole, old, this.teConsole);
    }
    
    @OAProperty(displayName = "CE Console", maxLength = 50, displayLength = 14)
    public String getCEConsole() {
        return ceConsole;
    }
    public void setCEConsole(String newValue) {
        fireBeforePropertyChange(P_CEConsole, this.ceConsole, newValue);
        String old = ceConsole;
        this.ceConsole = newValue;
        firePropertyChange(P_CEConsole, old, this.ceConsole);
    }
    
    @OAMany(
        displayName = "MRAD Clients", 
        toClass = MRADClient.class, 
        owner = true, 
        reverseName = MRADClient.P_MRADServer, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (MRADServer.P_Silo+"."+Silo.P_Servers+"."+Server.P_Applications), 
        matchProperty = MRADClient.P_Application 
    )
    public Hub<MRADClient> getMRADClients() {
        if (hubMRADClients == null) {
            hubMRADClients = (Hub<MRADClient>) getHub(P_MRADClients);
        }
        return hubMRADClients;
    }
    
    @OAMany(
        displayName = "MRAD Server Commands", 
        toClass = MRADServerCommand.class, 
        owner = true, 
        reverseName = MRADServerCommand.P_MRADServer, 
        cascadeSave = true, 
        cascadeDelete = true
    )
    public Hub<MRADServerCommand> getMRADServerCommands() {
        if (hubMRADServerCommands == null) {
            hubMRADServerCommands = (Hub<MRADServerCommand>) getHub(P_MRADServerCommands);
        }
        return hubMRADServerCommands;
    }
    
    @OAOne(
        reverseName = Silo.P_MRADServer, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"SiloId"})
    public Silo getSilo() {
        if (silo == null) {
            silo = (Silo) getObject(P_Silo);
        }
        return silo;
    }
    
    public void setSilo(Silo newValue) {
        fireBeforePropertyChange(P_Silo, this.silo, newValue);
        Silo old = this.silo;
        this.silo = newValue;
        firePropertyChange(P_Silo, old, this.silo);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        int siloFkey = rs.getInt(2);
        if (!rs.wasNull() && siloFkey > 0) {
            setProperty(P_Silo, new OAObjectKey(siloFkey));
        }
        if (rs.getMetaData().getColumnCount() != 2) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import test.xice.tsam.model.oa.MRADClientCommand;
import test.xice.tsam.model.oa.MRADServerCommand;
import test.xice.tsam.model.oa.SSHExecute;
import com.viaoa.annotation.*;
import com.viaoa.util.OADateTime;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;

 
@OAClass(
    shortName = "sshe",
    displayName = "SSH Execute",
    displayProperty = "created"
)
@OATable(
    indexes = {
        @OAIndex(name = "SSHExecuteMradServerCommand", columns = { @OAIndexColumn(name = "MRADServerCommandId") })
    }
)
public class SSHExecute extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SSHExecute.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Created = "Created";
    public static final String P_Created = "Created";
    public static final String PROPERTY_HostName = "HostName";
    public static final String P_HostName = "HostName";
    public static final String PROPERTY_UserId = "UserId";
    public static final String P_UserId = "UserId";
    public static final String PROPERTY_SSHKeyFile = "SSHKeyFile";
    public static final String P_SSHKeyFile = "SSHKeyFile";
    public static final String PROPERTY_CommandLine = "CommandLine";
    public static final String P_CommandLine = "CommandLine";
    public static final String PROPERTY_Started = "Started";
    public static final String P_Started = "Started";
    public static final String PROPERTY_Connected = "Connected";
    public static final String P_Connected = "Connected";
    public static final String PROPERTY_Authenticated = "Authenticated";
    public static final String P_Authenticated = "Authenticated";
    public static final String PROPERTY_Completed = "Completed";
    public static final String P_Completed = "Completed";
    public static final String PROPERTY_Successful = "Successful";
    public static final String P_Successful = "Successful";
    public static final String PROPERTY_Output = "Output";
    public static final String P_Output = "Output";
    public static final String PROPERTY_Error = "Error";
    public static final String P_Error = "Error";
    public static final String PROPERTY_Console = "Console";
    public static final String P_Console = "Console";
     
     
    public static final String PROPERTY_MRADClientCommand = "MRADClientCommand";
    public static final String P_MRADClientCommand = "MRADClientCommand";
    public static final String PROPERTY_MRADServerCommand = "MRADServerCommand";
    public static final String P_MRADServerCommand = "MRADServerCommand";
     
    protected int id;
    protected OADateTime created;
    protected String hostName;
    protected String userId;
    protected String sshKeyFile;
    protected String commandLine;
    protected OADateTime started;
    protected OADateTime connected;
    protected OADateTime authenticated;
    protected OADateTime completed;
    protected boolean successful;
    protected String output;
    protected String error;
    protected String console;
     
    // Links to other objects.
    protected transient MRADServerCommand mradServerCommand;
     
    public SSHExecute() {
        if (!isLoading()) {
            setCreated(new OADateTime());
        }
    }
     
    public SSHExecute(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(defaultValue = "new OADateTime()", displayLength = 12)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCreated() {
        return created;
    }
    public void setCreated(OADateTime newValue) {
        fireBeforePropertyChange(P_Created, this.created, newValue);
        OADateTime old = created;
        this.created = newValue;
        firePropertyChange(P_Created, old, this.created);
    }
    
    @OAProperty(displayName = "Host Name", maxLength = 55, displayLength = 15, columnLength = 10)
    @OAColumn(maxLength = 55)
    public String getHostName() {
        return hostName;
    }
    public void setHostName(String newValue) {
        fireBeforePropertyChange(P_HostName, this.hostName, newValue);
        String old = hostName;
        this.hostName = newValue;
        firePropertyChange(P_HostName, old, this.hostName);
    }
    
    @OAProperty(displayName = "User Id", maxLength = 35, displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 35)
    public String getUserId() {
        return userId;
    }
    public void setUserId(String newValue) {
        fireBeforePropertyChange(P_UserId, this.userId, newValue);
        String old = userId;
        this.userId = newValue;
        firePropertyChange(P_UserId, old, this.userId);
    }
    
    @OAProperty(displayName = "SSH Key File", maxLength = 135, displayLength = 12, columnLength = 8)
    @OAColumn(maxLength = 135)
    public String getSSHKeyFile() {
        return sshKeyFile;
    }
    public void setSSHKeyFile(String newValue) {
        fireBeforePropertyChange(P_SSHKeyFile, this.sshKeyFile, newValue);
        String old = sshKeyFile;
        this.sshKeyFile = newValue;
        firePropertyChange(P_SSHKeyFile, old, this.sshKeyFile);
    }
    
    @OAProperty(displayName = "Command Line", maxLength = 500, displayLength = 18)
    @OAColumn(maxLength = 500)
    public String getCommandLine() {
        return commandLine;
    }
    public void setCommandLine(String newValue) {
        fireBeforePropertyChange(P_CommandLine, this.commandLine, newValue);
        String old = commandLine;
        this.commandLine = newValue;
        firePropertyChange(P_CommandLine, old, this.commandLine);
    }
    
    @OAProperty(displayLength = 12, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getStarted() {
        return started;
    }
    public void setStarted(OADateTime newValue) {
        fireBeforePropertyChange(P_Started, this.started, newValue);
        OADateTime old = started;
        this.started = newValue;
        firePropertyChange(P_Started, old, this.started);
    }
    
    @OAProperty(displayLength = 12)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getConnected() {
        return connected;
    }
    public void setConnected(OADateTime newValue) {
        fireBeforePropertyChange(P_Connected, this.connected, newValue);
        OADateTime old = connected;
        this.connected = newValue;
        firePropertyChange(P_Connected, old, this.connected);
    }
    
    @OAProperty(displayLength = 12)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getAuthenticated() {
        return authenticated;
    }
    public void setAuthenticated(OADateTime newValue) {
        fireBeforePropertyChange(P_Authenticated, this.authenticated, newValue);
        OADateTime old = authenticated;
        this.authenticated = newValue;
        firePropertyChange(P_Authenticated, old, this.authenticated);
    }
    
    @OAProperty(displayLength = 12, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.TIMESTAMP)
    public OADateTime getCompleted() {
        return completed;
    }
    public void setCompleted(OADateTime newValue) {
        fireBeforePropertyChange(P_Completed, this.completed, newValue);
        OADateTime old = completed;
        this.completed = newValue;
        firePropertyChange(P_Completed, old, this.completed);
    }
    
    @OAProperty(displayLength = 5)
    @OAColumn(sqlType = java.sql.Types.BOOLEAN)
    public boolean getSuccessful() {
        return successful;
    }
    public void setSuccessful(boolean newValue) {
        fireBeforePropertyChange(P_Successful, this.successful, newValue);
        boolean old = successful;
        this.successful = newValue;
        firePropertyChange(P_Successful, old, this.successful);
    }
    
    @OAProperty(maxLength = 6, displayLength = 30, columnLength = 18)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getOutput() {
        return output;
    }
    public void setOutput(String newValue) {
        fireBeforePropertyChange(P_Output, this.output, newValue);
        String old = output;
        this.output = newValue;
        firePropertyChange(P_Output, old, this.output);
    }
    
    @OAProperty(maxLength = 150, displayLength = 30, columnLength = 18, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.CLOB)
    public String getError() {
        return error;
    }
    public void setError(String newValue) {
        fireBeforePropertyChange(P_Error, this.error, newValue);
        String old = error;
        this.error = newValue;
        firePropertyChange(P_Error, old, this.error);
    }
    
    @OAProperty(maxLength = 800, displayLength = 20)
    public String getConsole() {
        return console;
    }
    public void setConsole(String newValue) {
        fireBeforePropertyChange(P_Console, this.console, newValue);
        String old = console;
        this.console = newValue;
        firePropertyChange(P_Console, old, this.console);
    }
    
    @OAOne(
        displayName = "MRAD Client Command", 
        reverseName = MRADClientCommand.P_SSHExecute, 
        allowCreateNew = false, 
        allowAddExisting = false
    )
    private MRADClientCommand getMRADClientCommand() {
        // oamodel has createMethod set to false, this method exists only for annotations.
        return null;
    }
    
    @OAOne(
        displayName = "MRAD Server Command", 
        reverseName = MRADServerCommand.P_SSHExecutes
    )
    @OAFkey(columns = {"MRADServerCommandId"})
    public MRADServerCommand getMRADServerCommand() {
        if (mradServerCommand == null) {
            mradServerCommand = (MRADServerCommand) getObject(P_MRADServerCommand);
        }
        return mradServerCommand;
    }
    
    public void setMRADServerCommand(MRADServerCommand newValue) {
        fireBeforePropertyChange(P_MRADServerCommand, this.mradServerCommand, newValue);
        MRADServerCommand old = this.mradServerCommand;
        this.mradServerCommand = newValue;
        firePropertyChange(P_MRADServerCommand, old, this.mradServerCommand);
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        java.sql.Timestamp timestamp;
        timestamp = rs.getTimestamp(2);
        if (timestamp != null) this.created = new OADateTime(timestamp);
        this.hostName = rs.getString(3);
        this.userId = rs.getString(4);
        this.sshKeyFile = rs.getString(5);
        this.commandLine = rs.getString(6);
        timestamp = rs.getTimestamp(7);
        if (timestamp != null) this.started = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(8);
        if (timestamp != null) this.connected = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(9);
        if (timestamp != null) this.authenticated = new OADateTime(timestamp);
        timestamp = rs.getTimestamp(10);
        if (timestamp != null) this.completed = new OADateTime(timestamp);
        this.successful = rs.getBoolean(11);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SSHExecute.P_Successful, true);
        }
        this.output = rs.getString(12);
        this.error = rs.getString(13);
        int mradServerCommandFkey = rs.getInt(14);
        if (!rs.wasNull() && mradServerCommandFkey > 0) {
            setProperty(P_MRADServerCommand, new OAObjectKey(mradServerCommandFkey));
        }
        if (rs.getMetaData().getColumnCount() != 14) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

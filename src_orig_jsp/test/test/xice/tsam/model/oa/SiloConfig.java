// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;

import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.Silo;
import test.xice.tsam.model.oa.SiloConfig;
import test.xice.tsam.model.oa.SiloConfigVersioin;
import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "sc",
    displayName = "Silo Config",
    displayProperty = "silo"
)
@OATable(
    indexes = {
        @OAIndex(name = "SiloConfigSilo", columns = { @OAIndexColumn(name = "SiloId") })
    }
)
public class SiloConfig extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(SiloConfig.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_MinCount = "MinCount";
    public static final String P_MinCount = "MinCount";
    public static final String PROPERTY_MaxCount = "MaxCount";
    public static final String P_MaxCount = "MaxCount";
     
     
    public static final String PROPERTY_ApplicationType = "ApplicationType";
    public static final String P_ApplicationType = "ApplicationType";
    public static final String PROPERTY_Silo = "Silo";
    public static final String P_Silo = "Silo";
    public static final String PROPERTY_SiloConfigVersioins = "SiloConfigVersioins";
    public static final String P_SiloConfigVersioins = "SiloConfigVersioins";
     
    protected int id;
    protected int minCount;
    protected int maxCount;
     
    // Links to other objects.
    protected transient ApplicationType applicationType;
    protected transient Silo silo;
    protected transient Hub<SiloConfigVersioin> hubSiloConfigVersioins;
     
    public SiloConfig() {
    }
     
    public SiloConfig(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(displayName = "Min Count", displayLength = 3)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getMinCount() {
        return minCount;
    }
    public void setMinCount(int newValue) {
        fireBeforePropertyChange(P_MinCount, this.minCount, newValue);
        int old = minCount;
        this.minCount = newValue;
        firePropertyChange(P_MinCount, old, this.minCount);
    }
    
    @OAProperty(displayName = "Max Count", displayLength = 3)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getMaxCount() {
        return maxCount;
    }
    public void setMaxCount(int newValue) {
        fireBeforePropertyChange(P_MaxCount, this.maxCount, newValue);
        int old = maxCount;
        this.maxCount = newValue;
        firePropertyChange(P_MaxCount, old, this.maxCount);
    }
    
    @OAOne(
        displayName = "Application Type", 
        reverseName = ApplicationType.P_SiloConfigs, 
        required = true, 
        allowCreateNew = false
    )
    @OAFkey(columns = {"ApplicationTypeId"})
    public ApplicationType getApplicationType() {
        if (applicationType == null) {
            applicationType = (ApplicationType) getObject(P_ApplicationType);
        }
        return applicationType;
    }
    
    public void setApplicationType(ApplicationType newValue) {
        fireBeforePropertyChange(P_ApplicationType, this.applicationType, newValue);
        ApplicationType old = this.applicationType;
        this.applicationType = newValue;
        firePropertyChange(P_ApplicationType, old, this.applicationType);
    }
    
    @OAOne(
        reverseName = Silo.P_SiloConfigs
    )
    @OAFkey(columns = {"SiloId"})
    public Silo getSilo() {
        if (silo == null) {
            silo = (Silo) getObject(P_Silo);
        }
        return silo;
    }
    
    public void setSilo(Silo newValue) {
        fireBeforePropertyChange(P_Silo, this.silo, newValue);
        Silo old = this.silo;
        this.silo = newValue;
        firePropertyChange(P_Silo, old, this.silo);
    }
    
    @OAMany(
        displayName = "Silo Config Versioins", 
        toClass = SiloConfigVersioin.class, 
        owner = true, 
        reverseName = SiloConfigVersioin.P_SiloConfig, 
        cascadeSave = true, 
        cascadeDelete = true, 
        matchHub = (SiloConfig.P_ApplicationType+"."+ApplicationType.P_PackageTypes), 
        matchProperty = SiloConfigVersioin.P_PackageType
    )
    public Hub<SiloConfigVersioin> getSiloConfigVersioins() {
        if (hubSiloConfigVersioins == null) {
            hubSiloConfigVersioins = (Hub<SiloConfigVersioin>) getHub(P_SiloConfigVersioins);
        }
        return hubSiloConfigVersioins;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.minCount = (int) rs.getInt(2);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SiloConfig.P_MinCount, true);
        }
        this.maxCount = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, SiloConfig.P_MaxCount, true);
        }
        int applicationTypeFkey = rs.getInt(4);
        if (!rs.wasNull() && applicationTypeFkey > 0) {
            setProperty(P_ApplicationType, new OAObjectKey(applicationTypeFkey));
        }
        int siloFkey = rs.getInt(5);
        if (!rs.wasNull() && siloFkey > 0) {
            setProperty(P_Silo, new OAObjectKey(siloFkey));
        }
        if (rs.getMetaData().getColumnCount() != 5) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

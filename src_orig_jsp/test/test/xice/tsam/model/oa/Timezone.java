// Generated by OABuilder
package test.xice.tsam.model.oa;
 
import java.util.logging.*;
import java.sql.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;

import test.xice.tsam.delegate.oa.*;
import test.xice.tsam.model.oa.filter.*;
import test.xice.tsam.model.oa.propertypath.*;

import test.xice.tsam.model.oa.Site;
import test.xice.tsam.model.oa.Timezone;
import com.viaoa.annotation.*;
 
@OAClass(
    shortName = "tz",
    displayName = "Time Zone",
    isLookup = true,
    isPreSelect = true,
    displayProperty = "displayName",
    sortProperty = "utcOffset"
)
@OATable(
)
public class Timezone extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(Timezone.class.getName());
    public static final String PROPERTY_Id = "Id";
    public static final String P_Id = "Id";
    public static final String PROPERTY_Name = "Name";
    public static final String P_Name = "Name";
    public static final String PROPERTY_UTCOffset = "UTCOffset";
    public static final String P_UTCOffset = "UTCOffset";
     
    public static final String PROPERTY_DisplayName = "DisplayName";
    public static final String P_DisplayName = "DisplayName";
     
    public static final String PROPERTY_Sites = "Sites";
    public static final String P_Sites = "Sites";
     
    protected int id;
    protected String name;
    protected int utcOffset;
     
    // Links to other objects.
    protected transient Hub<Site> hubSites;
     
    public Timezone() {
    }
     
    public Timezone(int id) {
        this();
        setId(id);
    }
     
    @OAProperty(isUnique = true, displayLength = 3, isProcessed = true)
    @OAId()
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    public int getId() {
        return id;
    }
    public void setId(int newValue) {
        fireBeforePropertyChange(P_Id, this.id, newValue);
        int old = id;
        this.id = newValue;
        firePropertyChange(P_Id, old, this.id);
    }
    
    @OAProperty(maxLength = 55, displayLength = 15, columnLength = 12, isProcessed = true)
    @OAColumn(maxLength = 55)
    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
    @OAProperty(displayName = "UTC Offset", description = "amount of hours between a timezone and UTC timezone", displayLength = 3, isProcessed = true)
    @OAColumn(sqlType = java.sql.Types.INTEGER)
    /**
      amount of hours between a timezone and UTC timezone
    */
    public int getUTCOffset() {
        return utcOffset;
    }
    public void setUTCOffset(int newValue) {
        fireBeforePropertyChange(P_UTCOffset, this.utcOffset, newValue);
        int old = utcOffset;
        this.utcOffset = newValue;
        firePropertyChange(P_UTCOffset, old, this.utcOffset);
    }
    
    @OACalculatedProperty(displayName = "Display Name", displayLength = 12, columnLength = 11, properties = {P_Name, P_UTCOffset})
    public String getDisplayName() {
        String displayName = "";
        name = this.getName();
        if (name != null) {
            if (displayName.length() > 0) displayName += " ";
            displayName += name;
        }
    
        // utcOffset
        utcOffset = this.getUTCOffset();
        if (displayName.length() > 0) displayName += " ";
        displayName += "("+utcOffset+")";
        return displayName;
    }
    
     
    @OAMany(
        toClass = Site.class, 
        reverseName = Site.P_Timezone
    )
    public Hub<Site> getSites() {
        if (hubSites == null) {
            hubSites = (Hub<Site>) getHub(P_Sites);
        }
        return hubSites;
    }
    
    public void load(ResultSet rs, int id) throws SQLException {
        this.id = id;
        this.name = rs.getString(2);
        this.utcOffset = (int) rs.getInt(3);
        if (rs.wasNull()) {
            OAObjectInfoDelegate.setPrimitiveNull(this, Timezone.P_UTCOffset, true);
        }
        if (rs.getMetaData().getColumnCount() != 3) {
            throw new SQLException("invalid number of columns for load method");
        }

        changedFlag = false;
        newFlag = false;
    }
}
 

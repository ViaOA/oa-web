// Generated by OABuilder
package test.xice.tsam.model.oa.propertypath;
 
import test.xice.tsam.model.oa.Application;
import test.xice.tsam.model.oa.propertypath.ApplicationGroupPPx;
import test.xice.tsam.model.oa.propertypath.ApplicationStatusPPx;
import test.xice.tsam.model.oa.propertypath.ApplicationTypePPx;
import test.xice.tsam.model.oa.propertypath.ApplicationVersionPPx;
import test.xice.tsam.model.oa.propertypath.MRADClientPPx;
import test.xice.tsam.model.oa.propertypath.ServerPPx;

import test.xice.tsam.model.oa.*;
 
public class ApplicationPP {
    private static ApplicationStatusPPx applicationStatus;
    private static ApplicationTypePPx applicationType;
    private static ApplicationVersionPPx applicationVersions;
    private static ApplicationGroupPPx excludeApplicationGroups;
    private static ApplicationGroupPPx includeApplicationGroups;
    private static MRADClientPPx mradClient;
    private static ApplicationGroupPPx selectedApplicationGroups;
    private static ServerPPx server;
     

    public static ApplicationStatusPPx applicationStatus() {
        if (applicationStatus == null) applicationStatus = new ApplicationStatusPPx(Application.P_ApplicationStatus);
        return applicationStatus;
    }

    public static ApplicationTypePPx applicationType() {
        if (applicationType == null) applicationType = new ApplicationTypePPx(Application.P_ApplicationType);
        return applicationType;
    }

    public static ApplicationVersionPPx applicationVersions() {
        if (applicationVersions == null) applicationVersions = new ApplicationVersionPPx(Application.P_ApplicationVersions);
        return applicationVersions;
    }

    public static ApplicationGroupPPx excludeApplicationGroups() {
        if (excludeApplicationGroups == null) excludeApplicationGroups = new ApplicationGroupPPx(Application.P_ExcludeApplicationGroups);
        return excludeApplicationGroups;
    }

    public static ApplicationGroupPPx includeApplicationGroups() {
        if (includeApplicationGroups == null) includeApplicationGroups = new ApplicationGroupPPx(Application.P_IncludeApplicationGroups);
        return includeApplicationGroups;
    }

    public static MRADClientPPx mradClient() {
        if (mradClient == null) mradClient = new MRADClientPPx(Application.P_MRADClient);
        return mradClient;
    }

    public static ApplicationGroupPPx selectedApplicationGroups() {
        if (selectedApplicationGroups == null) selectedApplicationGroups = new ApplicationGroupPPx(Application.P_SelectedApplicationGroups);
        return selectedApplicationGroups;
    }

    public static ServerPPx server() {
        if (server == null) server = new ServerPPx(Application.P_Server);
        return server;
    }

    public static String id() {
        String s = Application.P_Id;
        return s;
    }

    public static String instanceNumber() {
        String s = Application.P_InstanceNumber;
        return s;
    }

    public static String tradingSystemId() {
        String s = Application.P_TradingSystemId;
        return s;
    }

    public static String name() {
        String s = Application.P_Name;
        return s;
    }

    public static String userId() {
        String s = Application.P_UserId;
        return s;
    }

    public static String showInMRAD() {
        String s = Application.P_ShowInMRAD;
        return s;
    }

    public static String autocomplete() {
        String s = Application.P_Autocomplete;
        return s;
    }
}
 

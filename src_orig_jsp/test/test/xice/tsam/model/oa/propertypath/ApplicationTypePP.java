// Generated by OABuilder
package test.xice.tsam.model.oa.propertypath;
 
import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.propertypath.ApplicationGroupPPx;
import test.xice.tsam.model.oa.propertypath.ApplicationPPx;
import test.xice.tsam.model.oa.propertypath.ApplicationTypeCommandPPx;
import test.xice.tsam.model.oa.propertypath.DeveloperPPx;
import test.xice.tsam.model.oa.propertypath.PackageTypePPx;
import test.xice.tsam.model.oa.propertypath.SiloConfigPPx;
import test.xice.tsam.model.oa.propertypath.SiloTypePPx;

import test.xice.tsam.model.oa.*;
 
public class ApplicationTypePP {
    private static ApplicationPPx applications;
    private static ApplicationTypeCommandPPx applicationTypeCommands;
    private static DeveloperPPx developers;
    private static ApplicationGroupPPx excludeApplicationGroups;
    private static ApplicationGroupPPx includeApplicationGroups;
    private static PackageTypePPx packageTypes;
    private static SiloConfigPPx siloConfigs;
    private static SiloTypePPx siloTypes;
     

    public static ApplicationPPx applications() {
        if (applications == null) applications = new ApplicationPPx(ApplicationType.P_Applications);
        return applications;
    }

    public static ApplicationTypeCommandPPx applicationTypeCommands() {
        if (applicationTypeCommands == null) applicationTypeCommands = new ApplicationTypeCommandPPx(ApplicationType.P_ApplicationTypeCommands);
        return applicationTypeCommands;
    }

    public static DeveloperPPx developers() {
        if (developers == null) developers = new DeveloperPPx(ApplicationType.P_Developers);
        return developers;
    }

    public static ApplicationGroupPPx excludeApplicationGroups() {
        if (excludeApplicationGroups == null) excludeApplicationGroups = new ApplicationGroupPPx(ApplicationType.P_ExcludeApplicationGroups);
        return excludeApplicationGroups;
    }

    public static ApplicationGroupPPx includeApplicationGroups() {
        if (includeApplicationGroups == null) includeApplicationGroups = new ApplicationGroupPPx(ApplicationType.P_IncludeApplicationGroups);
        return includeApplicationGroups;
    }

    public static PackageTypePPx packageTypes() {
        if (packageTypes == null) packageTypes = new PackageTypePPx(ApplicationType.P_PackageTypes);
        return packageTypes;
    }

    public static SiloConfigPPx siloConfigs() {
        if (siloConfigs == null) siloConfigs = new SiloConfigPPx(ApplicationType.P_SiloConfigs);
        return siloConfigs;
    }

    public static SiloTypePPx siloTypes() {
        if (siloTypes == null) siloTypes = new SiloTypePPx(ApplicationType.P_SiloTypes);
        return siloTypes;
    }

    public static String id() {
        String s = ApplicationType.P_Id;
        return s;
    }

    public static String code() {
        String s = ApplicationType.P_Code;
        return s;
    }

    public static String description() {
        String s = ApplicationType.P_Description;
        return s;
    }

    public static String serverTypeId() {
        String s = ApplicationType.P_ServerTypeId;
        return s;
    }

    public static String registered() {
        String s = ApplicationType.P_Registered;
        return s;
    }

    public static String defaultHostName() {
        String s = ApplicationType.P_DefaultHostName;
        return s;
    }

    public static String usesCron() {
        String s = ApplicationType.P_UsesCron;
        return s;
    }

    public static String usesPool() {
        String s = ApplicationType.P_UsesPool;
        return s;
    }

    public static String usesDns() {
        String s = ApplicationType.P_UsesDns;
        return s;
    }

    public static String dnsName() {
        String s = ApplicationType.P_DnsName;
        return s;
    }

    public static String dnsShortName() {
        String s = ApplicationType.P_DnsShortName;
        return s;
    }

    public static String clientPort() {
        String s = ApplicationType.P_ClientPort;
        return s;
    }

    public static String webPort() {
        String s = ApplicationType.P_WebPort;
        return s;
    }

    public static String sslPort() {
        String s = ApplicationType.P_SslPort;
        return s;
    }

    public static String vipClientPort() {
        String s = ApplicationType.P_VIPClientPort;
        return s;
    }

    public static String vipWebPort() {
        String s = ApplicationType.P_VIPWebPort;
        return s;
    }

    public static String vipSSLPort() {
        String s = ApplicationType.P_VIPSSLPort;
        return s;
    }

    public static String f5Port() {
        String s = ApplicationType.P_F5Port;
        return s;
    }

    public static String hasClient() {
        String s = ApplicationType.P_HasClient;
        return s;
    }

    public static String userId() {
        String s = ApplicationType.P_UserId;
        return s;
    }

    public static String usesIDL() {
        String s = ApplicationType.P_UsesIDL;
        return s;
    }

    public static String directory() {
        String s = ApplicationType.P_Directory;
        return s;
    }

    public static String jarDirectoryName() {
        String s = ApplicationType.P_JarDirectoryName;
        return s;
    }

    public static String startCommand() {
        String s = ApplicationType.P_StartCommand;
        return s;
    }

    public static String snapshotStartCommand() {
        String s = ApplicationType.P_SnapshotStartCommand;
        return s;
    }

    public static String stopCommand() {
        String s = ApplicationType.P_StopCommand;
        return s;
    }

    public static String connectsToMRAD() {
        String s = ApplicationType.P_ConnectsToMRAD;
        return s;
    }

    public static String showInMRAD() {
        String s = ApplicationType.P_ShowInMRAD;
        return s;
    }

    public static String showInDeploy() {
        String s = ApplicationType.P_ShowInDeploy;
        return s;
    }
}
 

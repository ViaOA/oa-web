// Generated by OABuilder
package test.xice.tsam.model.oa.propertypath;
 
import java.io.Serializable;

import test.xice.tsam.model.oa.Environment;
import test.xice.tsam.model.oa.propertypath.EnvironmentTypePPx;
import test.xice.tsam.model.oa.propertypath.IDLPPx;
import test.xice.tsam.model.oa.propertypath.PPxInterface;
import test.xice.tsam.model.oa.propertypath.SiloPPx;
import test.xice.tsam.model.oa.propertypath.SitePPx;

import test.xice.tsam.model.oa.*;
 
public class EnvironmentPPx implements PPxInterface, Serializable {
    private static final long serialVersionUID = 1L;
    public final String pp;  // propertyPath
     
    public EnvironmentPPx(String name) {
        this(null, name);
    }

    public EnvironmentPPx(PPxInterface parent, String name) {
        String s = null;
        if (parent != null) {
            s = parent.toString();
        }
        if (s == null) s = "";
        if (name != null && name.length() > 0) {
            if (s.length() > 0 && name.charAt(0) != ':') s += ".";
            s += name;
        }
        pp = s;
    }

    public EnvironmentTypePPx environmentType() {
        EnvironmentTypePPx ppx = new EnvironmentTypePPx(this, Environment.P_EnvironmentType);
        return ppx;
    }

    public IDLPPx idL() {
        IDLPPx ppx = new IDLPPx(this, Environment.P_IDL);
        return ppx;
    }

    public SiloPPx silos() {
        SiloPPx ppx = new SiloPPx(this, Environment.P_Silos);
        return ppx;
    }

    public SitePPx site() {
        SitePPx ppx = new SitePPx(this, Environment.P_Site);
        return ppx;
    }

    public String id() {
        return pp + "." + Environment.P_Id;
    }

    public String name() {
        return pp + "." + Environment.P_Name;
    }

    public String abbrevName() {
        return pp + "." + Environment.P_AbbrevName;
    }

    public String teAbbrevName() {
        return pp + "." + Environment.P_TEAbbrevName;
    }

    public String ceAbbrevName() {
        return pp + "." + Environment.P_CEAbbrevName;
    }

    public String usesDNS() {
        return pp + "." + Environment.P_UsesDNS;
    }

    public String usesFirewall() {
        return pp + "." + Environment.P_UsesFirewall;
    }

    public String usesVip() {
        return pp + "." + Environment.P_UsesVip;
    }

    public String colorCode() {
        return pp + "." + Environment.P_ColorCode;
    }

    public String envImport() {
        return pp + ".envImport";
    }

    public String envExport() {
        return pp + ".envExport";
    }

    public String mradminImport() {
        return pp + ".mradminImport";
    }

    @Override
    public String toString() {
        return pp;
    }
}
 

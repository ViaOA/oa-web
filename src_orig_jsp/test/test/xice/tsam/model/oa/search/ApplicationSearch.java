// Generated by OABuilder
package test.xice.tsam.model.oa.search;

import java.util.logging.*;

import test.xice.tsam.model.oa.Application;
import test.xice.tsam.model.oa.propertypath.ApplicationPP;
import test.xice.tsam.model.oa.search.ApplicationSearch;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;

import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.propertypath.*;

@OAClass(useDataSource=false, localOnly=true)
public class ApplicationSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(ApplicationSearch.class.getName());
    public static final String P_Name = "Name";
    public static final String P_NameUseNull = "NameUseNull";
    public static final String P_NameUseNotNull = "NameUseNotNull";
    public static final String P_ServerHostName = "ServerHostName";
    public static final String P_ServerHostNameUseNull = "ServerHostNameUseNull";
    public static final String P_ServerHostNameUseNotNull = "ServerHostNameUseNotNull";
    public static final String P_ServerIpAddress = "ServerIpAddress";
    public static final String P_ServerIpAddressUseNull = "ServerIpAddressUseNull";
    public static final String P_ServerIpAddressUseNotNull = "ServerIpAddressUseNotNull";

    protected String name;
    protected boolean nameUseNull;
    protected boolean nameUseNotNull;
    protected String serverHostName;
    protected boolean serverHostNameUseNull;
    protected boolean serverHostNameUseNotNull;
    protected String serverIpAddress;
    protected boolean serverIpAddressUseNull;
    protected boolean serverIpAddressUseNotNull;

    public String getName() {
        return name;
    }
    public void setName(String newValue) {
        fireBeforePropertyChange(P_Name, this.name, newValue);
        String old = name;
        this.name = newValue;
        firePropertyChange(P_Name, old, this.name);
    }
    
      
    public boolean getNameUseNull() {
        return nameUseNull;
    }
    public void setNameUseNull(boolean newValue) {
        boolean old = this.nameUseNull;
        this.nameUseNull = newValue;
        firePropertyChange(P_NameUseNull, old, this.nameUseNull);
    }
    public boolean getNameUseNotNull() {
        return nameUseNotNull;
    }
    public void setNameUseNotNull(boolean newValue) {
        boolean old = this.nameUseNotNull;
        this.nameUseNotNull = newValue;
        firePropertyChange(P_NameUseNotNull, old, this.nameUseNotNull);
    }

    public String getServerHostName() {
        return serverHostName;
    }
    public void setServerHostName(String newValue) {
        fireBeforePropertyChange(P_ServerHostName, this.serverHostName, newValue);
        String old = serverHostName;
        this.serverHostName = newValue;
        firePropertyChange(P_ServerHostName, old, this.serverHostName);
    }
    
      
    public boolean getServerHostNameUseNull() {
        return serverHostNameUseNull;
    }
    public void setServerHostNameUseNull(boolean newValue) {
        boolean old = this.serverHostNameUseNull;
        this.serverHostNameUseNull = newValue;
        firePropertyChange(P_ServerHostNameUseNull, old, this.serverHostNameUseNull);
    }
    public boolean getServerHostNameUseNotNull() {
        return serverHostNameUseNotNull;
    }
    public void setServerHostNameUseNotNull(boolean newValue) {
        boolean old = this.serverHostNameUseNotNull;
        this.serverHostNameUseNotNull = newValue;
        firePropertyChange(P_ServerHostNameUseNotNull, old, this.serverHostNameUseNotNull);
    }

    public String getServerIpAddress() {
        return serverIpAddress;
    }
    public void setServerIpAddress(String newValue) {
        fireBeforePropertyChange(P_ServerIpAddress, this.serverIpAddress, newValue);
        String old = serverIpAddress;
        this.serverIpAddress = newValue;
        firePropertyChange(P_ServerIpAddress, old, this.serverIpAddress);
    }
    
      
    public boolean getServerIpAddressUseNull() {
        return serverIpAddressUseNull;
    }
    public void setServerIpAddressUseNull(boolean newValue) {
        boolean old = this.serverIpAddressUseNull;
        this.serverIpAddressUseNull = newValue;
        firePropertyChange(P_ServerIpAddressUseNull, old, this.serverIpAddressUseNull);
    }
    public boolean getServerIpAddressUseNotNull() {
        return serverIpAddressUseNotNull;
    }
    public void setServerIpAddressUseNotNull(boolean newValue) {
        boolean old = this.serverIpAddressUseNotNull;
        this.serverIpAddressUseNotNull = newValue;
        firePropertyChange(P_ServerIpAddressUseNotNull, old, this.serverIpAddressUseNotNull);
    }

    public void reset() {
        setName(null);
        setNameUseNull(false);
        setNameUseNotNull(false);
        setServerHostName(null);
        setServerHostNameUseNull(false);
        setServerHostNameUseNotNull(false);
        setServerIpAddress(null);
        setServerIpAddressUseNull(false);
        setServerIpAddressUseNotNull(false);
    }

    public boolean isDataEntered() {
        if (getName() != null) return true;
        if (getNameUseNull()) return true;if (getNameUseNotNull()) return true;
        if (getNameUseNull()) return true;
        if (getNameUseNotNull()) return true;
        if (getServerHostName() != null) return true;
        if (getServerHostNameUseNull()) return true;if (getServerHostNameUseNotNull()) return true;
        if (getServerHostNameUseNull()) return true;
        if (getServerHostNameUseNotNull()) return true;
        if (getServerIpAddress() != null) return true;
        if (getServerIpAddressUseNull()) return true;if (getServerIpAddressUseNotNull()) return true;
        if (getServerIpAddressUseNull()) return true;
        if (getServerIpAddressUseNotNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<Application> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<Application> f = new OAQueryFilter<Application>(Application.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<Application> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<Application> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<Application> getSelect() {
        String sql = "";
        String sortOrder = "";
        Object[] args = new Object[0];
        if (nameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Application.P_Name + " = null";
        }
        else if (nameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += Application.P_Name + " != null";
        }
        else if (!OAString.isEmpty(this.name)) {
            if (sql.length() > 0) sql += " AND ";
            String value = name.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += Application.P_Name + " LIKE ?";
            }
            else {
                sql += Application.P_Name + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (serverHostNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ApplicationPP.server().hostName() + " = null";
        }
        else if (serverHostNameUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ApplicationPP.server().hostName() + " != null";
        }
        else if (!OAString.isEmpty(this.serverHostName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverHostName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += ApplicationPP.server().hostName() + " LIKE ?";
            }
            else {
                sql += ApplicationPP.server().hostName() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (serverIpAddressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ApplicationPP.server().ipAddress() + " = null";
        }
        else if (serverIpAddressUseNotNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += ApplicationPP.server().ipAddress() + " != null";
        }
        else if (!OAString.isEmpty(this.serverIpAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverIpAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += ApplicationPP.server().ipAddress() + " LIKE ?";
            }
            else {
                sql += ApplicationPP.server().ipAddress() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<Application> sel = new OASelect<Application>(Application.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        return sel;
    }

    private OAFilter<Application> filterDataSourceFilter;
    public OAFilter<Application> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<Application>() {
            @Override
            public boolean isUsed(Application application) {
                return ApplicationSearch.this.isUsedForDataSourceFilter(application);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<Application> filterCustomFilter;
    public OAFilter<Application> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<Application>() {
            @Override
            public boolean isUsed(Application application) {
                boolean b = ApplicationSearch.this.isUsedForCustomFilter(application);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(application);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(Application application) {
        if (nameUseNull) {
            if (!OACompare.isEmpty(application.getName())) return false;
        }
        else if (nameUseNotNull) {
            if (OACompare.isEmpty(application.getName())) return false;
        }
        else if (name != null) {
            String s = getName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(application.getName(), s)) return false;
        }
        if (serverHostNameUseNull) {
            if (!OACompare.isEmpty(application.getProperty(ApplicationPP.server().hostName()))) return false;
        }
        else if (serverHostNameUseNotNull) {
            if (OACompare.isEmpty(application.getProperty(ApplicationPP.server().hostName()))) return false;
        }
        else if (serverHostName != null) {
            String s = getServerHostName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(application.getProperty(ApplicationPP.server().hostName()), s)) return false;
        }
        if (serverIpAddressUseNull) {
            if (!OACompare.isEmpty(application.getProperty(ApplicationPP.server().ipAddress()))) return false;
        }
        else if (serverIpAddressUseNotNull) {
            if (OACompare.isEmpty(application.getProperty(ApplicationPP.server().ipAddress()))) return false;
        }
        else if (serverIpAddress != null) {
            String s = getServerIpAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(application.getProperty(ApplicationPP.server().ipAddress()), s)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(Application application) {
        return true;
    }
}

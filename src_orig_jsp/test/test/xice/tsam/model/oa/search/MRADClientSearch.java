// Generated by OABuilder
package test.xice.tsam.model.oa.search;

import java.util.logging.*;

import test.xice.tsam.model.oa.ApplicationStatus;
import test.xice.tsam.model.oa.ApplicationType;
import test.xice.tsam.model.oa.MRADClient;
import test.xice.tsam.model.oa.OperatingSystem;
import test.xice.tsam.model.oa.propertypath.MRADClientPP;
import test.xice.tsam.model.oa.search.MRADClientSearch;
import com.viaoa.annotation.*;
import com.viaoa.datasource.*;
import com.viaoa.object.*;
import com.viaoa.hub.*;
import com.viaoa.util.*;
import com.viaoa.filter.OAQueryFilter;

import test.xice.tsam.model.oa.*;
import test.xice.tsam.model.oa.propertypath.*;

@OAClass(useDataSource=false, localOnly=true)
public class MRADClientSearch extends OAObject {
    private static final long serialVersionUID = 1L;
    private static Logger LOG = Logger.getLogger(MRADClientSearch.class.getName());
    public static final String P_ApplicationTypeCode = "ApplicationTypeCode";
    public static final String P_ApplicationTypeCodeUseNull = "ApplicationTypeCodeUseNull";
    public static final String P_ApplicationName = "ApplicationName";
    public static final String P_ApplicationNameUseNull = "ApplicationNameUseNull";
    public static final String P_ServerHostName = "ServerHostName";
    public static final String P_ServerHostNameUseNull = "ServerHostNameUseNull";
    public static final String P_ServerIpAddress = "ServerIpAddress";
    public static final String P_ServerIpAddressUseNull = "ServerIpAddressUseNull";
    public static final String P_ApplicationApplicationType = "ApplicationApplicationType";
    public static final String P_ApplicationApplicationTypeUseNull = "ApplicationApplicationTypeUseNull";
    public static final String P_ApplicationApplicationStatus = "ApplicationApplicationStatus";
    public static final String P_OSVersionOperatingSystem = "OSVersionOperatingSystem";
    public static final String P_OSVersionOperatingSystemUseNull = "OSVersionOperatingSystemUseNull";

    protected String applicationTypeCode;
    protected boolean applicationTypeCodeUseNull;
    protected String applicationName;
    protected boolean applicationNameUseNull;
    protected String serverHostName;
    protected boolean serverHostNameUseNull;
    protected String serverIpAddress;
    protected boolean serverIpAddressUseNull;
    protected ApplicationType applicationApplicationType;
    protected boolean applicationApplicationTypeUseNull;
    protected ApplicationStatus applicationApplicationStatus;
    protected OperatingSystem osVersionOperatingSystem;
    protected boolean osVersionOperatingSystemUseNull;

    public String getApplicationTypeCode() {
        return applicationTypeCode;
    }
    public void setApplicationTypeCode(String newValue) {
        fireBeforePropertyChange(P_ApplicationTypeCode, this.applicationTypeCode, newValue);
        String old = applicationTypeCode;
        this.applicationTypeCode = newValue;
        firePropertyChange(P_ApplicationTypeCode, old, this.applicationTypeCode);
    }
    
      
    public boolean getApplicationTypeCodeUseNull() {
        return applicationTypeCodeUseNull;
    }
    public void setApplicationTypeCodeUseNull(boolean newValue) {
        boolean old = this.applicationTypeCodeUseNull;
        this.applicationTypeCodeUseNull = newValue;
        firePropertyChange(P_ApplicationTypeCodeUseNull, old, this.applicationTypeCodeUseNull);
    }

    public String getApplicationName() {
        return applicationName;
    }
    public void setApplicationName(String newValue) {
        fireBeforePropertyChange(P_ApplicationName, this.applicationName, newValue);
        String old = applicationName;
        this.applicationName = newValue;
        firePropertyChange(P_ApplicationName, old, this.applicationName);
    }
    
      
    public boolean getApplicationNameUseNull() {
        return applicationNameUseNull;
    }
    public void setApplicationNameUseNull(boolean newValue) {
        boolean old = this.applicationNameUseNull;
        this.applicationNameUseNull = newValue;
        firePropertyChange(P_ApplicationNameUseNull, old, this.applicationNameUseNull);
    }

    public String getServerHostName() {
        return serverHostName;
    }
    public void setServerHostName(String newValue) {
        fireBeforePropertyChange(P_ServerHostName, this.serverHostName, newValue);
        String old = serverHostName;
        this.serverHostName = newValue;
        firePropertyChange(P_ServerHostName, old, this.serverHostName);
    }
    
      
    public boolean getServerHostNameUseNull() {
        return serverHostNameUseNull;
    }
    public void setServerHostNameUseNull(boolean newValue) {
        boolean old = this.serverHostNameUseNull;
        this.serverHostNameUseNull = newValue;
        firePropertyChange(P_ServerHostNameUseNull, old, this.serverHostNameUseNull);
    }

    public String getServerIpAddress() {
        return serverIpAddress;
    }
    public void setServerIpAddress(String newValue) {
        fireBeforePropertyChange(P_ServerIpAddress, this.serverIpAddress, newValue);
        String old = serverIpAddress;
        this.serverIpAddress = newValue;
        firePropertyChange(P_ServerIpAddress, old, this.serverIpAddress);
    }
    
      
    public boolean getServerIpAddressUseNull() {
        return serverIpAddressUseNull;
    }
    public void setServerIpAddressUseNull(boolean newValue) {
        boolean old = this.serverIpAddressUseNull;
        this.serverIpAddressUseNull = newValue;
        firePropertyChange(P_ServerIpAddressUseNull, old, this.serverIpAddressUseNull);
    }

    @OAOne
    public ApplicationType getApplicationApplicationType() {
        if (applicationApplicationType == null) {
            applicationApplicationType = (ApplicationType) getObject(P_ApplicationApplicationType);
        }
        return applicationApplicationType;
    }
    public void setApplicationApplicationType(ApplicationType newValue) {
        ApplicationType old = this.applicationApplicationType;
        this.applicationApplicationType = newValue;
        firePropertyChange(P_ApplicationApplicationType, old, this.applicationApplicationType);
    }
    public boolean getApplicationApplicationTypeUseNull() {
        return applicationApplicationTypeUseNull;
    }
    public void setApplicationApplicationTypeUseNull(boolean newValue) {
        boolean old = this.applicationApplicationTypeUseNull;
        this.applicationApplicationTypeUseNull = newValue;
        firePropertyChange(P_ApplicationApplicationTypeUseNull, old, this.applicationApplicationTypeUseNull);
    }

    @OAOne
    public ApplicationStatus getApplicationApplicationStatus() {
        if (applicationApplicationStatus == null) {
            applicationApplicationStatus = (ApplicationStatus) getObject(P_ApplicationApplicationStatus);
        }
        return applicationApplicationStatus;
    }
    public void setApplicationApplicationStatus(ApplicationStatus newValue) {
        ApplicationStatus old = this.applicationApplicationStatus;
        this.applicationApplicationStatus = newValue;
        firePropertyChange(P_ApplicationApplicationStatus, old, this.applicationApplicationStatus);
    }

    @OAOne
    public OperatingSystem getOSVersionOperatingSystem() {
        if (osVersionOperatingSystem == null) {
            osVersionOperatingSystem = (OperatingSystem) getObject(P_OSVersionOperatingSystem);
        }
        return osVersionOperatingSystem;
    }
    public void setOSVersionOperatingSystem(OperatingSystem newValue) {
        OperatingSystem old = this.osVersionOperatingSystem;
        this.osVersionOperatingSystem = newValue;
        firePropertyChange(P_OSVersionOperatingSystem, old, this.osVersionOperatingSystem);
    }
    public boolean getOSVersionOperatingSystemUseNull() {
        return osVersionOperatingSystemUseNull;
    }
    public void setOSVersionOperatingSystemUseNull(boolean newValue) {
        boolean old = this.osVersionOperatingSystemUseNull;
        this.osVersionOperatingSystemUseNull = newValue;
        firePropertyChange(P_OSVersionOperatingSystemUseNull, old, this.osVersionOperatingSystemUseNull);
    }

    public void reset() {
        setApplicationTypeCode(null);
        setApplicationTypeCodeUseNull(false);
        setApplicationName(null);
        setApplicationNameUseNull(false);
        setServerHostName(null);
        setServerHostNameUseNull(false);
        setServerIpAddress(null);
        setServerIpAddressUseNull(false);
        setApplicationApplicationType(null);
        setApplicationApplicationTypeUseNull(false);
        setApplicationApplicationStatus(null);
        setOSVersionOperatingSystem(null);
        setOSVersionOperatingSystemUseNull(false);
    }

    public boolean isDataEntered() {
        if (getApplicationTypeCode() != null) return true;
        if (getApplicationTypeCodeUseNull()) return true;
        if (getApplicationTypeCodeUseNull()) return true;
        if (getApplicationName() != null) return true;
        if (getApplicationNameUseNull()) return true;
        if (getApplicationNameUseNull()) return true;
        if (getServerHostName() != null) return true;
        if (getServerHostNameUseNull()) return true;
        if (getServerHostNameUseNull()) return true;
        if (getServerIpAddress() != null) return true;
        if (getServerIpAddressUseNull()) return true;
        if (getServerIpAddressUseNull()) return true;
        if (getApplicationApplicationType() != null) return true;
        if (getApplicationApplicationTypeUseNull()) return true;
        if (getApplicationApplicationStatus() != null) return true;
        if (getOSVersionOperatingSystem() != null) return true;
        if (getOSVersionOperatingSystemUseNull()) return true;
        return false;
    }

    protected String extraWhere;
    protected Object[] extraWhereParams;
    protected OAFilter<MRADClient> filterExtraWhere;

    public void setExtraWhere(String s, Object ... args) {
        this.extraWhere = s;
        this.extraWhereParams = args;
        if (!OAString.isEmpty(s) && getExtraWhereFilter() == null) {
            OAFilter<MRADClient> f = new OAQueryFilter<MRADClient>(MRADClient.class, s, args);
            setExtraWhereFilter(f);
        }
    }
    public void setExtraWhereFilter(OAFilter<MRADClient> filter) {
        this.filterExtraWhere = filter;
    }
    public OAFilter<MRADClient> getExtraWhereFilter() {
        return this.filterExtraWhere;
    }

    public OASelect<MRADClient> getSelect() {
        String sql = "";
        String sortOrder = "";
        Object[] args = new Object[0];
        if (applicationTypeCodeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().applicationType().code() + " = null";
        }
        else if (!OAString.isEmpty(this.applicationTypeCode)) {
            if (sql.length() > 0) sql += " AND ";
            String value = applicationTypeCode.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += MRADClientPP.application().applicationType().code() + " LIKE ?";
            }
            else {
                sql += MRADClientPP.application().applicationType().code() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (applicationNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().name() + " = null";
        }
        else if (!OAString.isEmpty(this.applicationName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = applicationName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += MRADClientPP.application().name() + " LIKE ?";
            }
            else {
                sql += MRADClientPP.application().name() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (serverHostNameUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().server().hostName() + " = null";
        }
        else if (!OAString.isEmpty(this.serverHostName)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverHostName.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += MRADClientPP.application().server().hostName() + " LIKE ?";
            }
            else {
                sql += MRADClientPP.application().server().hostName() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (serverIpAddressUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().server().ipAddress() + " = null";
        }
        else if (!OAString.isEmpty(this.serverIpAddress)) {
            if (sql.length() > 0) sql += " AND ";
            String value = serverIpAddress.replace("*", "%");
            if (!value.endsWith("%")) value += "%";
            if (value.indexOf("%") >= 0) {
                value = value.toUpperCase();
                sql += MRADClientPP.application().server().ipAddress() + " LIKE ?";
            }
            else {
                sql += MRADClientPP.application().server().ipAddress() + " = ?";
            }
            args = OAArray.add(Object.class, args, value);
        }
        if (applicationApplicationTypeUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().applicationType().pp + " = null";
        }
        else if (getApplicationApplicationType() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().applicationType().pp + " = ?";
            args = OAArray.add(Object.class, args, getApplicationApplicationType());
        }
        if (getApplicationApplicationStatus() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().applicationStatus().pp + " = ?";
            args = OAArray.add(Object.class, args, getApplicationApplicationStatus());
        }
        if (osVersionOperatingSystemUseNull) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().server().osVersion().operatingSystem().pp + " = null";
        }
        else if (getOSVersionOperatingSystem() != null) {
            if (sql.length() > 0) sql += " AND ";
            sql += MRADClientPP.application().server().osVersion().operatingSystem().pp + " = ?";
            args = OAArray.add(Object.class, args, getOSVersionOperatingSystem());
        }

        if (!OAString.isEmpty(extraWhere)) {
            if (sql.length() > 0) sql = "(" + sql + ") AND ";
            sql += extraWhere;
            args = OAArray.add(Object.class, args, extraWhereParams);
        }

        OASelect<MRADClient> sel = new OASelect<MRADClient>(MRADClient.class, sql, args, sortOrder);
        sel.setDataSourceFilter(this.getDataSourceFilter());
        sel.setFilter(this.getCustomFilter());
        return sel;
    }

    private OAFilter<MRADClient> filterDataSourceFilter;
    public OAFilter<MRADClient> getDataSourceFilter() {
        if (filterDataSourceFilter != null) return filterDataSourceFilter;
        filterDataSourceFilter = new OAFilter<MRADClient>() {
            @Override
            public boolean isUsed(MRADClient mradClient) {
                return MRADClientSearch.this.isUsedForDataSourceFilter(mradClient);
            }
        };
        return filterDataSourceFilter;
    }
    
    private OAFilter<MRADClient> filterCustomFilter;
    public OAFilter<MRADClient> getCustomFilter() {
        if (filterCustomFilter != null) return filterCustomFilter;
        filterCustomFilter = new OAFilter<MRADClient>() {
            @Override
            public boolean isUsed(MRADClient mradClient) {
                boolean b = MRADClientSearch.this.isUsedForCustomFilter(mradClient);
                if (b && filterExtraWhere != null) b = filterExtraWhere.isUsed(mradClient);
                return b;
            }
        };
        return filterCustomFilter;
    }
    
    public boolean isUsedForDataSourceFilter(MRADClient mradClient) {
        if (applicationApplicationTypeUseNull) {
            if (!OACompare.isEmpty(mradClient.getProperty(MRADClientPP.application().applicationType().pp))) return false;
        }
        else if (applicationApplicationType != null) {
            if (!OACompare.isEqual(mradClient.getProperty(MRADClientPP.application().applicationType().pp), applicationApplicationType)) return false;
        }
        if (applicationTypeCodeUseNull) {
            if (!OACompare.isEmpty(mradClient.getProperty(MRADClientPP.application().applicationType().code()))) return false;
        }
        else if (applicationTypeCode != null) {
            String s = getApplicationTypeCode();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(mradClient.getProperty(MRADClientPP.application().applicationType().code()), s)) return false;
        }
        if (applicationNameUseNull) {
            if (!OACompare.isEmpty(mradClient.getProperty(MRADClientPP.application().name()))) return false;
        }
        else if (applicationName != null) {
            String s = getApplicationName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(mradClient.getProperty(MRADClientPP.application().name()), s)) return false;
        }
        if (serverHostNameUseNull) {
            if (!OACompare.isEmpty(mradClient.getProperty(MRADClientPP.application().server().hostName()))) return false;
        }
        else if (serverHostName != null) {
            String s = getServerHostName();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(mradClient.getProperty(MRADClientPP.application().server().hostName()), s)) return false;
        }
        if (serverIpAddressUseNull) {
            if (!OACompare.isEmpty(mradClient.getProperty(MRADClientPP.application().server().ipAddress()))) return false;
        }
        else if (serverIpAddress != null) {
            String s = getServerIpAddress();
            if (s != null && s.indexOf('*') < 0 && s.indexOf('%') < 0) s += '*';
            if (!OACompare.isLike(mradClient.getProperty(MRADClientPP.application().server().ipAddress()), s)) return false;
        }
        if (applicationApplicationStatus != null) {
            if (!OACompare.isEqual(mradClient.getProperty(MRADClientPP.application().applicationStatus().pp), applicationApplicationStatus)) return false;
        }
        if (osVersionOperatingSystemUseNull) {
            if (!OACompare.isEmpty(mradClient.getProperty(MRADClientPP.application().server().osVersion().operatingSystem().pp))) return false;
        }
        else if (osVersionOperatingSystem != null) {
            if (!OACompare.isEqual(mradClient.getProperty(MRADClientPP.application().server().osVersion().operatingSystem().pp), osVersionOperatingSystem)) return false;
        }
        return true;
    }
    public boolean isUsedForCustomFilter(MRADClient mradClient) {
        return true;
    }
}
